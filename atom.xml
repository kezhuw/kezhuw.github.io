<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Recording</title>
  <icon>https://www.gravatar.com/avatar/d7a8aec57af92d6a255dd4c6f43c5de1</icon>
  <subtitle>Commit volatile memory to persistent append-only log</subtitle>
  <link href="http://blog.kezhuw.name/atom.xml" rel="self"/>
  
  <link href="http://blog.kezhuw.name/"/>
  <updated>2022-08-18T17:45:59.429Z</updated>
  <id>http://blog.kezhuw.name/</id>
  
  <author>
    <name>Kezhu Wang</name>
    <email>kezhuw@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java concurrency traps and pitfalls 1/N</title>
    <link href="http://blog.kezhuw.name/2022/08/18/Java-concurrency-traps-and-pitfalls/"/>
    <id>http://blog.kezhuw.name/2022/08/18/Java-concurrency-traps-and-pitfalls/</id>
    <published>2022-08-18T10:11:12.000Z</published>
    <updated>2022-08-18T17:45:59.429Z</updated>
    
    <content type="html"><![CDATA[<p>Concurrency is hard. Java has no exception. In this post and possible future posts, I will record traps and pitfalls, I experienced or heard, in Java.</p><h2 id="Nested-write-in-ConcurrentHashMap-compute-could-deadlock">Nested write in <code>ConcurrentHashMap.compute</code> could deadlock</h2><p><code>ConcurrentHashMap</code> uses bucket level lock in write operations (e.g. <code>put</code>, <code>compute</code>) to protect bucket nodes. If nested writing key falls to the same bucket <code>ConcurrentHashMap.compute</code> is serving, then it deadlocks. The javadoc of <code>ConcurrentHashMap.compute</code> and its siblings warn this.</p><blockquote><p>Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.</p></blockquote><p>I encountered this once in production code and the “update” is shadowed by <code>ServiceLoader</code>.</p><p>There are others encountering this.</p><ul><li><a href="https://bugs.openjdk.org/browse/JDK-8062841">JDK-8062841: ConcurrentHashMap.computeIfAbsent stuck in an endless loop</a></li><li><a href="https://github.com/micrometer-metrics/micrometer/issues/2087">Deadlock due to ConcurrentHashMap.compute in PrometheusMeterRegistry</a></li><li><a href="https://blog.jooq.org/avoid-recursion-in-concurrenthashmap-computeifabsent/">Avoid Recursion in ConcurrentHashMap.computeIfAbsent()</a></li></ul><h2 id="CompletableFuture-complete-will-run-non-async-computations-if-it-completes-the-future"><code>CompletableFuture.complete</code> will run non-async computations if it completes the future</h2><blockquote><p>Actions supplied for dependent completions of non-async methods may be performed by the thread that completes the current CompletableFuture, or by any other caller of a completion method.</p></blockquote><p>I think it is not a good design, it makes <code>CompletableFuture.complete</code> vulnerable to <code>CompletableFuture.then</code>, <code>CompletableFuture.when</code> and <code>CompletableFuture.handle</code>. I did see code in production utilize this subtlety to build strong happen-before relation between <code>when</code> and code after <code>complete</code>.</p><p>There are others encountering this.</p><ul><li><a href="https://stackoverflow.com/questions/40393489/java-completablefuture-complete-block">Java CompletableFuture.complete() block</a></li></ul><p>There is <code>CompletableFuture.completeAsync</code>, but not <code>CompletableFuture.completeExceptionallyAsync</code>.</p><h2 id="CompletableFuture-get-may-swallow-InterruptedException-if-waiting-future-completes-immediately-after-Thread-interrupt"><code>CompletableFuture.get</code> may swallow <code>InterruptedException</code> if waiting future completes immediately after <code>Thread.interrupt</code></h2><p>This is what I <a href="https://github.com/kezhuw/openjdk-completablefuture-interruptedexception">found</a> in investigating <a href="https://issues.apache.org/jira/browse/FLINK-19489">FLINK-19489</a> and reported in <a href="https://bugs.openjdk.org/browse/JDK-8254350">JDK-8254350</a>. It is only fixed in <a href="https://github.com/openjdk/jdk16/pull/17">Java 16</a> and later.</p><h2 id="ConcurrentHashMap-size-or-ConcurrentHashMap-isEmpty-does-not-sync-with-concurrent-ConcurrentHashMap-remove"><code>ConcurrentHashMap.size</code> or <code>ConcurrentHashMap.isEmpty</code> does not sync with concurrent <code>ConcurrentHashMap.remove</code></h2><blockquote><p>Bear in mind that the results of aggregate status methods including size, isEmpty, and containsValue are typically useful only when a map is not undergoing concurrent updates in other threads. Otherwise the results of these methods reflect transient states that may be adequate for monitoring or estimation purposes, but not for program control.</p></blockquote><p>Normally, we don’t rely on <code>size</code> or <code>isEmpty</code> to detect concurrent removing. The subtlety is that <code>size</code> or <code>isEmpty</code> after <code>remove</code> could detect state before <code>remove</code> if concurrent <code>remove</code> succeed. Let’s image following sequences.</p><ul><li>A <code>ConcurrentHashMap</code> with key <code>a</code>.</li><li><code>thread-1</code> and <code>thread-2</code> <code>remove</code> key <code>a</code> concurrently.</li><li><code>size</code> or <code>isEmpty</code> after <code>remove</code> in <code>thread-1</code> may not observe <code>remove</code>.</li></ul><p>I am aware of this in investigating <a href="https://issues.apache.org/jira/browse/FLINK-19448">FLINK-19448</a> where I linked <a href="https://replit.com/@kezhuw/openjdk11-concurrent-hashmap-unsynchronized-size">repl</a> for evaluation.</p><h2 id="Thread-getState-could-run-into-Thread-State-BLOCKED-due-to-class-loading"><code>Thread.getState</code> could run into <code>Thread.State.BLOCKED</code> due to class loading</h2><blockquote><p>Returns the state of this thread. This method is designed for use in monitoring of the system state, not for synchronization control.</p></blockquote><p>I found this in investigating <a href="https://issues.apache.org/jira/browse/FLINK-19864">FLINK-19864</a>. Here is the <a href="https://replit.com/@kezhuw/thread-state-blocked-class-loading">repl</a>.</p><h2 id="Conclusion">Conclusion</h2><p>Shit happens. Murphy wins. There is no silver bullet, we need caution and enough eyeballs.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Concurrency is hard. Java has no exception. In this post and possible future posts, I will record traps and pitfalls, I experienced or heard, in Java.&lt;/p&gt;
&lt;h2 id=&quot;Nested-write-in-ConcurrentHashMap-compute-could-deadlock&quot;&gt;Nested write in &lt;code&gt;ConcurrentHashMap.compute&lt;/code&gt; could deadlock&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt; uses bucket level lock in write operations (e.g. &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;compute&lt;/code&gt;) to protect bucket nodes. If nested writing key falls to the same bucket &lt;code&gt;ConcurrentHashMap.compute&lt;/code&gt; is serving, then it deadlocks. The javadoc of &lt;code&gt;ConcurrentHashMap.compute&lt;/code&gt; and its siblings warn this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I encountered this once in production code and the “update” is shadowed by &lt;code&gt;ServiceLoader&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are others encountering this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8062841&quot;&gt;JDK-8062841: ConcurrentHashMap.computeIfAbsent stuck in an endless loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/micrometer-metrics/micrometer/issues/2087&quot;&gt;Deadlock due to ConcurrentHashMap.compute in PrometheusMeterRegistry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.jooq.org/avoid-recursion-in-concurrenthashmap-computeifabsent/&quot;&gt;Avoid Recursion in ConcurrentHashMap.computeIfAbsent()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CompletableFuture-complete-will-run-non-async-computations-if-it-completes-the-future&quot;&gt;&lt;code&gt;CompletableFuture.complete&lt;/code&gt; will run non-async computations if it completes the future&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Actions supplied for dependent completions of non-async methods may be performed by the thread that completes the current CompletableFuture, or by any other caller of a completion method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think it is not a good design, it makes &lt;code&gt;CompletableFuture.complete&lt;/code&gt; vulnerable to &lt;code&gt;CompletableFuture.then&lt;/code&gt;, &lt;code&gt;CompletableFuture.when&lt;/code&gt; and &lt;code&gt;CompletableFuture.handle&lt;/code&gt;. I did see code in production utilize this subtlety to build strong happen-before relation between &lt;code&gt;when&lt;/code&gt; and code after &lt;code&gt;complete&lt;/code&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://blog.kezhuw.name/tags/Java/"/>
    
    <category term="concurrency" scheme="http://blog.kezhuw.name/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Spanner</title>
    <link href="http://blog.kezhuw.name/2022/06/12/Understanding-Spanner/"/>
    <id>http://blog.kezhuw.name/2022/06/12/Understanding-Spanner/</id>
    <published>2022-06-12T08:10:21.000Z</published>
    <updated>2022-06-29T03:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>It has been decade since <a href="https://research.google/pubs/pub39966/">Spanner</a> published, and several Spanner inspired open source projects has been approached to prevailing, says <a href="https://github.com/cockroachdb/cockroach/">CockroachDB</a> and <a href="https://github.com/yugabyte/yugabyte-db/">YugabyteDB</a> <a href="https://www.cockroachlabs.com/blog/living-without-atomic-clocks/">in lack of TrueTime</a>. It should be much easier to understand Spanner with these pioneer open source projects today.</p><h2 id="What-are-tablet-paxos-group-directory-and-fragment">What are tablet, paxos group, directory and fragment ?</h2><blockquote><p>A directory is the unit of data placement. All data in a directory has the same replication configuration.</p></blockquote><blockquote><p>a Spanner tablet is a container that may encapsulate multiple partitions of the row space. We made this decision so that it would be possible to colocate multiple directories that are frequently accessed together.</p></blockquote><blockquote><p>A directory is also the smallest unit whose geographic-replication properties (or placement, for short) can be specified by an application. The design of our placement-specification language separates responsibilities for managing replication configurations. Administrators control two dimensions: the number and types of replicas, and the geographic placement of those replicas. They create a menu of named options in these two dimensions (e.g., North America, replicated 5 ways with 1 witness). An application controls how data is replicated, by tagging each database and/or individual directories with a combination of those options. For example, an application might store each end-user’s data in its own directory, which would enable user A’s data to have three replicas in Europe, and user B’s data to have five replicas in North America.</p></blockquote><blockquote><p>For expository clarity we have over-simplified. In fact, Spanner will shard a directory into multiple fragments if it grows too large. Fragments may be served from different Paxos groups (and therefore different servers). Movedir actually moves fragments, and not whole directories, between groups.</p></blockquote><p>I map these to CockroachDB’s concepts.</p><table><thead><tr><th>Spanner</th><th>CockroachDB</th><th>What</th></tr></thead><tbody><tr><td>Tablet</td><td><a href="https://github.com/cockroachdb/cockroach/blob/eeb72360fe8e5bdc9ed123612c4e71b975b52124/pkg/kv/kvserver/store.go#L434">Store</a></td><td>Colocation container for different fragments/ranges</td></tr><tr><td>Paxos group</td><td><a href="https://github.com/cockroachdb/cockroach/blob/eeb72360fe8e5bdc9ed123612c4e71b975b52124/docs/design.md#raft---consistency-of-range-replicas">Multi raft group</a></td><td>Tablet’s consensus group</td></tr><tr><td>Fragment</td><td><a href="https://github.com/cockroachdb/cockroach/blob/eeb72360fe8e5bdc9ed123612c4e71b975b52124/pkg/kv/kvserver/replica.go#L188">Range Replica</a></td><td>Continuous key space</td></tr><tr><td>Directory</td><td>Table, database and other <a href="https://www.cockroachlabs.com/docs/stable/configure-replication-zones.html">Replication zones</a></td><td>Logical container of fragments/ranges for data placement specification</td></tr></tbody></table><h2 id="Why-long-lived-leader">Why long-lived leader ?</h2><blockquote><p>Spanner’s Paxos implementation uses timed leases to make leadership long-lived (10 seconds by default). A potential leader sends requests for timed lease votes; upon receiving a quorum of lease votes the leader knows it has a lease. A replica extends its lease vote implicitly on a successful write, and the leader requests lease-vote extensions if they are near expiration. Define a leader’s lease interval as starting when it discovers it has a quorum of lease votes, and as ending when it no longer has a quorum of lease votes (because some have expired). Spanner depends on the following disjointness invariant: for each Paxos group, each Paxos leader’s lease interval is disjoint from every other leader’s.</p></blockquote><p>Writes and their commit timestamps in Spanner and alikes are persistent through consensus group. When leader receives a no stale read only request, it has to choice a read timestamp <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{read} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> which must satisfy <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub><mo>&gt;</mo><mo>=</mo><msubsup><mi>t</mi><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant="normal">_</mi><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msubsup><mo>=</mo><msubsup><mi>t</mi><mrow><mi>g</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant="normal">_</mi><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{read} &gt;= t_{leader}^{max\_committed} = t_{group}^{max\_committed} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3492160000000002em;vertical-align:-0.301308em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.047908em;"><span style="top:-2.398692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.2618000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.301308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.300608em;vertical-align:-0.2527em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.047908em;"><span style="top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">p</span></span></span></span><span style="top:-3.2618000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2527em;"><span></span></span></span></span></span></span></span></span></span> to keep result set not stale.</p><p>Ideally, it should be able to satisfy this requirement without resort to consensus group as it is the leader. However, in present of leader change, there could be unobserved committed writes after <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant="normal">_</mi><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{leader}^{max\_committed} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3492160000000002em;vertical-align:-0.301308em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.047908em;"><span style="top:-2.398692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.2618000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.301308em;"><span></span></span></span></span></span></span></span></span></span>, eg. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>g</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant="normal">_</mi><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msubsup><mo>&gt;</mo><msubsup><mi>t</mi><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant="normal">_</mi><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{group}^{max\_committed} &gt; t_{leader}^{max\_committed} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.300608em;vertical-align:-0.2527em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.047908em;"><span style="top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">p</span></span></span></span><span style="top:-3.2618000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2527em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3492160000000002em;vertical-align:-0.301308em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.047908em;"><span style="top:-2.398692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.2618000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.301308em;"><span></span></span></span></span></span></span></span></span></span>, this breaks no stale requirement. Thus, the leader has to go through consensus group to ensure that no leadership change between <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{read} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant="normal">_</mi><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{leader}^{max\_committed} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3492160000000002em;vertical-align:-0.301308em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.047908em;"><span style="top:-2.398692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.2618000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.301308em;"><span></span></span></span></span></span></span></span></span></span>. This is likely unacceptable in most situations especially OLTP where read latency is crucial.</p><p>With leader lease, the leader could freely pick a <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{read} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> in interval <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msubsup><mi>t</mi><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant="normal">_</mi><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>t</mi><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi mathvariant="normal">_</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>i</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></msubsup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[t_{leader}^{max\_committed}, t_{leader}^{lease\_expiration}] </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3492160000000002em;vertical-align:-0.301308em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.047908em;"><span style="top:-2.398692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.2618000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.301308em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.047908em;"><span style="top:-2.398692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.2618000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.301308em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> without touching consensus as new leader will not commit a write prior to old leader’s lease expiration.</p><h2 id="How-Spanner-satisfy-serializability">How Spanner satisfy serializability ?</h2><blockquote><p>Transactional reads and writes use two-phase locking. As a result, they can be assigned timestamps at any time when all locks have been acquired, but before any locks have been released. For a given transaction, Spanner assigns it the timestamp that Paxos assigns to the Paxos write that represents the transaction commit</p></blockquote><blockquote><p>Reads within read-write transactions use wound-wait to avoid deadlocks. The client issues reads to the leader replica of the appropriate group, which acquires read locks and then reads the most recent data. While a client transaction remains open, it sends keepalive messages to prevent participant leaders from timing out its transaction. When a client has completed all reads and buffered all writes, it begins two-phase commit.</p></blockquote><p>It is a lock-based implementation of write snapshot isolation from <a href="https://dl.acm.org/doi/10.1145/2168836.2168853">A Critique of Snapshot Isolation</a>’s perspective.</p><p>CockroachDB implements write snapshot isolation also, but without explicit locking.</p><ul><li>CockroachDB starts with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><msub><mi>x</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub><mo>=</mo><mo>=</mo><mi>t</mi><msub><mi>x</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">tx_{read} == tx_{commit} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</li><li>CockroachDB stores <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><msub><mi>x</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">tx_{read} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> in <a href="https://www.cockroachlabs.com/docs/stable/architecture/transaction-layer.html#timestamp-cache">timestamp cache</a> and prevents writes beneath it. We could treat timestamp cache as optimistic implicit lock facility.</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><msub><mi>x</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">tx_{commit} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> could be pushed to newer timestamp due to more recent reads in timestamp cache and writes in mvcc storage.</li><li>CockroachDB <a href="https://www.cockroachlabs.com/docs/stable/architecture/transaction-layer.html#read-refreshing">refreshes</a> and bumps <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><msub><mi>x</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">tx_{read} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><msub><mi>x</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">tx_{commit} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> in case of no writes in between.</li><li>Ensure that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><msub><mi>x</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">tx_{commit} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> resides beneath <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi mathvariant="normal">_</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>i</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{leader}^{lease\_expiration} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3492160000000002em;vertical-align:-0.301308em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.047908em;"><span style="top:-2.398692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.2618000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mtight" style="margin-right:0.02778em;">_</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.301308em;"><span></span></span></span></span></span></span></span></span></span>.</li></ul><p>Both Spanner and CockroachDB try to align <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><msub><mi>x</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">tx_{read} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><msub><mi>x</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">tx_{commit} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> by preventing writes to read set to achieve serializability.</p><h2 id="Does-Spanner-allow-“read-your-writes”-inside-transaction">Does Spanner allow “read your writes” inside transaction ?</h2><blockquote><p>Like Bigtable, writes that occur in a transaction are buffered at the client until commit. As a result, reads in a transaction do not see the effects of the transaction’s writes. This design works well in Spanner because a read returns the timestamps of any data read, and uncommitted writes have not yet been assigned timestamps.</p></blockquote><p>No. I think it is a must to write uncommitted writes to server in order to achieve “read your writes” in no trivial read. This enables complex low latency access patterns in server side. Both CockroachDB and YugabyteDB submit writes to server to “read own writes”.</p><h2 id="How-Spanner-satisfy-linearizability">How Spanner satisfy linearizability ?</h2><blockquote><p>Spanner enforces the following external-consistency invariant: if the start of a transaction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">T_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> occurs after the commit of a transaction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">T_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, then the commit timestamp of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">T_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> must be greater than the commit timestamp of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">T_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. Define the start and commit events for a transaction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>e</mi><mi>i</mi><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">e^{start}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05222em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>e</mi><mi>i</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">e^{commit}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0833279999999998em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span>; and the commit timestamp of a transaction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. The invariant becomes <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>b</mi><mi>s</mi><mo stretchy="false">(</mo><msubsup><mi>e</mi><mn>1</mn><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo><mo>&lt;</mo><mi>t</mi><mi>a</mi><mi>b</mi><mi>s</mi><mo stretchy="false">(</mo><msubsup><mi>e</mi><mn>2</mn><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo><mo>⇒</mo><mi>s</mi><mn>1</mn><mo>&lt;</mo><mi>s</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">tabs(e^{commit}_1) &lt; tabs(e^{start}_2) ⇒ s1 &lt; s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">b</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.043556em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">b</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">s</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord">2</span></span></span></span>. The protocol for executing transactions and assigning timestamps obeys two rules, which together guarantee this invariant, as shown below. Define the arrival event of the commit request at the coordinator leader for a write <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to be <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>e</mi><mi>i</mi><mrow><mi>s</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">e^{server}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.923056em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span>.</p></blockquote><blockquote><p>Start: The coordinator leader for a write <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> assigns a commit timestamp <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> no less than the value of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>T</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">TT.now().latest</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">.</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span></span></span></span>, computed after <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>e</mi><mi>i</mi><mrow><mi>s</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">e^{server}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.923056em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span>.</p></blockquote><blockquote><p>Commit Wait: The coordinator leader ensures that clients cannot see any data committed by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> until <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>T</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>f</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TT.after(s_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> is true. Commit wait ensures that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is less than the absolute commit time of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub><mo>&lt;</mo><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msubsup><mi>e</mi><mi>i</mi><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s_i &lt; t_{abs}(e_i^{commit}) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0833279999999998em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.</p></blockquote><p>It is commit-wait. Before declaring a transaction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> with commit timestamp <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> visible, it waits until <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>T</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>f</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TT.after(s_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, aka. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub><mo>&lt;</mo><mi>T</mi><mi>T</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi>e</mi><mi>a</mi><mi>r</mi><mi>l</mi><mi>i</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">s_i &lt; TT.now().earliest</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">.</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span></span></span></span>. This means that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>a</mi><mi>b</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>e</mi><mrow><mi>n</mi><mi>o</mi><mi>w</mi></mrow></msub><mo stretchy="false">)</mo><mo>&gt;</mo><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">t_{abs}(e_{now}) &gt; s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> on all Spanner servers. Hence no transaction will commit before <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> after observing <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. This prevents “causal reverse anomaly” in <a href="https://cockroachlabs.com/blog/living-without-atomic-clocks/#the-importance-of-time-in-distributed-systems">CockroachDB’s term</a>.</p><p><img src="https://www.cockroachlabs.com/wp-content/uploads/2016/02/image1-1024x525.png" alt="" title="causal reverse anomaly"></p><h2 id="How-transaction-commit-works">How transaction commit works ?</h2><blockquote><p>If a transaction involves only one Paxos group (as is the case for most transactions), it can bypass the transaction manager, since the lock table and Paxos together provide transactionality.</p></blockquote><p>YugabyteDB supports <a href="https://docs.yugabyte.com/preview/architecture/transactions/single-row-transactions/#leader-leases-reading-the-latest-data-in-case-of-a-network-partition">Single-row ACID transactions </a>;</p><blockquote><p>If a transaction involves more than one Paxos group, those groups’ leaders coordinate to perform two-phase commit. One of the participant groups is chosen as the coordinator: the participant leader of that group will be referred to as the coordinator leader, and the slaves of that group as coordinator slaves. The state of each transaction manager is stored in the underlying Paxos group (and therefore is replicated).</p></blockquote><p>The choice of coordiantor group could be pretty simple. In CockroachDB, it is the group that owns transaction record and first write key. In YugabyteDB, it is the txn status tablet.</p><blockquote><p>When a client has completed all reads and buffered all writes, it begins two-phase commit. The client chooses a coordinator group and sends a commit message to each participant’s leader with the identity of the coordinator and any buffered writes.</p></blockquote><p>The buffered writes could be divided acoording to Paxos groups’ key spaces.</p><blockquote><p>A non-coordinator-participant leader first acquires write locks. It then chooses a prepare timestamp that must be larger than any timestamps it has assigned to previous transactions (to preserve monotonicity), and logs a prepare record through Paxos. Each participant then notifies the coordinator of its prepare timestamp.</p></blockquote><p>Now, these participant groups could not serve no stale reads with timestamp <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub><mo>&gt;</mo><mo>=</mo><msubsup><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>g</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t_{read} &gt;= s_{i,g}^{prepare} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1952720000000001em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span> as it is unknown whether that transaction will be committed or aborted. It must block before <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> resolved.</p><blockquote><p>The coordinator leader also first acquires write locks, but skips the prepare phase. It chooses a timestamp for the entire transaction after hearing from all other participant leaders. The commit timestamp <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span> must be greater or equal to all prepare timestamps, greater than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>T</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">TT.now().latest</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">.</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span></span></span></span> at the time the coordinator received its commit message, and greater than any timestamps the leader has assigned to previous transactions (again, to preserve monotonicity). The coordinator leader then logs a commit record through Paxos (or an abort if it timed out while waiting on the other participants).</p></blockquote><p>The transaction is irrevocably decided after commit/abort record accepted by consensus group, all left are resolving pending writes. CockroachDB and YugabyteDB use similar approach to persist <a href="https://github.com/cockroachdb/cockroach/blob/dc80d3cce7f89896bd81c32ac8caf0be094cb961/pkg/kv/kvserver/batcheval/cmd_end_transaction.go#L598">transaction</a> <a href="https://github.com/yugabyte/yugabyte-db/blob/4fb1676a785319fa35e2d75241a870e3115f1637/src/yb/tablet/transaction_coordinator.cc#L717">status</a>.</p><blockquote><p>Before allowing any coordinator replica to apply the commit record, the coordinator leader waits until TT.after(s), so as to obey the commit-wait rule. After commit wait, the coordinator sends the commit timestamp to the client and all other participant leaders. Each participant leader logs the transaction’s outcome through Paxos. All participants apply at the same timestamp and then release locks.</p></blockquote><p>Notice that commit-wait block all clients but not only committing client from observing transaction committed result. All participants are suspicious and prevented from “causal reverse anomaly”.</p><p>I think we could optimize commit-wait by pipelining commit timestamp to all other participant leaders and let all participanting Paxos group leaders commit-wait parallelly to reduce no stale read latency.</p><h2 id="Why-lock-writes-in-write-snapshot-isolation">Why lock writes in write snapshot isolation ?</h2><p>According to <a href="https://dl.acm.org/doi/10.1145/2168836.2168853">A Critique of Snapshot Isolation</a>, in write snapshot isolation write-write conflict avoidance is not necessary for serializability. So why both CockroachDB and Spanner lock writes in addition to write snapshot isolation ?</p><p>I see difficulties in absent of write-write conflict. When there are multiple writes on single keys, the pending writes resolution could be complicated due to unaligned concurrent transaction commits. In Spanner, participant leader has to wait all commit timestamps from pending transactions to resolve pending writes as it does not know concrete commit timestamp in prepare phase. In CockroachDB, range leaseholder has to persist pending writes in ascending order of commit timestamps.</p><p>There are certainly other reasons(eg. conflict rate, other engineering difficulties) aside from what I see.</p><h2 id="How-Spanner-serve-read-only-transactions">How Spanner serve read only transactions ?</h2><blockquote><p>Every replica tracks a value called safe time <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> which is the maximum timestamp at which a replica is up-to-date. A replica can satisfy a read at a timestamp <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span> if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>&lt;</mo><mo>=</mo><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t &lt;= t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>.</p></blockquote><p>This means that there are no unobserved writes with commit timestamp <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>&lt;</mo><mo>=</mo><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t &lt;= t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>. This guarantee a consistent snapshot. It is <a href="https://www.cockroachlabs.com/docs/stable/architecture/transaction-layer.html#closed-timestamps">closed timestamp</a> in CockroachDB, and <a href="https://docs.yugabyte.com/preview/architecture/transactions/single-row-transactions/#definition-of-safe-time">safe timestamp</a> in YugabyteDB.</p><blockquote><p>A read-only transaction executes in two phases: assign a timestamp <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, and then execute the transaction’s reads as snapshot reads at <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. The snapshot reads can execute at any replicas that are sufficiently up-to-date.</p></blockquote><blockquote><p>The simple assignment of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub><mo>=</mo><mi>T</mi><mi>T</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">s_{read} = TT.now().latest</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">.</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span></span></span></span>, at any time after a transaction starts, preserves external consistency. However, such a timestamp may require the execution of the data reads at <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to block if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> has not advanced sufficiently. To reduce the chances of blocking, Spanner should assign the oldest timestamp that preserves external consistency.</p></blockquote><blockquote><p>Spanner requires a scope expression for every read-only transaction, which is an expression that summarizes the keys that will be read by the entire transaction. Spanner automatically infers the scope for standalone queries. If the scope’s values are served by a single Paxos group, then the client issues the read-only transaction to that group’s leader. If the scope’s values are served by multiple Paxos groups, Spanner reads at <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub><mo>=</mo><mi>T</mi><mi>T</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">s_{read} = TT.now().latest</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">.</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span></span></span></span>.</p></blockquote><blockquote><p>Define <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_{safe} = min(t^{Paxos}_{safe}, t^{TM}_{safe})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, where each Paxos state machine has a safe time <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t^{Paxos}_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> and each transaction manager has a safe time <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t^{TM}_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>.</p></blockquote><blockquote><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t^{Paxos}_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> is simpler: it is the timestamp of the highest-applied Paxos write. Because timestamps increase monotonically and writes are applied in order, writes will no longer occur at or below <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t^{Paxos}_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> with respect to Paxos. </blockquote><p>Paxos leader should be able to bump <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t^{Paxos}_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> to other timestamp within its lease to serve <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub><mo>&gt;</mo><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>P</mi><mi>a</mi><mi>x</mi><mi>o</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">s_{read} &gt; t^{Paxos}_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>.</p><blockquote><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t^{TM}_{safe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span> is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> at a replica if there are zero prepared (but not committed) transactions—that is, transactions in between the two phases of two-phase commit.</blockquote><p>In case of no prepared transactions, Paxos leader could serve no stale read  directly without blocking as long as its leader lease is valid.</p><blockquote><p>If there are any such transactions, participant knows a lower bound on a prepared transaction’s timestamp. Every participant leader (for a group <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>) for a transaction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> assigns a prepare timestamp <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>g</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">s^{prepare}_{i,g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1952720000000001em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span> to its prepare record. The coordinator leader ensures that the transaction’s commit timestamp <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub><mo>&gt;</mo><mo>=</mo><msubsup><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>g</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">s_i &gt;= s^{prepare}_{i,g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1952720000000001em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span> over all participant groups <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>. Therefore, for every replica in a group <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>, over all transactions <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> prepared at <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>M</mi></mrow></msubsup><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mi>i</mi><mo stretchy="false">(</mo><msubsup><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>g</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi></mrow></msubsup><mo stretchy="false">)</mo><mtext>−</mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">t^{TM}_{safe} = mini(s^{prepare}_{i,g}) − 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2605469999999999em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1952720000000001em;vertical-align:-0.412972em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">i</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">−</span><span class="mord">1</span></span></span></span> over all transactions prepared at <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>.</p></blockquote><p>In case of prepared transactions, Spanner must wait all existing prepared transactions resolved.</p><p>All in all, for no stale read, Spanner may have to wait for prepared transactions to be resolved or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>s</mi><mi>a</mi><mi>f</mi><mi>e</mi></mrow></msub><mo>&gt;</mo><mo>=</mo><msub><mi>s</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{safe} &gt;= s_{read}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. For low latency read, Spanner provides <a href="https://cloud.google.com/spanner/docs/reads">stale reads</a>.</p><h2 id="Notes-on-TrueTime">Notes on TrueTime</h2><ul><li>Valuable due to tight error bound. A 500ms error bound XyzTime is useless.</li><li>No communication across data centers. This restricts engineering difficulties to single data center.</li></ul><h2 id="Thoughts">Thoughts</h2><p>Spanner is great for global deployment across data centers and continents.</p><ul><li>It provides linearizability.</li><li>Commit wait is negligible as it overlap with Paxos communication.</li></ul><h2 id="Recommendations">Recommendations</h2><ul><li>CockroachDB is a pioneer in Spanner alike systems. It presents <a href="https://github.com/cockroachdb/cockroach/blob/eeb72360fe8e5bdc9ed123612c4e71b975b52124/docs/RFCS/20180324_parallel_commit.md">parallel commit</a>, <a href="https://github.com/cockroachdb/cockroach/blob/eeb72360fe8e5bdc9ed123612c4e71b975b52124/docs/RFCS/20200811_non_blocking_txns.md">Non-Blocking Transactions</a> and builds <a href="https://github.com/cockroachdb/cockroach/tree/master/docs">a document treasure trove</a>.</li><li>YugabyteDB looks more <a href="https://docs.yugabyte.com/preview/architecture/concepts/">traditional</a> and its <a href="https://docs.yugabyte.com/preview/architecture/docdb/persistence/">document-based storage</a> enables <a href="https://docs.yugabyte.com/preview/architecture/transactions/isolation-levels/">fine grained locking</a>.</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;It has been decade since &lt;a href=&quot;https://research.google/pubs/pub39966/&quot;&gt;Spanner&lt;/a&gt; published, and several Spanner inspired open source projects has been approached to prevailing, says &lt;a href=&quot;https://github.com/cockroachdb/cockroach/&quot;&gt;CockroachDB&lt;/a&gt; and &lt;a href=&quot;https://github.com/yugabyte/yugabyte-db/&quot;&gt;YugabyteDB&lt;/a&gt; &lt;a href=&quot;https://www.cockroachlabs.com/blog/living-without-atomic-clocks/&quot;&gt;in lack of TrueTime&lt;/a&gt;. It should be much easier to understand Spanner with these pioneer open source projects today.&lt;/p&gt;
&lt;h2 id=&quot;What-are-tablet-paxos-group-directory-and-fragment&quot;&gt;What are tablet, paxos group, directory and fragment ?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A directory is the unit of data placement. All data in a directory has the same replication configuration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a Spanner tablet is a container that may encapsulate multiple partitions of the row space. We made this decision so that it would be possible to colocate multiple directories that are frequently accessed together.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A directory is also the smallest unit whose geographic-replication properties (or placement, for short) can be specified by an application. The design of our placement-specification language separates responsibilities for managing replication configurations. Administrators control two dimensions: the number and types of replicas, and the geographic placement of those replicas. They create a menu of named options in these two dimensions (e.g., North America, replicated 5 ways with 1 witness). An application controls how data is replicated, by tagging each database and/or individual directories with a combination of those options. For example, an application might store each end-user’s data in its own directory, which would enable user A’s data to have three replicas in Europe, and user B’s data to have five replicas in North America.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For expository clarity we have over-simplified. In fact, Spanner will shard a directory into multiple fragments if it grows too large. Fragments may be served from different Paxos groups (and therefore different servers). Movedir actually moves fragments, and not whole directories, between groups.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I map these to CockroachDB’s concepts.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Spanner&lt;/th&gt;
&lt;th&gt;CockroachDB&lt;/th&gt;
&lt;th&gt;What&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Tablet&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/cockroachdb/cockroach/blob/eeb72360fe8e5bdc9ed123612c4e71b975b52124/pkg/kv/kvserver/store.go#L434&quot;&gt;Store&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Colocation container for different fragments/ranges&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Paxos group&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/cockroachdb/cockroach/blob/eeb72360fe8e5bdc9ed123612c4e71b975b52124/docs/design.md#raft---consistency-of-range-replicas&quot;&gt;Multi raft group&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Tablet’s consensus group&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fragment&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/cockroachdb/cockroach/blob/eeb72360fe8e5bdc9ed123612c4e71b975b52124/pkg/kv/kvserver/replica.go#L188&quot;&gt;Range Replica&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Continuous key space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Directory&lt;/td&gt;
&lt;td&gt;Table, database and other &lt;a href=&quot;https://www.cockroachlabs.com/docs/stable/configure-replication-zones.html&quot;&gt;Replication zones&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Logical container of fragments/ranges for data placement specification&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Why-long-lived-leader&quot;&gt;Why long-lived leader ?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Spanner’s Paxos implementation uses timed leases to make leadership long-lived (10 seconds by default). A potential leader sends requests for timed lease votes; upon receiving a quorum of lease votes the leader knows it has a lease. A replica extends its lease vote implicitly on a successful write, and the leader requests lease-vote extensions if they are near expiration. Define a leader’s lease interval as starting when it discovers it has a quorum of lease votes, and as ending when it no longer has a quorum of lease votes (because some have expired). Spanner depends on the following disjointness invariant: for each Paxos group, each Paxos leader’s lease interval is disjoint from every other leader’s.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Spanner" scheme="http://blog.kezhuw.name/tags/Spanner/"/>
    
    <category term="CockroachDB" scheme="http://blog.kezhuw.name/tags/CockroachDB/"/>
    
    <category term="YugabyteDB" scheme="http://blog.kezhuw.name/tags/YugabyteDB/"/>
    
    <category term="database" scheme="http://blog.kezhuw.name/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>A step by step approach to raft consensus algorithm</title>
    <link href="http://blog.kezhuw.name/2018/03/20/A-step-by-step-approach-to-raft-consensus-algorithm/"/>
    <id>http://blog.kezhuw.name/2018/03/20/A-step-by-step-approach-to-raft-consensus-algorithm/</id>
    <published>2018-03-20T05:40:22.000Z</published>
    <updated>2018-04-12T00:55:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is my second time to read through <a href="https://raft.github.io/">Raft</a> <a href="https://purl.stanford.edu/qr033xr6097">Algorithm</a>, and it is hard to<br>recall what I have learned in first reading. This time I decide to record my thoughts for future<br>recall. Hope it is useful to newbies in distributed systems like me.</p><h2 id="What-does-consensus-algorithm-mean">What does consensus algorithm mean ?</h2><p><strong>Consensus algorithm is the process used to achieve agreement on shared state among <a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing">faulty<br>processes</a> in distributed system.</strong></p><h2 id="Introduce-Replicated-State-Machines">Introduce Replicated State Machines</h2><p>Here, we define state machine as <code>State' = Machine(State, Input)</code> for simplicity. A state machine<br>can be defined with its start state, and makes progress with sequence of inputs, produces sequence<br>of intermediate states. For examples:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">State&#x27; = Machine(State, Input)</span><br><span class="line">State&#x27;&#x27; = Machine(State&#x27;, Input&#x27;)</span><br><span class="line">State&#x27;&#x27;&#x27; = Machine(State&#x27;&#x27;, Input&#x27;&#x27;)</span><br></pre></td></tr></table></figure><p>Given a state machine, how can we figure out that it is a replicated state machine ?</p><p>First, <strong>replicated state machine is deterministic</strong>. Given same start state with same sequence of<br>inputs, the state machine always produce same intermediate states.</p><p>Second, two state machines built from same logic on possibly different processes or nodes and<br>even possibly different languages must be same. Here we define two state machines as same based<br>on deterministic: given same start state and same sequence of inputs, if two state machines<br>produce same sequence of intermediate states, we say these two state machine are same. Thus given<br>multiple copies of same state machines with same start state, feeding with same sequence of inputs,<br>they must produces same sequence of intermediate states.</p><p>Third, states, including start state and intermediate states, and inputs must be self-contained,<br>thus can be replicated to other processes or nodes with help of serialization and deserialization.</p><p>The word replicated in <a href="https://en.wikipedia.org/wiki/State_machine_replication">replicated state machine</a> has duple means: deterministic and replication.<br>Occasionally, replicated state machine is used in non distributed systems to validate processes<br>using its deterministic. More often, replicated state machines are used to validate or repliate<br>processes among processes or nodes in distributed systems.</p><h2 id="How-replicated-state-machines-implemented-in-distributed-systems">How replicated state machines implemented in distributed systems ?</h2><p>Replicated state machines are typically implemented using a <a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying">replicated log</a>, this is particular due<br>to the fact that state machine process sequence of inputs one by one in order, non batch, non concurrency,<br>I guess. Here, replicated in replicated log means replication cross processes or nodes.</p><p>In replciated log, inputs to state machines are appended as sequence of entries or records in order,<br>these entries will be replicated to replicated logs reside in other nodes in later time, and feeded<br>to state machines reside in their nodes for apply eventually.</p><p>Thus if given identical sequence entries from replicated log, multiple copies of same state machine<br>will produce same sequence of states. But how can we promise identical sequence cross different faulty<br>nodes in distributed systems ? That is consensus algorithm’s job.</p><h2 id="Raft">Raft</h2><blockquote><p>Raft implements consensus by first electing a server as leader, then giving the leader complete responsibility<br>for managing the replicated log. The leader accepts log entries from clients, replicates them on other servers,<br>and tells servers when it is safe to apply log entries to their state machines.</p><p>Raft decomposes the consensus problem into two relatively independent subproblems:</p><ul><li>Leader election: a new leader must be chosen when starting the cluster and when an existing leader fails.</li><li>Log replication: the leader must accept log entries from clients and replicate them across the cluster,<br>forcing the other logs to agree with its own.</li></ul></blockquote><h3 id="Prerequisites">Prerequisites</h3><h4 id="Majority-and-minority">Majority and minority</h4><p>For a raft cluster contains odd number of servers, say <code>2*N + 1</code>, or even number of servers,<br>say <code>2*N</code>, we say majority of the cluster comprises at least <code>N + 1</code> servers, and minority of<br>the cluster comprises at most <code>N </code> servers.</p><h4 id="Server-roles">Server roles</h4><p>At any given time each server is in one of three states: leader, follower, or candidate. In<br>normal operation there is exactly one leader and all of the other servers are followers.<br>Followers are passive: they issue no requests on their own but simply respond to requests from<br>leaders and candidates. The leader handles all client requests (if a client contacts a follower,<br>the follower redirects it to the leader).  The third state, candidate, is used to elect a new leader.<br>The following figure shows the states and their transitions:</p><img src="/2018/03/20/A-step-by-step-approach-to-raft-consensus-algorithm/server-states.png" class=""><h4 id="Terms">Terms</h4><p>Raft divides time into terms of arbitrary length. Terms are numbered with consecutive integers.<br>Each term begins with an election, in which one or more candidates attempt to become leader. If<br>a candidate wins the election, then it serves as leader for the rest of the term. In some<br>situations an election will result in a split vote. In this case the term will end with no leader;<br>a new term (with a new election) will begin shortly. Raft ensures that there is at most one leader<br>in a given term.</p><h4 id="Logs">Logs</h4><p>Logs are composed of entries, which are numbered sequentially as index. Each entry contains the<br>term in which it was created and a command for the state machine. Raft determines which of two<br>logs is more up-to-date by comparing the index and term of the last entries in the logs. If the<br>logs have last entries with different terms, then the log with the later term is more up-to-date.<br>If the logs end with the same term, then whichever log is longer is more up-to-date.</p><h3 id="Leader-election">Leader election</h3><p>Raft uses a heartbeat mechanism to trigger leader election. When servers start up, they begin as<br>followers. A server remains in follower state as long as it receives valid RPCs from a leader or<br>candidate. Leaders send periodic heartbeats to all followers in order to maintain their authority.<br>If a follower receives no communication over a period of time called the election timeout, then it<br>assumes there is no viable leader and begins an election to choose a new leader.</p><p>To begin an election, a follower increments its current term and transitions to candidate state. It<br>then votes for itself and issues RequestVote RPCs in parallel to each of the other servers in the<br>cluster. A candidate continues in this state until one of three things happens:</p><ul><li><p>It wins the election.</p><p>A candidate wins an election if it receives votes from a majority of the servers in the full<br>cluster for the same term. Each server will vote for at most one candidate in a given term, on<br>a first-come-first-served basis with restriction: the voter denies its vote if its own log is<br>more up-to-date than that of the candidate. The majority rule ensures that at most one candidate<br>can win the election for a particular term. Once a candidate wins an election, it becomes leader.<br>It then sends heartbeat messages to all of the other servers to establish its authority and<br>prevent new elections.</p></li><li><p>Another server establishes itself as leader,</p><p>While waiting for votes, a candidate may receive an AppendEntries RPC from another server<br>claiming to be leader. If the leader’s term (included in its RPC) is at least as large as the<br>candidate’s current term, then the candidate recognizes the leader as legitimate and returns<br>to follower state. If the term in the RPC is smaller than the candidate’s current term, then<br>the candidate rejects the RPC and continues in candidate state.</p></li><li><p>Another election timeout goes by with no winner.</p><p>If many followers become candidates at the same time, votes could be split so that no candidate<br>obtains a majority. When this happens, each candidate will time out and start a new election by<br>incrementing its term and initiating another round of RequestVote RPCs. Raft uses randomized<br>election timeouts to ensure that split votes are rare and that they are resolved quickly. To<br>prevent split votes in the first place, election timeouts are chosen randomly from a fixed<br>interval (e.g., 150–300 ms). This spreads out the servers so that in most cases only a single<br>server will time out; it wins the election and sends heartbeats before any other servers time out.<br>The same mechanism is used to handle split votes. Each candidate restarts its randomized election<br>timeout at the start of an election, and it waits for that timeout to elapse before starting the<br>next election; this reduces the likelihood of another split vote in the new election.</p></li></ul><h3 id="Log-replication">Log replication</h3><p>Once a leader has been elected, it begins servicing client requests. Each client request contains a<br>command to be executed by the replicated state machine. The leader appends the command to its log as<br>a new entry, then issues AppendEntries RPCs in parallel to each of the other servers to replicate the<br>entry. When the entry has been safely replicated, the leader applies the entry to its state machine and<br>returns the result of that execution to the client. If followers crash or run slowly, or if network packets<br>are lost, the leader retries AppendEntries RPCs indefinitely (even after it has responded to the client)<br>until all followers eventually store all log entries.</p><p>The leader decides when it is safe to apply a log entry to the state machines; such an entry is<br>called committed. <strong>A log entry is committed once the leader that created the entry has replicated<br>it on a majority of the servers.</strong> This also commits all preceding entries in the leader’s log,<br>including entries created by previous leaders. The leader keeps track of the highest index it knows<br>to be committed, and it includes that index in future AppendEntries RPCs (including heartbeats) so<br>that the other servers eventually find out. Once a follower learns that a log entry is committed, it<br>applies the entry to its local state machine (in log order).</p><p>Raft log mechanism was designed to maintain a high level of coherency between the logs on different<br>servers. It maintains the following properties, which together constitute the Log Matching Property:</p><ol><li><p>If two entries in different logs have the same index and term, then they store the same command.</p><p>This property follows from the fact that a leader creates at most one entry with a given log index<br>in a given term, and log entries never change their position in the log. New leader is elected with<br>a larger term than previous leaders.</p></li><li><p>If two entries in different logs have the same index and term, then the logs are identical in all preceding entries.</p><p>This property is guaranteed by a consistency check performed by AppendEntries. When sending an<br>AppendEntries RPC, the leader includes the index and term of the entry in its log that immediately<br>precedes the new entries. If the follower does not find an entry in its log with the same index<br>and term, then it refuses the new entries. The consistency check acts as an induction step: the<br>initial empty state of the logs satisfies the Log Matching Property, and the consistency check<br>preserves the Log Matching Property whenever logs are extended. As a result, whenever AppendEntries<br>returns successfully, the leader knows that the follower’s log is identical to its own log up through<br>the new entries.</p></li></ol><p>During normal operation, the logs of the leader and followers stay consistent, so the AppendEntries<br>consistency check never fails. However, leader crashes can leave the logs inconsistent (the old leader<br>may not have fully replicated all of the entries in its log). These inconsistencies can compound over<br>a series of leader and follower crashes. A follower may be missing entries that are present on the leader,<br>it may have extra entries that are not present on the leader, or both. Missing and extraneous entries<br>in a log may span multiple terms.</p><p>In Raft, the leader handles inconsistencies by forcing the followers’ logs to duplicate its own.<br>This means that conflicting entries in follower logs will be overwritten with entries from the<br>leader’s log. To bring a follower’s log into consistency with its own, the leader must find the<br>latest log entry where the two logs agree, delete any entries in the follower’s log after that<br>point, and send the follower all of the leader’s entries after that point. All of these actions<br>happen in response to the consistency check performed by AppendEntries RPCs. The leader maintains<br>a nextIndex for each follower, which is the index of the next log entry the leader will send to<br>that follower. When a leader first comes to power, it initializes all nextIndex values to the index<br>just after the last one in ts log. If a follower’s log is inconsistent with the leader’s, the<br>AppendEntries consistency check will fail in the next AppendEntries RPC. After a rejection, the leader<br>decrements the follower’s nextIndex and retries the AppendEntries RPC. Eventually the nextIndex will<br>reach a point where the leader and follower logs match. When this happens, AppendEntries will succeed,<br>which removes any conflicting entries in the follower’s log and appends entries from the leader’s log (if any).<br>Once AppendEntries succeeds, the follower’s log is consistent with the leader’s, and it will remain<br>that way for the rest of the term.</p><h2 id="Safety">Safety</h2><p>Raft guarantees that each of these properties is true at all times:</p><ul><li><p>Election Safety: At most one leader can be elected in a given term.</p><p>Each server will vote for at most on candidate in a given term, and a candidate must win votes<br>from majority of the cluster to be elected as leader.</p></li><li><p>Leader Append-Only: A leader never overwrites or deletes entries in its log; it only appends new entries.</p></li><li><p>Log Matching Property: If two logs contain an entry with the same index and term, then the logs<br>are identical in all entries up through the given index.</p></li><li><p>Leader Completeness Property: If a log entry is committed in a given term, then that entry will<br>be present in the logs of the leaders for all higher-numbered terms.</p><p>A log entry is committed once the leader that created the entry has replicated it on a majority<br>of the servers (at least <code>N+1</code>). New leader elected afterward wins votes from majority (at least <code>N+1</code>)<br>servers. From inequation <code>(N+1) + (N+1) = 2*N + 2 &gt; 2*N + 1</code>, we knows that at least one server<br>from later majority contains that committed log entry. With up-to-date election restriction, we can<br>conclude that the new leader has that committed log entry.</p></li><li><p>State Machine Safety: If a server has applied a log entry at a given index to its state machine,<br>no other server will ever apply a different log entry for the same index.</p><p>At the time a server applies a log entry to its state machine, its log must be identical to the<br>leader’s log up through that entry, and the entry must be committed. Consider the lowest term<br>in which any server applies a given log index; the Leader Completeness Property guarantees that<br>the leaders for all higher terms will store that same log entry, so servers that apply the index<br>in later terms will apply the same value. Thus, the State Machine Safety Property holds.</p></li><li><p>Raft requires servers to apply entries in log index order.</p><p>Combined with the State Machine Safety Property, this means that all servers will apply exactly<br>the same set of log entries to their state machines, in the same order.</p></li></ul><p><strong>Raft guarantees that committed entries are durable and will eventually be executed by all of the available state machines.</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;This is my second time to read through &lt;a href=&quot;https://raft.github.io/&quot;&gt;Raft&lt;/a&gt; &lt;a href=&quot;https://purl.stanford.edu/qr033xr6097&quot;&gt;Algorithm&lt;/a&gt;, and it is hard to&lt;br&gt;
recall what I have learned in first reading. This time I decide to record my thoughts for future&lt;br&gt;
recall. Hope it is useful to newbies in distributed systems like me.&lt;/p&gt;
&lt;h2 id=&quot;What-does-consensus-algorithm-mean&quot;&gt;What does consensus algorithm mean ?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Consensus algorithm is the process used to achieve agreement on shared state among &lt;a href=&quot;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&quot;&gt;faulty&lt;br&gt;
processes&lt;/a&gt; in distributed system.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Introduce-Replicated-State-Machines&quot;&gt;Introduce Replicated State Machines&lt;/h2&gt;
&lt;p&gt;Here, we define state machine as &lt;code&gt;State&#39; = Machine(State, Input)&lt;/code&gt; for simplicity. A state machine&lt;br&gt;
can be defined with its start state, and makes progress with sequence of inputs, produces sequence&lt;br&gt;
of intermediate states. For examples:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;State&amp;#x27; = Machine(State, Input)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;State&amp;#x27;&amp;#x27; = Machine(State&amp;#x27;, Input&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;State&amp;#x27;&amp;#x27;&amp;#x27; = Machine(State&amp;#x27;&amp;#x27;, Input&amp;#x27;&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Given a state machine, how can we figure out that it is a replicated state machine ?&lt;/p&gt;
&lt;p&gt;First, &lt;strong&gt;replicated state machine is deterministic&lt;/strong&gt;. Given same start state with same sequence of&lt;br&gt;
inputs, the state machine always produce same intermediate states.&lt;/p&gt;
&lt;p&gt;Second, two state machines built from same logic on possibly different processes or nodes and&lt;br&gt;
even possibly different languages must be same. Here we define two state machines as same based&lt;br&gt;
on deterministic: given same start state and same sequence of inputs, if two state machines&lt;br&gt;
produce same sequence of intermediate states, we say these two state machine are same. Thus given&lt;br&gt;
multiple copies of same state machines with same start state, feeding with same sequence of inputs,&lt;br&gt;
they must produces same sequence of intermediate states.&lt;/p&gt;
&lt;p&gt;Third, states, including start state and intermediate states, and inputs must be self-contained,&lt;br&gt;
thus can be replicated to other processes or nodes with help of serialization and deserialization.&lt;/p&gt;</summary>
    
    
    
    
    <category term="raft" scheme="http://blog.kezhuw.name/tags/raft/"/>
    
    <category term="consensus" scheme="http://blog.kezhuw.name/tags/consensus/"/>
    
    <category term="Distributed Systems" scheme="http://blog.kezhuw.name/tags/Distributed-Systems/"/>
    
  </entry>
  
  <entry>
    <title>AspectJ Load-Time Weaving for Spring</title>
    <link href="http://blog.kezhuw.name/2017/08/31/spring-aspectj-load-time-weaving/"/>
    <id>http://blog.kezhuw.name/2017/08/31/spring-aspectj-load-time-weaving/</id>
    <published>2017-08-31T05:24:09.000Z</published>
    <updated>2017-08-31T10:55:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html">Spring AOP</a> is proxy-based, using either <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html">JDK dynamic proxy</a> or <a href="https://github.com/cglib/cglib">CGLIB</a>. Spring’s <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html">Cache Abstraction</a>, <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/transaction.html">Transaction Management</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-annotation-support">Asynchronous Execution</a> are all built upon AOP proxies.</p><p>However proxy can intercept only external method calls. Which means that self-invocation, in effect, a method within the target object calling another method of the target object, will not lead to an actual interception at runtime.</p><p>Thus, the following code will not function correctly.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> Class SomeServiceImpl <span class="keyword">implements</span> <span class="title class_">SomeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;SomeCache&quot;, key = &quot;#kind + &#x27;#&#x27; + #id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">methodBase</span><span class="params">(String kind, String id)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">methodA</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> methodBase(<span class="string">&quot;a&quot;</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">methodB</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> methodBase(<span class="string">&quot;b&quot;</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AspectJ-Load-Time-Weaving">AspectJ Load-Time Weaving</h2><p>Spring provides a library named <code>spring-aspects</code> and <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AdviceMode.html"><code>AdviceMode.ASPECTJ</code></a> which can be used as value of <code>mode</code> filed for <code>@EnableCaching</code>, <code>@EnableTransactionManagement</code> and <code>@EnableAsync</code> annotations to support AspectJ load-time weaving. But that is not enough, AspectJ load-time weaver is required to weave aspect for target class.</p><p>AspectJ Load-Time Weaver weave target class by transforming class file bytecode using a <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/ClassFileTransformer.html"><code>ClassFileTransformer</code></a> named <a href="http://git.eclipse.org/c/aspectj/org.aspectj.git/tree/loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java"><code>ClassPreProcessorAgentAdapter</code></a> from <code>aspectjweaver.jar</code>. This transformation can be performed either at JVM level through <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html"><code>Instrumentation</code></a> interface or at per <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html"><code>ClassLoader</code></a> level. A method with signature similar to <code>void addTransformer(ClassFileTransformer transformer)</code> is required to apply the transformation in class loading phase, <code>Instrumentation</code> support this method natively, while not all class loaders support this.</p><h3 id="Custom-class-loader-to-apply-class-file-transformation">Custom class loader to apply class file transformation</h3><p>Spring’s <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/EnableLoadTimeWeaving.html"><code>@EnableLoadTimeWeaving</code></a> creates a bean named <code>loadTimeWeaver</code> to inject a <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/ClassFileTransformer.html"><code>ClassFileTransformer</code></a>, which is capable to weave target class with desired apsect, to bean class loader. Unfortunately, <a href="https://github.com/spring-projects/spring-boot/issues/739">Spring Boot does not support this approach</a>.</p><p>Due to the fact that <code>loadTimeWeaver</code> is a bean and classloading is happening at bean definition parsing phase which certainly happens before bean creation phase in same application context, thus <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/EnableLoadTimeWeaving.html"><code>@EnableLoadTimeWeaving</code></a> should be enabled in a application context which is a ancestor of the application context where target class located in.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initializer.java</span></span><br><span class="line"><span class="keyword">package</span> application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> application.ApplicationConfig;</span><br><span class="line"><span class="keyword">import</span> application.web.WebConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Initializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;ApplicationConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ApplicationConfig.java</span></span><br><span class="line"><span class="keyword">package</span> application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableLoadTimeWeaving;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableLoadTimeWeaving(aspectjWeaving = EnableLoadTimeWeaving.AspectJWeaving.ENABLED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// WebConfig</span></span><br><span class="line"><span class="keyword">package</span> application.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CachingConfiguration.java</span></span><br><span class="line"><span class="keyword">package</span> application.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.concurrent.ConcurrentMapCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AdviceMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching(mode = AdviceMode.ASPECTJ)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachingConfiguration</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcurrentMapCacheManager</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// build.gradle</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">&#x27;io.spring.dependency-management&#x27;</span></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">&#x27;io.spring.platform:platform-bom:Brussels-SR4&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">&#x27;java&#x27;</span></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">&#x27;war&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&quot;javax.servlet:javax.servlet-api&quot;</span></span><br><span class="line"></span><br><span class="line">    compile <span class="string">&#x27;ch.qos.logback:logback-core&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;ch.qos.logback:logback-classic&#x27;</span></span><br><span class="line"></span><br><span class="line">    compile <span class="string">&#x27;org.aspectj:aspectjweaver&#x27;</span></span><br><span class="line"></span><br><span class="line">    compile <span class="string">&quot;org.springframework:spring-web&quot;</span></span><br><span class="line">    compile <span class="string">&quot;org.springframework:spring-webmvc&quot;</span></span><br><span class="line">    compile <span class="string">&quot;org.springframework:spring-aspects&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This way, bean methods annotated with <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html#cache-annotations"><code>@Cacheable</code></a> in package <code>application.web.**</code> are weaved with the aspect <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/EnableCaching.html"><code>@EnableCaching(mode = AdviceMode.ASPECTJ)</code></a> introduced from library <code>spring-aspects</code>.</p><h3 id="Java-agent-to-apply-class-file-transformation">Java agent to apply class file transformation</h3><p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html"><code>Instrumentation</code></a> has a method <code>void addTransformer(ClassFileTransformer transformer)</code> which can be used to apply ApectJ’s class file transformer. There are two existing java libraries, <code>aspectjweaver</code> and <code>spring-instrument</code>, provide agents to obtain instance of <code>Instrumentation</code>.</p><h4 id="AspectJ-java-agent-to-apply-class-file-transformation">AspectJ java agent to apply class file transformation</h4><p>You start JVM with <code>-javaagent:/path/aspectweaver-1.8.10.jar</code>, then the AspectJ load-time weaver use <code>META-INF/aop.xml</code> files located on classpath to weaving aspect to target classes. You don’t need <code>@EnableLoadTimeWeaving</code> here.</p><h4 id="Spring-java-agent-to-obtain-Instrumentation-instance-for-transformation">Spring java agent to obtain <code>Instrumentation</code> instance for transformation</h4><p>Differ from <code>aspectjweaver</code>, agent provided by <code>spring-instrument</code> does not apply AspectJ load-time weaving by itself, it only obtain a <code>Instrumentation</code>. <code>loadTimeWeaver</code> initiated by <code>@EnableLoadTimeWeaving</code> can use this <code>Instrumentation</code> instance to apply class file transformation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ApplicationConfig.java</span></span><br><span class="line"><span class="keyword">package</span> application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableLoadTimeWeaving;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableLoadTimeWeaving(aspectjWeaving = EnableLoadTimeWeaving.AspectJWeaving.AUTODETECT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WebApplication.java</span></span><br><span class="line"><span class="keyword">package</span> application.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> application.ApplicationConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SpringApplicationBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(WebApplication.class);</span><br><span class="line">        builder.parent(ApplicationConfig.class);</span><br><span class="line">        builder.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// build.gradle</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&quot;https://plugins.gradle.org/m2/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;org.springframework.boot:spring-boot-gradle-plugin:1.5.6.RELEASE&#x27;</span></span><br><span class="line">        classpath <span class="string">&#x27;io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">&#x27;org.springframework.boot&#x27;</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;org.aspectj:aspectjweaver&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;org.springframework:spring-aspects&#x27;</span></span><br><span class="line"></span><br><span class="line">    compile <span class="string">&#x27;org.springframework.boot:spring-boot-devtools&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;org.springframework.boot:spring-boot-starter-tomcat&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;org.springframework.boot:spring-boot-starter-actuator&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SEE ALSO:</p><ul><li><a href="https://www.credera.com/blog/technology-insights/open-source-technology-insights/aspect-oriented-programming-in-spring-boot-part-3-setting-up-aspectj-load-time-weaving/">Aspect-Oriented Programming in Spring Boot Part 3: Setting up AspectJ Load-Time Weaving</a></li><li><a href="http://www.eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html">AspectJ Load-Time Weaving Configuration</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html&quot;&gt;Spring AOP&lt;/a&gt; is proxy-based, using either &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html&quot;&gt;JDK dynamic proxy&lt;/a&gt; or &lt;a href=&quot;https://github.com/cglib/cglib&quot;&gt;CGLIB&lt;/a&gt;. Spring’s &lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html&quot;&gt;Cache Abstraction&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/html/transaction.html&quot;&gt;Transaction Management&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-annotation-support&quot;&gt;Asynchronous Execution&lt;/a&gt; are all built upon AOP proxies.&lt;/p&gt;
&lt;p&gt;However proxy can intercept only external method calls. Which means that self-invocation, in effect, a method within the target object calling another method of the target object, will not lead to an actual interception at runtime.&lt;/p&gt;
&lt;p&gt;Thus, the following code will not function correctly.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Class SomeServiceImpl &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Cacheable(value = &amp;quot;SomeCache&amp;quot;, key = &amp;quot;#kind + &amp;#x27;#&amp;#x27; + #id&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Object &lt;span class=&quot;title function_&quot;&gt;methodBase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String kind, String id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title function_&quot;&gt;methodA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; methodBase(&lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title function_&quot;&gt;methodB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; methodBase(&lt;span class=&quot;string&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;AspectJ-Load-Time-Weaving&quot;&gt;AspectJ Load-Time Weaving&lt;/h2&gt;
&lt;p&gt;Spring provides a library named &lt;code&gt;spring-aspects&lt;/code&gt; and &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AdviceMode.html&quot;&gt;&lt;code&gt;AdviceMode.ASPECTJ&lt;/code&gt;&lt;/a&gt; which can be used as value of &lt;code&gt;mode&lt;/code&gt; filed for &lt;code&gt;@EnableCaching&lt;/code&gt;, &lt;code&gt;@EnableTransactionManagement&lt;/code&gt; and &lt;code&gt;@EnableAsync&lt;/code&gt; annotations to support AspectJ load-time weaving. But that is not enough, AspectJ load-time weaver is required to weave aspect for target class.&lt;/p&gt;
&lt;p&gt;AspectJ Load-Time Weaver weave target class by transforming class file bytecode using a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/ClassFileTransformer.html&quot;&gt;&lt;code&gt;ClassFileTransformer&lt;/code&gt;&lt;/a&gt; named &lt;a href=&quot;http://git.eclipse.org/c/aspectj/org.aspectj.git/tree/loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java&quot;&gt;&lt;code&gt;ClassPreProcessorAgentAdapter&lt;/code&gt;&lt;/a&gt; from &lt;code&gt;aspectjweaver.jar&lt;/code&gt;. This transformation can be performed either at JVM level through &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html&quot;&gt;&lt;code&gt;Instrumentation&lt;/code&gt;&lt;/a&gt; interface or at per &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html&quot;&gt;&lt;code&gt;ClassLoader&lt;/code&gt;&lt;/a&gt; level. A method with signature similar to &lt;code&gt;void addTransformer(ClassFileTransformer transformer)&lt;/code&gt; is required to apply the transformation in class loading phase, &lt;code&gt;Instrumentation&lt;/code&gt; support this method natively, while not all class loaders support this.&lt;/p&gt;
&lt;h3 id=&quot;Custom-class-loader-to-apply-class-file-transformation&quot;&gt;Custom class loader to apply class file transformation&lt;/h3&gt;
&lt;p&gt;Spring’s &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/EnableLoadTimeWeaving.html&quot;&gt;&lt;code&gt;@EnableLoadTimeWeaving&lt;/code&gt;&lt;/a&gt; creates a bean named &lt;code&gt;loadTimeWeaver&lt;/code&gt; to inject a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/ClassFileTransformer.html&quot;&gt;&lt;code&gt;ClassFileTransformer&lt;/code&gt;&lt;/a&gt;, which is capable to weave target class with desired apsect, to bean class loader. Unfortunately, &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues/739&quot;&gt;Spring Boot does not support this approach&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Due to the fact that &lt;code&gt;loadTimeWeaver&lt;/code&gt; is a bean and classloading is happening at bean definition parsing phase which certainly happens before bean creation phase in same application context, thus &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/EnableLoadTimeWeaving.html&quot;&gt;&lt;code&gt;@EnableLoadTimeWeaving&lt;/code&gt;&lt;/a&gt; should be enabled in a application context which is a ancestor of the application context where target class located in.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://blog.kezhuw.name/tags/Java/"/>
    
    <category term="Spring" scheme="http://blog.kezhuw.name/tags/Spring/"/>
    
    <category term="Spring Boot" scheme="http://blog.kezhuw.name/tags/Spring-Boot/"/>
    
    <category term="AspectJ" scheme="http://blog.kezhuw.name/tags/AspectJ/"/>
    
    <category term="aop" scheme="http://blog.kezhuw.name/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>Spring Profile</title>
    <link href="http://blog.kezhuw.name/2017/04/08/spring-profile/"/>
    <id>http://blog.kezhuw.name/2017/04/08/spring-profile/</id>
    <published>2017-04-08T06:06:40.000Z</published>
    <updated>2018-03-20T16:03:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Spring profile allows conditional registration of beans/components in runtime based on constants specified declaratively in configuration or programmatically in code.</strong> Let see some use cases.</p><h2 id="Activate-Component-based-on-active-profile">Activate @Component based on active profile</h2><p>Suppose we have a service interface called <code>SomeService</code> which has a method called <code>doSomething</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In SomeService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SomeService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SomeService</code> should only do real work in production environment and trivials in others. We can do this way:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In SomeServiceImpl.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Profile(&quot;production&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SomeService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Do real work ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Profile(&quot;!production&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoOpSomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SomeService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Do trivial things ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, based on whether <code>production</code> profile is declared or not, <code>SomeServiceImpl</code> or <code>NoOpSomeServiceImpl</code> will serve requests as <code>SomeService</code>.</p><h2 id="Register-Bean-based-on-active-profile">Register @Bean based on active profile</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&#123;&quot;dev&quot;, &quot;!featureA&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> CustomBean <span class="title function_">customBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// instantiate, configure and return bean ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A bean with type <code>CustomBean</code> will be registered if profile <code>dev</code> is active or <code>featureA</code> is not active.</p><h2 id="Testing-accepted-profiles-through-Spring-Environment">Testing accepted profiles through Spring Environment</h2><p>Sometimes, it is considered be too heavy to switch whole bean/component based on active profile. We can use spring environment to test accepted profile.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In SomeServiceImpl.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Profile(&quot;production&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SomeService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (environment.acceptsProfiles(<span class="string">&quot;featureA&quot;</span>, <span class="string">&quot;!featureB&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// Do things when featureA is active or featureB is not active.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Do other work ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you are using Thymeleaf, you can do this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;@environment.acceptsProfiles(&#x27;dev&#x27;)&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//unpkg.com/vue@2.2.6/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;@environment.acceptsProfiles(&#x27;!dev&#x27;)&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//unpkg.com/vue@2.2.6/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now, we knows how to use profile, let dig how to declare it.</p><h2 id="Declare-Spring-profile-in-configuration-file">Declare Spring profile in configuration file</h2><p>In Spring Boot, you can declare profiles in <code>application.properties</code> or <code>application.yml</code>:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span> = <span class="string">dev,featureA</span></span><br></pre></td></tr></table></figure><p>If you declare profiles this way, profiles specified outside application jar will override profiles inside application jar. If you want to declare a profile which can’t be overrode, use <code>spring.profiles.include</code>.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">//</span> <span class="string">application.properties inside projectA&#x27;s jar</span></span><br><span class="line"><span class="attr">spring.profiles.include</span> = <span class="string">projectA</span></span><br></pre></td></tr></table></figure><p><code>application.properties</code> is just one of places to specify spring configuration, you can delcare profiles in other places according to <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config">Spring Boot Externalized Configuration</a>. Such as:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># os environment</span></span><br><span class="line">SPRING_PROFILES_ACTIVE=featureB java -jar project.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># system properties</span></span><br><span class="line">java -Dspring.profiles.active=featureB -jar project.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># command line arguments</span></span><br><span class="line">java -jar project.jar --spring.profiles.active=featureB</span><br></pre></td></tr></table></figure><h2 id="Specify-profiles-programmatically">Specify profiles programmatically</h2><p>In application level, you can add profiles using <code>SpringApplication.setAdditinalProfiles</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">SpringApplication</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(SomeApplication.class);</span><br><span class="line">      app.setAdditinalProfiles(<span class="string">&quot;someApplication&quot;</span>)</span><br><span class="line">      app.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In library level, you can add/set profiles through <code>ConfigurableEnvironment</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeatureConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextInitializer</span>&lt;ConfigurableApplicationContext&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> context.getEnvironment();</span><br><span class="line">        environment.addActiveProfile(<span class="string">&quot;featureB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// In library&#x27;s META-INF/spring.factories</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">path.to.library.package.FeatureConfig</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Spring profile allows conditional registration of beans/components in runtime based on constants specified declaratively in configuration or programmatically in code.&lt;/strong&gt; Let see some use cases.&lt;/p&gt;
&lt;h2 id=&quot;Activate-Component-based-on-active-profile&quot;&gt;Activate @Component based on active profile&lt;/h2&gt;
&lt;p&gt;Suppose we have a service interface called &lt;code&gt;SomeService&lt;/code&gt; which has a method called &lt;code&gt;doSomething&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// In SomeService.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;SomeService&lt;/code&gt; should only do real work in production environment and trivials in others. We can do this way:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// In SomeServiceImpl.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Profile(&amp;quot;production&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SomeServiceImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Do real work ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Profile(&amp;quot;!production&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;NoOpSomeServiceImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SomeService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Do trivial things ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now, based on whether &lt;code&gt;production&lt;/code&gt; profile is declared or not, &lt;code&gt;SomeServiceImpl&lt;/code&gt; or &lt;code&gt;NoOpSomeServiceImpl&lt;/code&gt; will serve requests as &lt;code&gt;SomeService&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Register-Bean-based-on-active-profile&quot;&gt;Register @Bean based on active profile&lt;/h2&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;WebConfiguration&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Profile(&amp;#123;&amp;quot;dev&amp;quot;, &amp;quot;!featureA&amp;quot;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; CustomBean &lt;span class=&quot;title function_&quot;&gt;customBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// instantiate, configure and return bean ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://blog.kezhuw.name/tags/Java/"/>
    
    <category term="Spring" scheme="http://blog.kezhuw.name/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t use context path in web application behind reverse proxy</title>
    <link href="http://blog.kezhuw.name/2016/08/20/Don-t-use-context-path-in-web-application-behind-reverse-proxy/"/>
    <id>http://blog.kezhuw.name/2016/08/20/Don-t-use-context-path-in-web-application-behind-reverse-proxy/</id>
    <published>2016-08-20T14:24:05.000Z</published>
    <updated>2016-08-20T23:32:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I and my colleague build a small web project together using <a href="https://spring.io/">Spring</a>.<br>We use a context path other than “/”, say, “/abc” which is the project name.<br>This setting is consistent with existing projects in my team.</p><p>But after we deploy this project behind nginx, we encounter problem. In nginx, we<br>config something like this:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:5000/abc/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It works fine for handwritten url from client. But the url links in the response html,<br>which is generated by this application and points to resources inside this application,<br>does not work. <em>All url forwarded by nginx will be prefixed with “/abc”, which is the<br>context path of this application in web container.</em> While the application generated url<br>links have that prefix already. This results in wrong url links for those resources.</p><p>There are workarounds to solve this, though, but after investigation and thinking, I<br>concludes to:</p><p><strong>If you use reverse proxy to forward HTTP request, then don’t use context path in your<br>application, instead let reverse proxy set context path for you.</strong></p><p>First, if you use context path other than “/” in your application and you want your application<br>visited via top domain without subpath, then you must hardcode that context path in reverse<br>proxy. The same information is hardcoded in two places, your application and the reverse proxy.</p><p>Second, if you use context path “/” in your application and you want your application visited via<br>subpath, reverse proxy such as nginx can set <code>X-Forwarded-Prefix</code> for your application to generate<br>url links prefixed with that subpath. If the framework backing your application respect this header,<br>you probably don’t notice that.</p><p>The underlying cause behind this conclusion is that both web application and reverse proxy are<br>passive. They accept request, handle it, response it. The solution comes from the fact that reverse<br>proxy stand before web application so that it can add extra informations for web application to handle<br>in programming approach without the need to handcode such informations.</p><p>Links:<br><a href="http://stackoverflow.com/questions/10429487/context-path-for-tomcat-web-application-fronted-with-nginx-as-reverse-proxy">http://stackoverflow.com/questions/10429487/context-path-for-tomcat-web-application-fronted-with-nginx-as-reverse-proxy</a><br><a href="http://stackoverflow.com/questions/19866203/nginx-configuration-to-pass-site-directly-to-tomcat-webapp-with-context">http://stackoverflow.com/questions/19866203/nginx-configuration-to-pass-site-directly-to-tomcat-webapp-with-context</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I and my colleague build a small web project together using &lt;a href=&quot;https://spring.io/&quot;&gt;Spring&lt;/a&gt;.&lt;br&gt;
We use a context path other than “/”, say, “/abc” which is the project name.&lt;br&gt;
This setting is consistent with existing projects in my team.&lt;/p&gt;
&lt;p&gt;But after we deploy this project behind nginx, we encounter problem. In nginx, we&lt;br&gt;
config something like this:&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;location&lt;/span&gt; / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;proxy_pass&lt;/span&gt; http://127.0.0.1:5000/abc/;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It works fine for handwritten url from client. But the url links in the response html,&lt;br&gt;
which is generated by this application and points to resources inside this application,&lt;br&gt;
does not work. &lt;em&gt;All url forwarded by nginx will be prefixed with “/abc”, which is the&lt;br&gt;
context path of this application in web container.&lt;/em&gt; While the application generated url&lt;br&gt;
links have that prefix already. This results in wrong url links for those resources.&lt;/p&gt;
&lt;p&gt;There are workarounds to solve this, though, but after investigation and thinking, I&lt;br&gt;
concludes to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you use reverse proxy to forward HTTP request, then don’t use context path in your&lt;br&gt;
application, instead let reverse proxy set context path for you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, if you use context path other than “/” in your application and you want your application&lt;br&gt;
visited via top domain without subpath, then you must hardcode that context path in reverse&lt;br&gt;
proxy. The same information is hardcoded in two places, your application and the reverse proxy.&lt;/p&gt;
&lt;p&gt;Second, if you use context path “/” in your application and you want your application visited via&lt;br&gt;
subpath, reverse proxy such as nginx can set &lt;code&gt;X-Forwarded-Prefix&lt;/code&gt; for your application to generate&lt;br&gt;
url links prefixed with that subpath. If the framework backing your application respect this header,&lt;br&gt;
you probably don’t notice that.&lt;/p&gt;
&lt;p&gt;The underlying cause behind this conclusion is that both web application and reverse proxy are&lt;br&gt;
passive. They accept request, handle it, response it. The solution comes from the fact that reverse&lt;br&gt;
proxy stand before web application so that it can add extra informations for web application to handle&lt;br&gt;
in programming approach without the need to handcode such informations.&lt;/p&gt;
&lt;p&gt;Links:&lt;br&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/10429487/context-path-for-tomcat-web-application-fronted-with-nginx-as-reverse-proxy&quot;&gt;http://stackoverflow.com/questions/10429487/context-path-for-tomcat-web-application-fronted-with-nginx-as-reverse-proxy&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/19866203/nginx-configuration-to-pass-site-directly-to-tomcat-webapp-with-context&quot;&gt;http://stackoverflow.com/questions/19866203/nginx-configuration-to-pass-site-directly-to-tomcat-webapp-with-context&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="nginx" scheme="http://blog.kezhuw.name/tags/nginx/"/>
    
    <category term="HTTP" scheme="http://blog.kezhuw.name/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Invariants in LevelDB algorithm</title>
    <link href="http://blog.kezhuw.name/2016/06/14/invariants-in-leveldb-algorithm/"/>
    <id>http://blog.kezhuw.name/2016/06/14/invariants-in-leveldb-algorithm/</id>
    <published>2016-06-14T10:13:07.000Z</published>
    <updated>2016-06-14T10:16:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I write a <a href="https://github.com/google/leveldb">LevelDB</a> <a href="https://github.com/kezhuw/leveldb">implementation in Go</a>. In this post, I summarize<br>some invariants in algorithm used by LevelDB implementations.</p><h2 id="Sequence-Number">Sequence Number</h2><p>Sequence number is a monotonically increasing 56 bits integer value. Every<br>time a key is written to LevelDB, it is tagged with a sequence number one<br>larger than sequence number tagged with previous key written to LevelDB.<br><strong>If two entries in LevelDB have same user level keys, the one with larger<br>sequence must shadow the other.</strong></p><h2 id="Sorted-Memory-Tables">Sorted Memory Tables</h2><p>Writes are first recorded in a mutable memory table. If that memory table is<br>full, it is marked as immutable and a new memory table is created to record<br>writes. The memory table marked as immutable is then compacted to a sorted<br>disk table in level 0 and deleted. Thus we conclude that:</p><p><strong>If a key appears in mutable memory table, it is newest. Otherwise, if it<br>appears in immutable memory table, it is newest.</strong></p><h2 id="Compaction">Compaction</h2><p>When an immutable memory table is compacted to a sorted table in Level 0, it<br>is assigned with a file number larger than all existing file numbers in this<br>Level. Thus we have:</p><p><strong>Entries stored in newer file in Level 0 shadow entries with same user keys<br>in older files.</strong></p><p>When there are too many files in Level 0 or too many data in Level 1 or above,<br>we start level compaction. In level N compaction, we select a file set from<br>level N, such that no remaining files overlap this file set in user key level.<br>Then we compact this file set with all overlapping files from level N+1, and<br>produce sorted tables in level N+1. Thus we conclude to two invariants.</p><p><strong>No files in level 1 or above overlap other files in the same level.</strong></p><p><strong>Entries stored in level N shadow entries with same user keys above level N.</strong></p><h2 id="Snapshot">Snapshot</h2><p>Snapshot in LevelDB is represented by a sequence number. When retrieving entries<br>from a snapshot, entries whose sequence number are larger than the snapshot’s<br>are ignored. In compaction, we record the smallest sequence number among alive<br>snapshots, and we never delete keys shadowed only by entry with sequence number<br>larger that this smallest sequence number. After enforcing these restrictions<br>on retrieve and compaction, we guarantee that:</p><p><strong>The state a snapshot captured is frozen in its creation time.</strong></p><h2 id="Get">Get</h2><p>According to invariants we guarantee, we first search mutable memory table,<br>then immutable memory table, then sorted tables in level 0 from newest to<br>oldest, then sorted tables in level 1 and above. If we find a write for the<br>key, we can return the result to caller without further searching.</p><h2 id="Iteration">Iteration</h2><p>Entries in memory tables and disk level tables may overlap each other. But<br>files in level 1 and above have no overlapping files in same level. So we<br>concatenate files in level N to form level iterator for level N. Then we<br>merge those iterators with iterators from memory tables, level 0 tables to<br>construct iterator over a whole LevelDB database. In iteration, we filter<br>out entries shadowed by larger sequence number.</p><h2 id="Optimizations">Optimizations</h2><p>Implementations can make their private optimizations without break those<br>invariants. One such optimization in offical C++ implementation is that<br>immutable memory table can be compacted to level 1 or above if it is not<br>overlapping with younger level. Aggressive optimization, for example,<br>concurrent compaction is also possible.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I write a &lt;a href=&quot;https://github.com/google/leveldb&quot;&gt;LevelDB&lt;/a&gt; &lt;a href=&quot;https://github.com/kezhuw/leveldb&quot;&gt;implementation in Go&lt;/a&gt;. In this post, I summarize&lt;br&gt;
some invariants in algorithm used by LevelDB implementations.&lt;/p&gt;
&lt;h2 id=&quot;Sequence-Number&quot;&gt;Sequence Number&lt;/h2&gt;
&lt;p&gt;Sequence number is a monotonically increasing 56 bits integer value. Every&lt;br&gt;
time a key is written to LevelDB, it is tagged with a sequence number one&lt;br&gt;
larger than sequence number tagged with previous key written to LevelDB.&lt;br&gt;
&lt;strong&gt;If two entries in LevelDB have same user level keys, the one with larger&lt;br&gt;
sequence must shadow the other.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Sorted-Memory-Tables&quot;&gt;Sorted Memory Tables&lt;/h2&gt;
&lt;p&gt;Writes are first recorded in a mutable memory table. If that memory table is&lt;br&gt;
full, it is marked as immutable and a new memory table is created to record&lt;br&gt;
writes. The memory table marked as immutable is then compacted to a sorted&lt;br&gt;
disk table in level 0 and deleted. Thus we conclude that:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If a key appears in mutable memory table, it is newest. Otherwise, if it&lt;br&gt;
appears in immutable memory table, it is newest.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Compaction&quot;&gt;Compaction&lt;/h2&gt;
&lt;p&gt;When an immutable memory table is compacted to a sorted table in Level 0, it&lt;br&gt;
is assigned with a file number larger than all existing file numbers in this&lt;br&gt;
Level. Thus we have:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Entries stored in newer file in Level 0 shadow entries with same user keys&lt;br&gt;
in older files.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When there are too many files in Level 0 or too many data in Level 1 or above,&lt;br&gt;
we start level compaction. In level N compaction, we select a file set from&lt;br&gt;
level N, such that no remaining files overlap this file set in user key level.&lt;br&gt;
Then we compact this file set with all overlapping files from level N+1, and&lt;br&gt;
produce sorted tables in level N+1. Thus we conclude to two invariants.&lt;/p&gt;</summary>
    
    
    
    
    <category term="LevelDB" scheme="http://blog.kezhuw.name/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>基于确定性状态机的小战场同步方案</title>
    <link href="http://blog.kezhuw.name/2016/02/25/deterministic-state-machine-based-moba-battleground-synchronization/"/>
    <id>http://blog.kezhuw.name/2016/02/25/deterministic-state-machine-based-moba-battleground-synchronization/</id>
    <published>2016-02-24T22:44:44.000Z</published>
    <updated>2016-02-24T22:44:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="战场状态">战场状态</h2><p><strong>战场状态 ＝ 所有实体的状态之和</strong></p><p>这里的实体包括但不限于玩家、AI 、子弹和商店。</p><h2 id="时间">时间</h2><p>每隔单位时间，在上一时刻战场状态的基础上，计算所有该时间单位发起的操作或接收的状态改变。同时时间也作为输入，驱动实体的持续性动作。<br>这里的单位时间可以是 10ms 这样的间隔。</p><h2 id="计算">计算</h2><p>任意时刻，玩家在客户端的操作在发送给服务器端的同时，也将在本地的下一次计算时，作用于状态的本地副本。在收到服务器端的回应之后，<br>与这期间收到的所有回应及其他操作在之前保存的战场状态上重新计算，客户端需要对上一时刻计算的副本进行修正。例如：</p><ol><li>假设，Ti 时刻，本地状态和服务器状态一致，为 Si 。</li><li>Ti+1 时刻，发起操作 Ai+1; 本地计算该操作，得到本地状态 LSi+1 。</li><li>Ti+4 时刻，收到服务器其他玩家的操作 SBi+4 ；本地计算该操作，得到本地状态 LSi+4。</li><li>Ti+8 时刻，发起操作 Ai+8 ；本地计算该操作，得到本地状态 LSi+8。</li><li>…</li><li>Ti+k 时间，收到操作 Ai 的回应 SAi+5；在状态 Si 上计算 SBi+4 ，得到 Si+4；在 Si+4 上计算操作 SAi+5 , 得到 Si+5 ；在新的<br>Si+5 上计算后续的操作，得到新的本地状态 LSi+k-1 ；对比之前的本地状态 LSi+k-1 , 客户端做出修正后，计算该时刻的操作。</li><li>…</li></ol><p>对于某些难以修正的动作，如：死亡，客户端可以做延迟处理，直到服务器给出回应。</p><h2 id="作弊">作弊</h2><p><strong>作弊源于“服务器端对客户端暴露了过多的数据”。</strong></p><p>要解决作弊问题，就需要服务器端对传送给客户端的数据进行过滤，不传送任何玩家不可见实体的数据。在 MOBA 类游戏中，这类数据包括被<br>战争迷雾遮挡的敌对玩家和怪物的行为、隐身玩家的行为等。</p><p>那么，当客户端接收到的输入少于服务器端的输入之后，客户端的状态如何与服务器保持一致？我个人的看法是：</p><ul><li><strong>服务器端的所有实体 &gt;= 客户端的所有实体</strong></li><li><strong>服务器端的状态 &gt;= 所有客户端状态的并集</strong></li></ul><p>是的，我们不需要保持客户端的状态完全等于服务器端的状态。我们只需保证，任意时刻任何一个客户端的状态都应该是服务器端状态的子集。<br>当玩家需要了解更多实体的状态时，服务器端再将这些实体的当前状态以及后续行为发送给客户端；当玩家不需要了解某些实体的状态时，服务<br>器端通知客户端将这些实体的状态从内存中删除，并不再发送这些实体的后续行为。</p><p>我们需要解决的问题是，如何让客户端不受未知实体的行为影响？我的想法是：</p><ol><li><strong>实体应尽可能的聚合，其本身的状态不应该包含全局数据</strong>；</li><li>视全局数据为独特的实体，对全局数据的所有改变，对所有客户端同步。</li></ol><p>实现的时候，应该尽可能的减少全局数据。例如：玩家 和 AI 的状态应该包含私有的随机种子；可被遮挡的商店不应该被视为全局数据。</p><h2 id="版本兼容">版本兼容</h2><p>如果新版本服务器需要兼容老版本的客户端的话，需要在初始化阶段协商版本号。实现的时候，需要对新逻辑做版本过滤。最好只迭代维护最新的几个版本。</p><h2 id="优点">优点</h2><ul><li>很容易实现战斗录像；</li><li>也很容易实现，观战；</li><li>掉线了，上线的时候，重新传下战场状态就可以了；</li><li>去掉录像功能的话，也应该可以扩展到大一点的战场；</li><li>……</li></ul><h2 id="鸣谢">鸣谢</h2><ul><li>前公司的客户端主程。当时，我们游戏的战斗模式准备从战报式改为手动操作模式，在我介绍我的（校验？具体的，想不起来了）方案时，<br>他说，他们之前有个游戏是通过游戏操作过程来校验的。没有他的提示，很多事情估计会变了样。</li><li>前公司的前主策。在他离职后，我们的一次讨论，将之前的战报校验流程演化成了战场同步方案。没有那次讨论，不会有这篇文章。</li></ul><h2 id="推荐和参考">推荐和参考</h2><ul><li><a href="https://www.zhihu.com/question/26072198">《魔兽争霸III》是如何实现野怪同步的?</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;战场状态&quot;&gt;战场状态&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;战场状态 ＝ 所有实体的状态之和&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里的实体包括但不限于玩家、AI 、子弹和商店。&lt;/p&gt;
&lt;h2 id=&quot;时间&quot;&gt;时间&lt;/h2&gt;
&lt;p&gt;每隔单位时间，在上一时刻战场状态的基础上，计算所有该时间单位发起的操作或接收的状态改变。同时时间也作为输入，驱动实体的持续性动作。&lt;br&gt;
这里的单位时间可以是 10ms 这样的间隔。&lt;/p&gt;
&lt;h2 id=&quot;计算&quot;&gt;计算&lt;/h2&gt;
&lt;p&gt;任意时刻，玩家在客户端的操作在发送给服务器端的同时，也将在本地的下一次计算时，作用于状态的本地副本。在收到服务器端的回应之后，&lt;br&gt;
与这期间收到的所有回应及其他操作在之前保存的战场状态上重新计算，客户端需要对上一时刻计算的副本进行修正。例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设，Ti 时刻，本地状态和服务器状态一致，为 Si 。&lt;/li&gt;
&lt;li&gt;Ti+1 时刻，发起操作 Ai+1; 本地计算该操作，得到本地状态 LSi+1 。&lt;/li&gt;
&lt;li&gt;Ti+4 时刻，收到服务器其他玩家的操作 SBi+4 ；本地计算该操作，得到本地状态 LSi+4。&lt;/li&gt;
&lt;li&gt;Ti+8 时刻，发起操作 Ai+8 ；本地计算该操作，得到本地状态 LSi+8。&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;li&gt;Ti+k 时间，收到操作 Ai 的回应 SAi+5；在状态 Si 上计算 SBi+4 ，得到 Si+4；在 Si+4 上计算操作 SAi+5 , 得到 Si+5 ；在新的&lt;br&gt;
Si+5 上计算后续的操作，得到新的本地状态 LSi+k-1 ；对比之前的本地状态 LSi+k-1 , 客户端做出修正后，计算该时刻的操作。&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于某些难以修正的动作，如：死亡，客户端可以做延迟处理，直到服务器给出回应。&lt;/p&gt;
&lt;h2 id=&quot;作弊&quot;&gt;作弊&lt;/h2&gt;</summary>
    
    
    
    
    <category term="game development" scheme="http://blog.kezhuw.name/tags/game-development/"/>
    
  </entry>
  
  <entry>
    <title>Go memory leak in background goroutine</title>
    <link href="http://blog.kezhuw.name/2016/02/18/go-memory-leak-in-background-goroutine/"/>
    <id>http://blog.kezhuw.name/2016/02/18/go-memory-leak-in-background-goroutine/</id>
    <published>2016-02-18T10:47:36.000Z</published>
    <updated>2016-02-18T13:04:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>People coming from C or C++ may think that there is no <a href="https://en.wikipedia.org/wiki/Memory_leak#Programming_issues">memory leak</a> in languages with <a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">garbage collection</a>. But the truth is:</p><p><strong>Memory leak does exist in languages with automatic garbage collection.</strong></p><p>In perspective of human beings, garbage means something will never being used after sometime. Unfortunately, computer can’t<br>understand this. Computer uses a concept <a href="https://en.wikipedia.org/wiki/Unreachable_memory">unreachable</a> to detect whether<br>an object is garbage or not. There is a gap, as you may already known, that is “reachable but no longer used”.</p><p>Here, I show you a memory leak case using <a href="https://golang.org/doc/effective_go.html">Go</a>. Also, it can happen in other garbage collection language, like Java.<br>Goroutine is so lightweight and convenient in Go. Sometimes, you may use it to do some background jobs.<br>Suppose, I write following code for a database library:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DB <span class="keyword">struct</span> &#123;</span><br><span class="line">closed <span class="type">bool</span></span><br><span class="line">reqC   <span class="keyword">chan</span> Request</span><br><span class="line">mutex  sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Close() &#123;</span><br><span class="line">db.mutex.Lock()</span><br><span class="line"><span class="keyword">if</span> db.closed &#123;</span><br><span class="line">db.mutex.Unlock()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">db.closed = <span class="literal">true</span></span><br><span class="line">db.mutex.Unlock()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;db closing&quot;</span>)</span><br><span class="line"><span class="built_in">close</span>(db.reqC)</span><br><span class="line">runtime.SetFinalizer(db, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backgroundWork</span><span class="params">(db *DB)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> db.reqC &#123;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;db channel closed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(address <span class="type">string</span>, name <span class="type">string</span>)</span></span> (*DB, <span class="type">error</span>) &#123;</span><br><span class="line">db := &amp;DB&#123;reqC: <span class="built_in">make</span>(<span class="keyword">chan</span> Request, <span class="number">100</span>)&#125;</span><br><span class="line">runtime.SetFinalizer(db, (*DB).Close)</span><br><span class="line"><span class="keyword">go</span> backgroundWork(db)</span><br><span class="line"><span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">Open(<span class="string">&quot;tcp://127.0.0.1:4444&quot;</span>, <span class="string">&quot;test&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">time.Sleep(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You may find that, database object created in function <code>test</code> is a garbage, but it never and will never got collected.<br>The object is reachable from function <code>backgroundWork</code> called in goroutine fired by <code>go backgroundWork(db)</code> in <code>Open</code>.</p><p><strong>If we want garbage collector to collect object for us, we should not reference the object in any case.</strong> In above code,<br>we should not reference database object in <code>backgroundWork</code>. Let us make some changes:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backgroundWork</span><span class="params">(reqC <span class="keyword">chan</span> Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> reqC &#123;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;db channel closed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(address <span class="type">string</span>, name <span class="type">string</span>)</span></span> (*DB, <span class="type">error</span>) &#123;</span><br><span class="line">db := &amp;DB&#123;reqC: <span class="built_in">make</span>(<span class="keyword">chan</span> Request, <span class="number">100</span>)&#125;</span><br><span class="line">runtime.SetFinalizer(db, (*DB).Close)</span><br><span class="line"><span class="keyword">go</span> backgroundWork(db.reqC)</span><br><span class="line"><span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we run the programm and find that the database object got collected.</p><p>I recommend three principles when you use thread or goroutine as background workhorse for API objects:</p><ul><li>Don’t reference, directly or indirectly, API objects in background threads or goroutines</li><li>Shutdown background threads or goroutines in API objects’ finalizer/closer function</li><li>Care about “double free” issue, including manual-manual, manual-automatic gc</li></ul><p>If you do want reference API object in background workhorse, use its <a href="https://en.wikipedia.org/wiki/Weak_reference">weak reference</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;People coming from C or C++ may think that there is no &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_leak#Programming_issues&quot;&gt;memory leak&lt;/a&gt; in languages with &lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)&quot;&gt;garbage collection&lt;/a&gt;. But the truth is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memory leak does exist in languages with automatic garbage collection.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In perspective of human beings, garbage means something will never being used after sometime. Unfortunately, computer can’t&lt;br&gt;
understand this. Computer uses a concept &lt;a href=&quot;https://en.wikipedia.org/wiki/Unreachable_memory&quot;&gt;unreachable&lt;/a&gt; to detect whether&lt;br&gt;
an object is garbage or not. There is a gap, as you may already known, that is “reachable but no longer used”.&lt;/p&gt;
&lt;p&gt;Here, I show you a memory leak case using &lt;a href=&quot;https://golang.org/doc/effective_go.html&quot;&gt;Go&lt;/a&gt;. Also, it can happen in other garbage collection language, like Java.&lt;br&gt;
Goroutine is so lightweight and convenient in Go. Sometimes, you may use it to do some background jobs.&lt;br&gt;
Suppose, I write following code for a database library:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;runtime&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Request &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; DB &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	closed &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	reqC   &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex  sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(db *DB)&lt;/span&gt;&lt;/span&gt; Close() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db.mutex.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; db.closed &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		db.mutex.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db.closed = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db.mutex.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;db closing&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(db.reqC)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	runtime.SetFinalizer(db, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;backgroundWork&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(db *DB)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; db.reqC &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;db channel closed&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(address &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (*DB, &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db := &amp;amp;DB&amp;#123;reqC: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Request, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	runtime.SetFinalizer(db, (*DB).Close)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; backgroundWork(db)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; db, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Open(&lt;span class=&quot;string&quot;&gt;&amp;quot;tcp://127.0.0.1:4444&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		time.Sleep(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You may find that, database object created in function &lt;code&gt;test&lt;/code&gt; is a garbage, but it never and will never got collected.&lt;br&gt;
The object is reachable from function &lt;code&gt;backgroundWork&lt;/code&gt; called in goroutine fired by &lt;code&gt;go backgroundWork(db)&lt;/code&gt; in &lt;code&gt;Open&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If we want garbage collector to collect object for us, we should not reference the object in any case.&lt;/strong&gt; In above code,&lt;br&gt;
we should not reference database object in &lt;code&gt;backgroundWork&lt;/code&gt;. Let us make some changes:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;backgroundWork&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(reqC &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; reqC &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;db channel closed&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(address &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;, name &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (*DB, &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db := &amp;amp;DB&amp;#123;reqC: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Request, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	runtime.SetFinalizer(db, (*DB).Close)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; backgroundWork(db.reqC)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; db, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now, we run the programm and find that the database object got collected.&lt;/p&gt;
&lt;p&gt;I recommend three principles when you use thread or goroutine as background workhorse for API objects:&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="http://blog.kezhuw.name/tags/golang/"/>
    
    <category term="gc" scheme="http://blog.kezhuw.name/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>C++ 编译系统</title>
    <link href="http://blog.kezhuw.name/2015/12/08/desired-cpp-build-system/"/>
    <id>http://blog.kezhuw.name/2015/12/08/desired-cpp-build-system/</id>
    <published>2015-12-08T12:29:06.000Z</published>
    <updated>2015-12-08T19:30:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近尝试了几款 C++ 编译系统。</p><ul><li><p><a href="https://cmake.org/cmake/help/v3.4/index.html">CMake</a> 对于一个编译系统来说，个人觉得过于复杂了。项目依赖不好解决，可能我姿势不对，用不好 ExternalProject 。</p></li><li><p><a href="https://github.com/iauns/cpm">CPM</a> 基于 CMake ，对项目结构以及名字空间有额外要求。我写我的代码，导出我的接口，你还想管我怎么写？</p></li><li><p><a href="http://docs.biicode.com/c++/building/biicode_building.html">biicode</a> 自动生成了很多隐式配置，用的时候很大可能要修改这些配置，作者脑洞有点大。不推荐。</p></li><li><p><a href="https://github.com/mesonbuild/meson">meson</a> 很轻量的一个编译系统，配置语言很好用。依赖可以在系统软件包和源码之间切换。对现有项目提供的 patch 支持很不错，不需要对上游做破坏性更新。文档还是比较少的，有些东西估计得读下代码才知道怎么用。值得一试。</p></li><li><p><a href="http://bazel.io/">bazel</a> Google 出品，离 1.0 还很远，不过已经可以用了。很合适 <a href="http://www.wired.com/2015/09/google-2-billion-lines-codeand-one-place/">Google 那种集中式的代码库</a>，根目录一个 WORKSPACE ，其他的项目都只是一个 BUILD ，项目间的依赖也很好指定。和系统软件包的配合不好，连 <code>make install</code> 都没有。patch 支持，一个 BUILD 文件就可以搞定，复杂的话，可能比较麻烦。文档很不错。推荐。</p></li></ul><p>这几款编译系统都没能解决一个问题：<strong>编译时第三方依赖的源码和软件包之间的一致性</strong>。举例来说：</p><p>如果 packageA 的头文件 <code>header.hpp</code> 通过 <code>make install</code> 或其他的包管理工具安装在 <code>packageA/header.hpp</code> ，那么 packageB 一定可以通过 <code>#include &lt;packageA/header.hpp&gt;</code> 引用到这个文件，不论 packageB 依赖的是 packageA 的源码还是系统软件包。<code>header.hpp</code> 可以在 packageA 的任意位置，甚至可能是编译时生成的头文件。</p><p>要做到这一点，我的想法是：在编译 packageB 时，如果依赖的是 packageA 的源码，则先编译 packageA，将其安装在私有的目录，之后通过修改编译参数指定头文件包含目录和链接目录。如果依赖的是 packageA 的软件包，则直接用系统的头文件包含目录和链接目录。这样的话，就可以通过配置语言 packageA 的源码和软件包之间切换。</p><p>meson 可以在依赖的源码和软件包之间切换，但是需要根据源码结构和包结构之间的差异做特别的定制。bazel 就是一集中化的代码仓库，包含路径只能相对根目录和当前目录。</p><p>也许得自己撸一个？Damnit!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近尝试了几款 C++ 编译系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://cmake.org/cmake/help/v3.4/index.html&quot;&gt;CMake&lt;/a&gt; 对于一个编译系统来说，个人觉得过于复杂了。项目依赖不好解决，可能我姿势不对，用不好 ExternalProject 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/iauns/cpm&quot;&gt;CPM&lt;/a&gt; 基于 CMake ，对项目结构以及名字空间有额外要求。我写我的代码，导出我的接口，你还想管我怎么写？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.biicode.com/c++/building/biicode_building.html&quot;&gt;biicode&lt;/a&gt; 自动生成了很多隐式配置，用的时候很大可能要修改这些配置，作者脑洞有点大。不推荐。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mesonbuild/meson&quot;&gt;meson&lt;/a&gt; 很轻量的一个编译系统，配置语言很好用。依赖可以在系统软件包和源码之间切换。对现有项目提供的 patch 支持很不错，不需要对上游做破坏性更新。文档还是比较少的，有些东西估计得读下代码才知道怎么用。值得一试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://bazel.io/&quot;&gt;bazel&lt;/a&gt; Google 出品，离 1.0 还很远，不过已经可以用了。很合适 &lt;a href=&quot;http://www.wired.com/2015/09/google-2-billion-lines-codeand-one-place/&quot;&gt;Google 那种集中式的代码库&lt;/a&gt;，根目录一个 WORKSPACE ，其他的项目都只是一个 BUILD ，项目间的依赖也很好指定。和系统软件包的配合不好，连 &lt;code&gt;make install&lt;/code&gt; 都没有。patch 支持，一个 BUILD 文件就可以搞定，复杂的话，可能比较麻烦。文档很不错。推荐。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几款编译系统都没能解决一个问题：&lt;strong&gt;编译时第三方依赖的源码和软件包之间的一致性&lt;/strong&gt;。举例来说：&lt;/p&gt;
&lt;p&gt;如果 packageA 的头文件 &lt;code&gt;header.hpp&lt;/code&gt; 通过 &lt;code&gt;make install&lt;/code&gt; 或其他的包管理工具安装在 &lt;code&gt;packageA/header.hpp&lt;/code&gt; ，那么 packageB 一定可以通过 &lt;code&gt;#include &amp;lt;packageA/header.hpp&amp;gt;&lt;/code&gt; 引用到这个文件，不论 packageB 依赖的是 packageA 的源码还是系统软件包。&lt;code&gt;header.hpp&lt;/code&gt; 可以在 packageA 的任意位置，甚至可能是编译时生成的头文件。&lt;/p&gt;
&lt;p&gt;要做到这一点，我的想法是：在编译 packageB 时，如果依赖的是 packageA 的源码，则先编译 packageA，将其安装在私有的目录，之后通过修改编译参数指定头文件包含目录和链接目录。如果依赖的是 packageA 的软件包，则直接用系统的头文件包含目录和链接目录。这样的话，就可以通过配置语言 packageA 的源码和软件包之间切换。&lt;/p&gt;
&lt;p&gt;meson 可以在依赖的源码和软件包之间切换，但是需要根据源码结构和包结构之间的差异做特别的定制。bazel 就是一集中化的代码仓库，包含路径只能相对根目录和当前目录。&lt;/p&gt;
&lt;p&gt;也许得自己撸一个？Damnit!&lt;/p&gt;
</summary>
    
    
    
    
    <category term="c++" scheme="http://blog.kezhuw.name/tags/cplusplus/"/>
    
    <category term="build" scheme="http://blog.kezhuw.name/tags/build/"/>
    
  </entry>
  
  <entry>
    <title>epoll 的读写分离</title>
    <link href="http://blog.kezhuw.name/2015/04/25/split-read-write-events-in-epoll/"/>
    <id>http://blog.kezhuw.name/2015/04/25/split-read-write-events-in-epoll/</id>
    <published>2015-04-25T11:43:12.000Z</published>
    <updated>2016-07-14T16:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>FreeBSD 下的 <a href="http://www.freebsd.org/cgi/man.cgi?query=kqueue">kqueue</a> 监听的单位是 (ident, filter) ， Linux 下的 <a href="http://man7.org/linux/man-pages/man7/epoll.7.html">epoll</a> 监听的单位是单个 fd 。在 Linux 下，通常你需要对 epoll 监听的 fd 做一些额外的记录工作，以便下次更改时查询。这里直接用 <a href="http://redis.io/">Redis</a> 的代码做个示例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FreeBSD kqueue</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">aeApiAddEvent</span><span class="params">(aeEventLoop *eventLoop, <span class="type">int</span> fd, <span class="type">int</span> mask)</span> &#123;</span><br><span class="line">    aeApiState *state = eventLoop-&gt;apidata;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kevent</span> <span class="title">ke</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_READABLE) &#123;</span><br><span class="line">        EV_SET(&amp;ke, fd, EVFILT_READ, EV_ADD, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (kevent(state-&gt;kqfd, &amp;ke, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_WRITABLE) &#123;</span><br><span class="line">        EV_SET(&amp;ke, fd, EVFILT_WRITE, EV_ADD, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (kevent(state-&gt;kqfd, &amp;ke, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">aeApiDelEvent</span><span class="params">(aeEventLoop *eventLoop, <span class="type">int</span> fd, <span class="type">int</span> mask)</span> &#123;</span><br><span class="line">    aeApiState *state = eventLoop-&gt;apidata;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kevent</span> <span class="title">ke</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_READABLE) &#123;</span><br><span class="line">        EV_SET(&amp;ke, fd, EVFILT_READ, EV_DELETE, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        kevent(state-&gt;kqfd, &amp;ke, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_WRITABLE) &#123;</span><br><span class="line">        EV_SET(&amp;ke, fd, EVFILT_WRITE, EV_DELETE, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        kevent(state-&gt;kqfd, &amp;ke, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到，FreeBSD kqueue 在改变 fd 的监听事件时不需要做额外的记录工作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Linux epoll</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">aeApiAddEvent</span><span class="params">(aeEventLoop *eventLoop, <span class="type">int</span> fd, <span class="type">int</span> mask)</span> &#123;</span><br><span class="line">    aeApiState *state = eventLoop-&gt;apidata;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ee</span> =</span> &#123;<span class="number">0</span>&#125;; <span class="comment">/* avoid valgrind warning */</span></span><br><span class="line">    <span class="comment">/* If the fd was already monitored for some event, we need a MOD</span></span><br><span class="line"><span class="comment">     * operation. Otherwise we need an ADD operation. */</span></span><br><span class="line">    <span class="type">int</span> op = eventLoop-&gt;events[fd].mask == AE_NONE ?</span><br><span class="line">            EPOLL_CTL_ADD : EPOLL_CTL_MOD;</span><br><span class="line"></span><br><span class="line">    ee.events = <span class="number">0</span>;</span><br><span class="line">    mask |= eventLoop-&gt;events[fd].mask; <span class="comment">/* Merge old events */</span></span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_READABLE) ee.events |= EPOLLIN;</span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_WRITABLE) ee.events |= EPOLLOUT;</span><br><span class="line">    ee.data.fd = fd;</span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(state-&gt;epfd,op,fd,&amp;ee) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">aeApiDelEvent</span><span class="params">(aeEventLoop *eventLoop, <span class="type">int</span> fd, <span class="type">int</span> delmask)</span> &#123;</span><br><span class="line">    aeApiState *state = eventLoop-&gt;apidata;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ee</span> =</span> &#123;<span class="number">0</span>&#125;; <span class="comment">/* avoid valgrind warning */</span></span><br><span class="line">    <span class="type">int</span> mask = eventLoop-&gt;events[fd].mask &amp; (~delmask);</span><br><span class="line"></span><br><span class="line">    ee.events = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_READABLE) ee.events |= EPOLLIN;</span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_WRITABLE) ee.events |= EPOLLOUT;</span><br><span class="line">    ee.data.fd = fd;</span><br><span class="line">    <span class="keyword">if</span> (mask != AE_NONE) &#123;</span><br><span class="line">        epoll_ctl(state-&gt;epfd,EPOLL_CTL_MOD,fd,&amp;ee);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Note, Kernel &lt; 2.6.9 requires a non null event pointer even for</span></span><br><span class="line"><span class="comment">         * EPOLL_CTL_DEL. */</span></span><br><span class="line">        epoll_ctl(state-&gt;epfd,EPOLL_CTL_DEL,fd,&amp;ee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到，Linux epoll 在改变 fd 的监听事件时需要查询之前监听的事件，记录当前监听的事件。<br>这样 API 的调用者就无需做额外的记录工作，但读写事件需要额外的同步机制去保证线程安全。</p><blockquote><p>Q3  Is the epoll file descriptor itself poll/epoll/selectable?</p><p>A3  Yes.  If an epoll file descriptor has events waiting, then it will indicate as being readable.</p><p>---- epoll(7)</p></blockquote><p>下面的代码利用了 epoll fd 本身在有等待事件时是可读的特性，展示了一种新的在 Linux epoll 下对 fd 读写<br>事件进行监听的方法。该方法分离了 fd 的读和写，这样我们就可以把 fd 的读和写交给不同的线程去处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// initialization</span></span><br><span class="line"><span class="type">int</span> epfd = epoll_create(<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> readfd = epoll_create(<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> writefd = epoll_create(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></span><br><span class="line">event.events = EPOLLIN;</span><br><span class="line"></span><br><span class="line">event.data.fd = readfd;</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, readfd, &amp;event);</span><br><span class="line"></span><br><span class="line">event.data.fd = writefd;</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, writefd, &amp;event);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wait read event</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">ev.data.fd = fd;</span><br><span class="line">ev.events = EPOLLIN; <span class="comment">// with possible other flags.</span></span><br><span class="line">epoll_ctl(readfd, EPOLL_CTL_ADD, fd, &amp;ev);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wait write event</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">ev.data.fd = fd;</span><br><span class="line">ev.events = EPOLLOUT; <span class="comment">// with possible other flags.</span></span><br><span class="line"><span class="comment">// No bookkeeping needed for read flags.</span></span><br><span class="line">epoll_ctl(writefd, EPOLL_CTL_ADD, fd, &amp;ev);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// polling</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    kEventsSize      = <span class="number">512</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">eps</span>[2];</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">evs</span>[<span class="title">kEventsSize</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n = epoll_wait(epfd, eps, <span class="number">2</span>, timeout);</span><br><span class="line"><span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="type">int</span> fd = eps[n].data.fd;</span><br><span class="line">    <span class="type">int</span> nevent = epoll_wait(fd, events, kEventsSize, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd == readfd) &#123;</span><br><span class="line">        <span class="comment">// read events</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// write events</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们有了一个 kqueue 式的 epoll 接口。 Enjoy it!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;FreeBSD 下的 &lt;a href=&quot;http://www.freebsd.org/cgi/man.cgi?query=kqueue&quot;&gt;kqueue&lt;/a&gt; 监听的单位是 (ident, filter) ， Linux 下的 &lt;a href=&quot;http://man7.org/linux/man-pages/man7/epoll.7.html&quot;&gt;epoll&lt;/a&gt; 监听的单位是单个 fd 。在 Linux 下，通常你需要对 epoll 监听的 fd 做一些额外的记录工作，以便下次更改时查询。这里直接用 &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; 的代码做个示例。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// FreeBSD kqueue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;aeApiAddEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(aeEventLoop *eventLoop, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fd, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mask)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    aeApiState *state = eventLoop-&amp;gt;apidata;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;kevent&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ke&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mask &amp;amp; AE_READABLE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EV_SET(&amp;amp;ke, fd, EVFILT_READ, EV_ADD, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (kevent(state-&amp;gt;kqfd, &amp;amp;ke, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mask &amp;amp; AE_WRITABLE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EV_SET(&amp;amp;ke, fd, EVFILT_WRITE, EV_ADD, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (kevent(state-&amp;gt;kqfd, &amp;amp;ke, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;aeApiDelEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(aeEventLoop *eventLoop, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fd, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mask)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    aeApiState *state = eventLoop-&amp;gt;apidata;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;kevent&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ke&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mask &amp;amp; AE_READABLE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EV_SET(&amp;amp;ke, fd, EVFILT_READ, EV_DELETE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        kevent(state-&amp;gt;kqfd, &amp;amp;ke, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mask &amp;amp; AE_WRITABLE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EV_SET(&amp;amp;ke, fd, EVFILT_WRITE, EV_DELETE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        kevent(state-&amp;gt;kqfd, &amp;amp;ke, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上面的代码可以看到，FreeBSD kqueue 在改变 fd 的监听事件时不需要做额外的记录工作。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Linux epoll&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;aeApiAddEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(aeEventLoop *eventLoop, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fd, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mask)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    aeApiState *state = eventLoop-&amp;gt;apidata;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;epoll_event&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ee&lt;/span&gt; =&lt;/span&gt; &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;/* avoid valgrind warning */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* If the fd was already monitored for some event, we need a MOD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * operation. Otherwise we need an ADD operation. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; op = eventLoop-&amp;gt;events[fd].mask == AE_NONE ?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            EPOLL_CTL_ADD : EPOLL_CTL_MOD;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ee.events = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mask |= eventLoop-&amp;gt;events[fd].mask; &lt;span class=&quot;comment&quot;&gt;/* Merge old events */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mask &amp;amp; AE_READABLE) ee.events |= EPOLLIN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mask &amp;amp; AE_WRITABLE) ee.events |= EPOLLOUT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ee.data.fd = fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (epoll_ctl(state-&amp;gt;epfd,op,fd,&amp;amp;ee) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;aeApiDelEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(aeEventLoop *eventLoop, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fd, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; delmask)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    aeApiState *state = eventLoop-&amp;gt;apidata;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;epoll_event&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ee&lt;/span&gt; =&lt;/span&gt; &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;/* avoid valgrind warning */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mask = eventLoop-&amp;gt;events[fd].mask &amp;amp; (~delmask);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ee.events = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mask &amp;amp; AE_READABLE) ee.events |= EPOLLIN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mask &amp;amp; AE_WRITABLE) ee.events |= EPOLLOUT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ee.data.fd = fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mask != AE_NONE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        epoll_ctl(state-&amp;gt;epfd,EPOLL_CTL_MOD,fd,&amp;amp;ee);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* Note, Kernel &amp;lt; 2.6.9 requires a non null event pointer even for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;         * EPOLL_CTL_DEL. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        epoll_ctl(state-&amp;gt;epfd,EPOLL_CTL_DEL,fd,&amp;amp;ee);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上面的代码可以看到，Linux epoll 在改变 fd 的监听事件时需要查询之前监听的事件，记录当前监听的事件。&lt;br&gt;
这样 API 的调用者就无需做额外的记录工作，但读写事件需要额外的同步机制去保证线程安全。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q3  Is the epoll file descriptor itself poll/epoll/selectable?&lt;/p&gt;
&lt;p&gt;A3  Yes.  If an epoll file descriptor has events waiting, then it will indicate as being readable.&lt;/p&gt;
&lt;p&gt;---- epoll(7)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面的代码利用了 epoll fd 本身在有等待事件时是可读的特性，展示了一种新的在 Linux epoll 下对 fd 读写&lt;br&gt;
事件进行监听的方法。该方法分离了 fd 的读和写，这样我们就可以把 fd 的读和写交给不同的线程去处理。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// initialization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; epfd = epoll_create(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; readfd = epoll_create(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; writefd = epoll_create(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;epoll_event&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;event&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;event.events = EPOLLIN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;event.data.fd = readfd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;epoll_ctl(epfd, EPOLL_CTL_ADD, readfd, &amp;amp;event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;event.data.fd = writefd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;epoll_ctl(epfd, EPOLL_CTL_ADD, writefd, &amp;amp;event);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// wait read event&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;epoll_event&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ev&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ev.data.fd = fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ev.events = EPOLLIN; &lt;span class=&quot;comment&quot;&gt;// with possible other flags.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;epoll_ctl(readfd, EPOLL_CTL_ADD, fd, &amp;amp;ev);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// wait write event&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;epoll_event&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ev&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ev.data.fd = fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ev.events = EPOLLOUT; &lt;span class=&quot;comment&quot;&gt;// with possible other flags.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// No bookkeeping needed for read flags.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;epoll_ctl(writefd, EPOLL_CTL_ADD, fd, &amp;amp;ev);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://blog.kezhuw.name/tags/linux/"/>
    
    <category term="epoll" scheme="http://blog.kezhuw.name/tags/epoll/"/>
    
    <category term="kqueue" scheme="http://blog.kezhuw.name/tags/kqueue/"/>
    
  </entry>
  
  <entry>
    <title>游戏服务器中的全服邮件发送</title>
    <link href="http://blog.kezhuw.name/2015/04/06/global-mail-sending-in-game-server/"/>
    <id>http://blog.kezhuw.name/2015/04/06/global-mail-sending-in-game-server/</id>
    <published>2015-04-05T17:15:40.000Z</published>
    <updated>2015-04-05T17:41:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>游戏开发、运营过程中通常会有 “给全服所有玩家发送邮件” 的需求。</p><p>我个人的想法是，给每封全服邮件一个版本号，玩家上线时或定期向 “全服邮件中心” 查询更新的全服邮件。下面是 C++ 版本的示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global Mail Centra</span></span><br><span class="line"><span class="keyword">using</span> <span class="type">version_t</span> = uint64;</span><br><span class="line"><span class="keyword">using</span> <span class="type">mail_id_t</span> = uint64;</span><br><span class="line"></span><br><span class="line">std::map&lt;<span class="type">version_t</span>, <span class="type">mail_id_t</span>&gt; _mails;</span><br><span class="line"></span><br><span class="line">std::tuple&lt;<span class="type">version_t</span>, std::vector&lt;<span class="type">mail_id_t</span>&gt;&gt; <span class="built_in">fetchNewerMail</span>(<span class="type">version_t</span> currentVersion) &#123;</span><br><span class="line">    <span class="keyword">auto</span> newerVersion = currentVersion;</span><br><span class="line">    std::vector&lt;<span class="type">mail_id_t</span>&gt; newerMails;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = _mails.<span class="built_in">upper_bound</span>(currentVersion); it != _mails.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        newerVersion = it-&gt;first;</span><br><span class="line">        newerMails.<span class="built_in">push_back</span>(it-&gt;second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">make_tuple</span>(newerVersion, newerMails);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Global Mail Proxy in Player Module</span></span><br><span class="line"><span class="type">version_t</span> _currentVersion;</span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">mail_id_t</span>&gt; <span class="title">checkGlobalMails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">version_t</span> newerVersion;</span><br><span class="line">    std::vector&lt;<span class="type">mail_id_t</span>&gt; newerMails;</span><br><span class="line">    std::<span class="built_in">tie</span>(newerVersion, newerMails) = <span class="built_in">fetchNewerMails</span>(_currentVersion);</span><br><span class="line">    <span class="keyword">if</span> (newerVersion != _currentVersion) &#123;</span><br><span class="line">        _currentVersion = newerVersion;</span><br><span class="line">        <span class="comment">// update _currentVersion to backend data storage</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newerMails;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果服务器框架有很好的 coroutine 支持，玩家模块可以用一个独立的 coroutine <em>不停的</em>向 “全服邮件中心” 获取邮件更新；“全服邮件中心” 根据自身状态决定立即或延迟回复以恢复对方的执行流。例如，在 <a href="https://github.com/cloudwu/skynet/">skynet</a> 中，可以这样做：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update_global_mails</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> currentVersion = get_current_version()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        newerVersion, newerMails = skynet.call(<span class="string">&quot;.global_mail_centra&quot;</span>, <span class="string">&quot;lua&quot;</span>, <span class="string">&quot;fetchNewerMails&quot;</span>, currentVersion)</span><br><span class="line">        <span class="keyword">if</span> newerVersion != currentVersion <span class="keyword">then</span></span><br><span class="line">            // synchronized to player<span class="string">&#x27;s mailbox (other module in same process), blocking call</span></span><br><span class="line"><span class="string">            currentVersion = newerVersion</span></span><br><span class="line"><span class="string">            // update currentVersion to backend data storage</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">skynet.fork(update_global_mails)</span></span><br></pre></td></tr></table></figure><p>推荐阅读：<a href="http://blog.codingnow.com/2014/07/skynet_response.html">skynet 中如何实现邮件达到通知服务</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;游戏开发、运营过程中通常会有 “给全服所有玩家发送邮件” 的需求。&lt;/p&gt;
&lt;p&gt;我个人的想法是，给每封全服邮件一个版本号，玩家上线时或定期向 “全服邮件中心” 查询更新的全服邮件。下面是 C++ 版本的示例代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Global Mail Centra&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;version_t&lt;/span&gt; = uint64;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;mail_id_t&lt;/span&gt; = uint64;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::map&amp;lt;&lt;span class=&quot;type&quot;&gt;version_t&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;mail_id_t&lt;/span&gt;&amp;gt; _mails;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::tuple&amp;lt;&lt;span class=&quot;type&quot;&gt;version_t&lt;/span&gt;, std::vector&amp;lt;&lt;span class=&quot;type&quot;&gt;mail_id_t&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;fetchNewerMail&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;version_t&lt;/span&gt; currentVersion) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; newerVersion = currentVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::vector&amp;lt;&lt;span class=&quot;type&quot;&gt;mail_id_t&lt;/span&gt;&amp;gt; newerMails;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; it = _mails.&lt;span class=&quot;built_in&quot;&gt;upper_bound&lt;/span&gt;(currentVersion); it != _mails.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;(); ++it) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newerVersion = it-&amp;gt;first;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newerMails.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(it-&amp;gt;second);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;built_in&quot;&gt;make_tuple&lt;/span&gt;(newerVersion, newerMails);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Global Mail Proxy in Player Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;version_t&lt;/span&gt; _currentVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;std::vector&amp;lt;&lt;span class=&quot;type&quot;&gt;mail_id_t&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;checkGlobalMails&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;version_t&lt;/span&gt; newerVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::vector&amp;lt;&lt;span class=&quot;type&quot;&gt;mail_id_t&lt;/span&gt;&amp;gt; newerMails;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::&lt;span class=&quot;built_in&quot;&gt;tie&lt;/span&gt;(newerVersion, newerMails) = &lt;span class=&quot;built_in&quot;&gt;fetchNewerMails&lt;/span&gt;(_currentVersion);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (newerVersion != _currentVersion) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _currentVersion = newerVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// update _currentVersion to backend data storage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; newerMails;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果服务器框架有很好的 coroutine 支持，玩家模块可以用一个独立的 coroutine &lt;em&gt;不停的&lt;/em&gt;向 “全服邮件中心” 获取邮件更新；“全服邮件中心” 根据自身状态决定立即或延迟回复以恢复对方的执行流。例如，在 &lt;a href=&quot;https://github.com/cloudwu/skynet/&quot;&gt;skynet&lt;/a&gt; 中，可以这样做：&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update_global_mails&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt; currentVersion = get_current_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newerVersion, newerMails = skynet.call(&lt;span class=&quot;string&quot;&gt;&amp;quot;.global_mail_centra&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;lua&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fetchNewerMails&amp;quot;&lt;/span&gt;, currentVersion)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; newerVersion != currentVersion &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // synchronized to player&lt;span class=&quot;string&quot;&gt;&amp;#x27;s mailbox (other module in same process), blocking call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;            currentVersion = newerVersion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;            // update currentVersion to backend data storage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;skynet.fork(update_global_mails)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;推荐阅读：&lt;a href=&quot;http://blog.codingnow.com/2014/07/skynet_response.html&quot;&gt;skynet 中如何实现邮件达到通知服务&lt;/a&gt;&lt;/p&gt;
</summary>
    
    
    
    
    <category term="game development" scheme="http://blog.kezhuw.name/tags/game-development/"/>
    
  </entry>
  
  <entry>
    <title>关于游戏服务器开发的一些个人见解</title>
    <link href="http://blog.kezhuw.name/2015/03/20/opinion-on-game-server-development/"/>
    <id>http://blog.kezhuw.name/2015/03/20/opinion-on-game-server-development/</id>
    <published>2015-03-20T10:01:56.000Z</published>
    <updated>2015-04-08T12:18:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参与并理解策划需求">参与并理解策划需求</h2><p>能把事情做好的人永远是少数。程序如此，策划也如此。遇到不靠谱的策划，一定好主动沟通，弄清楚<em>它们</em>都在想些什么？！</p><h2 id="隔离是必须的">隔离是必须的</h2><p>游戏逻辑相关开发要占用游戏服务器开发的绝大部分时间，也是出现 bug 最多的部分。游戏逻辑的各个子系统之间<em>直接</em>的源码级 API 交互，会随着团队成员和子系统的增加，呈现出急剧的复杂度。更好的方案是，子系统通过唯一的中间层 API 以约定的协议与其他子系统进行交互，子系统之间实现源码级的隔离。</p><p>这种分案有很多优点：</p><ul><li>便于模块分配，降低了源码冲突的可能性，限制了单个子系统 bug 的波及范围。</li><li>降低了系统的整体复杂度，便于<em>人类的大脑</em>理解。</li><li>子系统的实现变更（重构、重写）的代价（负担）会很小，代码质量会越来越好。</li><li>容易定位造成 bug 的子系统。</li><li><em>心情舒坦，利于长寿</em>。</li></ul><h2 id="代码质量">代码质量</h2><p>代码质量是一件严肃的事情。所有改 (zao) 善 (ta) 代码质量的行为，都会获得回 (bao) 报 (ying) 的。</p><h3 id="潜在即是必然">潜在即是必然</h3><p><strong>一个发生概率为百万分之一的 bug ，在线上运行时是必然会发生的</strong>。</p><h3 id="bug-修复要趁早">bug 修复要趁早</h3><p>大多数没有第一时间修复的 bug ，会被遗忘。</p><ul><li>对于只给出 workaround 或准备稍后 fix 的 bug ，一定要记录在案。</li><li>对于反应出设计缺陷或业务理解偏差的 bug ，最好重写相关模块。</li></ul><h3 id="警惕-C-中的-“设计模式”-和-“面向对象”">警惕 C++ 中的 “设计模式” 和 “面向对象”</h3><p>就我个人来说，我是很讨厌 C++ 的 “面向对象” 部分的，对 “设计模式” 也没有好感。我在工作中遇到的一些人，谈起 “设计模式” 、“面向对象” 来头头是道，写起代码来就很难让人恭维了。</p><p><strong>好代码才是硬道理</strong>。</p><h2 id="协议设计">协议设计</h2><p>请求、回应式的消息一定要有序列 id 的概念，这样客户端可以轻松的找到与回应消息相匹配的请求消息，进而恢复挂起的执行流。</p><h2 id="团队协作">团队协作</h2><p>让每个伙伴都开心的工作!</p><h3 id="团队成员">团队成员</h3><p>确保你的伙伴都是热爱代码的人。</p><h3 id="代码开放">代码开放</h3><p>代码是团队的共同财产，如果不开放，也便没有了信任的基础。强势的法律声明和有代码安全意识的伙伴才是保障代码安全的正途。就我个人来说，在代码不开放的团队工作时，很难<em>维持</em>贡献代码的激情。</p><h3 id="代码-review">代码 review</h3><p>要让代码 review 成为常态，要鼓励团队成员之间的相互 review ，鼓励团队成员对任意代码的 review 和修改。代码 review 可以很好的促进团队成员之间的了解、合作、信任。</p><h3 id="版本控制，降低冲突">版本控制，降低冲突</h3><p>首选分布式的版本管理工具，推荐：git + github 。所有的冲突都意味着某种程度上的耦合，在减少冲突上付出的努力，会节省团队成员大量的时间成本。</p><h2 id="做一个实践者">做一个实践者</h2><p>纸（嘴）上谈兵永远写不出好代码。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;参与并理解策划需求&quot;&gt;参与并理解策划需求&lt;/h2&gt;
&lt;p&gt;能把事情做好的人永远是少数。程序如此，策划也如此。遇到不靠谱的策划，一定好主动沟通，弄清楚&lt;em&gt;它们&lt;/em&gt;都在想些什么？！&lt;/p&gt;
&lt;h2 id=&quot;隔离是必须的&quot;&gt;隔离是必须的&lt;/h2&gt;
&lt;p&gt;游戏逻辑相关开发要占用游戏服务器开发的绝大部分时间，也是出现 bug 最多的部分。游戏逻辑的各个子系统之间&lt;em&gt;直接&lt;/em&gt;的源码级 API 交互，会随着团队成员和子系统的增加，呈现出急剧的复杂度。更好的方案是，子系统通过唯一的中间层 API 以约定的协议与其他子系统进行交互，子系统之间实现源码级的隔离。&lt;/p&gt;
&lt;p&gt;这种分案有很多优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;便于模块分配，降低了源码冲突的可能性，限制了单个子系统 bug 的波及范围。&lt;/li&gt;
&lt;li&gt;降低了系统的整体复杂度，便于&lt;em&gt;人类的大脑&lt;/em&gt;理解。&lt;/li&gt;
&lt;li&gt;子系统的实现变更（重构、重写）的代价（负担）会很小，代码质量会越来越好。&lt;/li&gt;
&lt;li&gt;容易定位造成 bug 的子系统。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;心情舒坦，利于长寿&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;代码质量&quot;&gt;代码质量&lt;/h2&gt;
&lt;p&gt;代码质量是一件严肃的事情。所有改 (zao) 善 (ta) 代码质量的行为，都会获得回 (bao) 报 (ying) 的。&lt;/p&gt;
&lt;h3 id=&quot;潜在即是必然&quot;&gt;潜在即是必然&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一个发生概率为百万分之一的 bug ，在线上运行时是必然会发生的&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="game development" scheme="http://blog.kezhuw.name/tags/game-development/"/>
    
  </entry>
  
  <entry>
    <title>模块和模块间的通信</title>
    <link href="http://blog.kezhuw.name/2014/05/27/modules-and-communications-between-modules/"/>
    <id>http://blog.kezhuw.name/2014/05/27/modules-and-communications-between-modules/</id>
    <published>2014-05-27T04:15:41.000Z</published>
    <updated>2014-12-21T12:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>在很早的时候，我就接触到 <a href="http://en.wikipedia.org/wiki/Algorithms_%2B_Data_Structures_%3D_Programs">Algorithms + Data Structures = Programs</a> 这样的概念。</p><p>在几年的工作之后的现今，我不认为这个等式可以表达所有的程序，也许只是我所工作的领域无法让我体会到这个等式的价值。</p><p>下面是我尝试去总结自己的经历，得到的另一个等式。</p><pre><code>模块 + 模块间的通信 = 程序modules + communications between modules = program</code></pre><p>这里的模块不应该狭义的理解为 C/C++ 语言当中的模块化概念，我把 C/C++ 语言当中的模块称之为“源码级模块”。“源码级模块”通过函数调用的方式进行通信，彼此之间是紧耦合的，在多人协作的软件开发活动中会加剧开发人员之间的沟通成本，也没法很好的适应需求变更和扩展。</p><p>与“源码级模块”对应的是“运行时模块”，其模块本身有着对应的运行时的实体表示，对外提供服务。“运行时模块”可以表现为服务器内部对其他模块提供服务的运行时实体，也可以表现为提供运行时服务的服务器。很少有语言层面的“运行时模块”的直接支持， <a href="http://www.erlang.org/">Erlang</a> 是其中之一。 Erlang 中的 process 就是一个运行时的实体，我将之视为“运行时模块”。在没有提供“运行时模块”支持的语言中，可以通过将整个程序分层，由底层提供“运行时模块”的抽象。相对于“源码级模块”，“运行时模块”具有天然的强隔离性和可扩展性。这两点可以很好的应对软件开发活动中的多人协作和需求变更。</p><p>“运行时模块”通过消息传递的方式进行通信，跨节点的支持需要对消息体进行序列化和反序列化。 Erlang 中的消息可以跨节点进行传输，</p><p>对在 C/C++ 中引入“运行时模块”的一个潜在担忧是可能会导致程序性能的下降，我的想法是承认性能的损失，为此换来的是编程模型的提升。</p><p>在软件开发中引入的大多数“抽象”和“分层”（如果不是全部）都会引起性能的损失，但是今天的大部分程序仍然是运行在“进程”和“虚拟地址空间”的抽象之上。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在很早的时候，我就接触到 &lt;a href=&quot;http://en.wikipedia.org/wiki/Algorithms_%2B_Data_Structures_%3D_Programs&quot;&gt;Algorithms + Data Structures = Programs&lt;/a&gt; 这样的概念。&lt;/p&gt;
&lt;p&gt;在几年的工作之后的现今，我不认为这个等式可以表达所有的程序，也许只是我所工作的领域无法让我体会到这个等式的价值。&lt;/p&gt;
&lt;p&gt;下面是我尝试去总结自己的经历，得到的另一个等式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;模块 + 模块间的通信 = 程序
modules + communications between modules = program
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里的模块不应该狭义的理解为 C/C++ 语言当中的模块化概念，我把 C/C++ 语言当中的模块称之为“源码级模块”。“源码级模块”通过函数调用的方式进行通信，彼此之间是紧耦合的，在多人协作的软件开发活动中会加剧开发人员之间的沟通成本，也没法很好的适应需求变更和扩展。&lt;/p&gt;
&lt;p&gt;与“源码级模块”对应的是“运行时模块”，其模块本身有着对应的运行时的实体表示，对外提供服务。“运行时模块”可以表现为服务器内部对其他模块提供服务的运行时实体，也可以表现为提供运行时服务的服务器。很少有语言层面的“运行时模块”的直接支持， &lt;a href=&quot;http://www.erlang.org/&quot;&gt;Erlang&lt;/a&gt; 是其中之一。 Erlang 中的 process 就是一个运行时的实体，我将之视为“运行时模块”。在没有提供“运行时模块”支持的语言中，可以通过将整个程序分层，由底层提供“运行时模块”的抽象。相对于“源码级模块”，“运行时模块”具有天然的强隔离性和可扩展性。这两点可以很好的应对软件开发活动中的多人协作和需求变更。&lt;/p&gt;
&lt;p&gt;“运行时模块”通过消息传递的方式进行通信，跨节点的支持需要对消息体进行序列化和反序列化。 Erlang 中的消息可以跨节点进行传输，&lt;/p&gt;
&lt;p&gt;对在 C/C++ 中引入“运行时模块”的一个潜在担忧是可能会导致程序性能的下降，我的想法是承认性能的损失，为此换来的是编程模型的提升。&lt;/p&gt;
&lt;p&gt;在软件开发中引入的大多数“抽象”和“分层”（如果不是全部）都会引起性能的损失，但是今天的大部分程序仍然是运行在“进程”和“虚拟地址空间”的抽象之上。&lt;/p&gt;
</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>bool like enumeration in C++</title>
    <link href="http://blog.kezhuw.name/2014/05/07/bool-like-enumeration_in_cpp/"/>
    <id>http://blog.kezhuw.name/2014/05/07/bool-like-enumeration_in_cpp/</id>
    <published>2014-05-07T05:12:49.000Z</published>
    <updated>2014-12-21T14:46:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Stack Overflow 上回答了一个问题： <a href="http://stackoverflow.com/questions/9874960/how-can-i-use-an-enum-class-in-a-boolean-context">How can I use an enum class in a boolean context?</a>，记录下。</p><p>C++ 11 的 <code>explicit operator bool()</code> 可以让类类型的值使用在条件语句中，但无法对 <code>enum</code> 类型提供支持。</p><p>下面是我使用的一种方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Error</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> &#123;</span><br><span class="line">        None                = <span class="number">0</span>,</span><br><span class="line">        Error1              = <span class="number">1</span>,</span><br><span class="line">        Error2              = <span class="number">2</span>,</span><br><span class="line">    &#125; Value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* implicit */</span> <span class="built_in">Error</span>(<span class="keyword">decltype</span>(Value) value = None) : <span class="built_in">Value</span>(value) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Value != None;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>==(Error a, Error b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.Value == b.Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(Error a, Error b) &#123;</span><br><span class="line">    <span class="keyword">return</span> !(a==b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Error <span class="title">lastError</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> err = <span class="built_in">lastError</span>()) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">lastError</span>().Value) &#123;</span><br><span class="line"><span class="keyword">case</span> Error::None:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Error::Error1:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">lastError</span>() == Error::Error1) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Stack Overflow 上回答了一个问题： &lt;a href=&quot;http://stackoverflow.com/questions/9874960/how-can-i-use-an-enum-class-in-a-boolean-context&quot;&gt;How can I use an enum class in a boolean context?&lt;/a&gt;，记录下。&lt;/p&gt;
&lt;p&gt;C++ 11 的 &lt;code&gt;explicit operator bool()&lt;/code&gt; 可以让类类型的值使用在条件语句中，但无法对 &lt;code&gt;enum&lt;/code&gt; 类型提供支持。&lt;/p&gt;
&lt;p&gt;下面是我使用的一种方法：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Error&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        None                = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Error1              = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Error2              = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; Value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* implicit */&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;(Value) value = None) : &lt;span class=&quot;built_in&quot;&gt;Value&lt;/span&gt;(value) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Value != None;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;==(Error a, Error b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a.Value == b.Value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;!=(Error a, Error b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !(a==b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Error &lt;span class=&quot;title&quot;&gt;lastError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; err = &lt;span class=&quot;built_in&quot;&gt;lastError&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;lastError&lt;/span&gt;().Value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Error::None:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Error::Error1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;lastError&lt;/span&gt;() == Error::Error1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</summary>
    
    
    
    
    <category term="c++" scheme="http://blog.kezhuw.name/tags/cplusplus/"/>
    
  </entry>
  
  <entry>
    <title>游戏服务器结构的设计</title>
    <link href="http://blog.kezhuw.name/2014/04/17/game-server-architecture-design/"/>
    <id>http://blog.kezhuw.name/2014/04/17/game-server-architecture-design/</id>
    <published>2014-04-17T11:57:50.000Z</published>
    <updated>2015-04-05T17:44:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>每个全局功能（需要和其他玩家交互的功能，例如聊天，公会，副本和场景等）都作为一个独立服务来做，方便扩展。这个服务可以是逻辑服务器内嵌的（如果没有与其他服务器交互的需求），也可以是一个单独的服务器，甚至一个服务器集群。</p><p>在分区游戏中，很多时候某些全局功能都作为一个功能模块内嵌到逻辑上去了，这样在某些需要服务器间玩家交互的功能时，就会很难做。例如： 如果聊天/好友服务内嵌到逻辑服务器上时，玩家如果需要与其他服务器上的好友（在跨服功能中加为好友的）通信时就会很麻烦。</p><p>大多可能有很大压力的全局功能都采用服务器集群的做法，集群中的成员：</p><ul><li>一个或多个（分层的或平行的）管理服务器，职责：<ul><li>根据某种策略（id 哈希/映射，服务器压力统计等）路由外部请求到具体的工作服务器；</li><li>工作服务器的新增（外部请求或根据工作强度向其他服务请求启动新的工作服务器）；</li><li>工作服务器的停机</li></ul></li><li>多个工作服务器，职责：<ul><li>根据请求 id，处理对应的模块实体；</li><li>向管理服务器汇报服务器压力</li></ul></li></ul><p>实现：</p><p>gate</p><ul><li>多个 gate 管理服务器，外网接入：<ul><li>由 DNS 根据线路等指向或者固定 ip，client 接入时，会根据玩家的线路和 gate 的压力情况选择适合的 gate ip:port 返回给玩家；</li><li>gate 接入，外网 ip:port 注册</li></ul></li><li>多个 gate ，外网接入：<ul><li>玩家接入，认证等等；</li><li>向 gate 管理服务器发送在线压力情况；</li><li>和在线统计服务器和逻辑服务器合作，负责玩家的登入及之后的消息中转</li></ul></li></ul><p>登入</p><ul><li><p>一个或多个在线统计服务器：</p><ul><li>如果不存在玩家记录，根据策略（id 哈希，服务器压力等）选择一个逻辑服务器供玩家登录 [player: zzz, id: xxx, ref: yyy]；</li><li>如果存在玩家记录，直接返回其所在逻辑服务器 [player: zzz, id: xxx, ref: yyy+1]（引用加1,防止逻辑服务器的错位删除）</li><li>监控逻辑服务器的状态，逻辑服务器宕机后，标记其状态为宕机，避免玩家登入时再次接入已经宕机的逻辑服务器。</li><li>做成无状态的服务，所有数据都存 Redis（这些数据都是在线玩家和所在逻辑服务器的映射，只需存在内存中），避免过多的逻辑，以及宕机后的自动恢复。 （服务与存储分开的关键是，数据能够原子的更新， Redis 的 <a href="http://redis.io/commands/eval">Lua Script</a> 都可以做到这点。当然，也可以写一个定制的内存服务程序来解决这点。）</li></ul></li><li><p>多个逻辑服务器：</p><ul><li>玩家个体逻辑的大部分功能都由该服务器实现 （如果玩家逻辑功能比较复杂，可以用动态语言+虚拟机方式实现，这样当某个玩家或某个功能出现异常时，缩小影响范围）；</li><li>在玩家登出后的有限时间内清空玩家数据，并向在线服务器（或 Redis）发送清空玩家对该服务器的引用[player: zzz, ref: yyy]</li></ul></li></ul><p>client 在 gate 完成登录认证，由 gate 向在线统计服务器发送请求选择逻辑服务器 [id: xxx, ref: yyy] ， gate 向逻辑服务器发送玩家的登入请求 [player: zzz, ref: yyy] ，玩家进入游戏。</p><p>公会：</p><p>玩家在某个服务器上登录之后，所有的公会操作请求都转发到公会的管理服务器上去， 公会管理服务器根据公会 id 将玩家的请求路由到负责该公会的工作服务器。</p><p>副本</p><ul><li>一个副本管理服务器： 选择或定位特定副本所在的副本服务器；转发玩家/副本消息包</li><li>多个副本服务器： 处理副本场景同步，副本战斗</li></ul><p>玩家创建副本：副本管理服务器根据副本服务器的压力情况将创建请求发给特定的副本服务器，并记录副本实例和副本服务器的对应关系。</p><p>玩家进入副本：找到副本对应的副本服务器，并转发玩家的请求。</p><p>聊天/好友：</p><p>玩家在某个服务器上登录之后，由所在服务器向聊天服务发送登录通知，聊天服务会加载其好友列表并通知在线好友；之后玩家的聊天信息都由其所在服务器转发到聊天服务器，由聊天服务器将聊天信息发送到目标玩家所在的逻辑服务器，再转发给玩家。</p><p>缺点： 聊天消息太多，导致逻辑服务器流量压力。 ==&gt; 优化：可以由 gate 直接转发玩家的聊天消息到聊天服务器或者通过其他线路来做即把整个聊天功能和游戏系统完全隔离（保留登录下线的协议）。</p><p>其他： 我个人认为其实游戏里面的聊天/好友做成独立服务之后，其实就是一个聊天平台，而游戏里的聊天不过是这个聊天工具里面的一个分组而已。</p><p>其他服务： 各种监控服务器: 监控特定服务的压力/宕机情况，必要情况下发出警告或向服务启动管理程序发送请求，启动某个服务。</p><p>服务启动管理程序： 根据监控服务器的请求，动态启动特定服务。</p><p>PS: 我去一家游戏公司面试，面试官让我总结下分区式游戏和 one world 游戏服务器的不同。回来后就写了这个，总的来说，我个人认为，在将全局模块服务化之后，分区式游戏服务器可以很容易的扩展并支撑 one world 游戏。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;每个全局功能（需要和其他玩家交互的功能，例如聊天，公会，副本和场景等）都作为一个独立服务来做，方便扩展。这个服务可以是逻辑服务器内嵌的（如果没有与其他服务器交互的需求），也可以是一个单独的服务器，甚至一个服务器集群。&lt;/p&gt;
&lt;p&gt;在分区游戏中，很多时候某些全局功能都作为一个功能模块内嵌到逻辑上去了，这样在某些需要服务器间玩家交互的功能时，就会很难做。例如： 如果聊天/好友服务内嵌到逻辑服务器上时，玩家如果需要与其他服务器上的好友（在跨服功能中加为好友的）通信时就会很麻烦。&lt;/p&gt;
&lt;p&gt;大多可能有很大压力的全局功能都采用服务器集群的做法，集群中的成员：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个或多个（分层的或平行的）管理服务器，职责：
&lt;ul&gt;
&lt;li&gt;根据某种策略（id 哈希/映射，服务器压力统计等）路由外部请求到具体的工作服务器；&lt;/li&gt;
&lt;li&gt;工作服务器的新增（外部请求或根据工作强度向其他服务请求启动新的工作服务器）；&lt;/li&gt;
&lt;li&gt;工作服务器的停机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多个工作服务器，职责：
&lt;ul&gt;
&lt;li&gt;根据请求 id，处理对应的模块实体；&lt;/li&gt;
&lt;li&gt;向管理服务器汇报服务器压力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;p&gt;gate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个 gate 管理服务器，外网接入：
&lt;ul&gt;
&lt;li&gt;由 DNS 根据线路等指向或者固定 ip，client 接入时，会根据玩家的线路和 gate 的压力情况选择适合的 gate ip:port 返回给玩家；&lt;/li&gt;
&lt;li&gt;gate 接入，外网 ip:port 注册&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多个 gate ，外网接入：
&lt;ul&gt;
&lt;li&gt;玩家接入，认证等等；&lt;/li&gt;
&lt;li&gt;向 gate 管理服务器发送在线压力情况；&lt;/li&gt;
&lt;li&gt;和在线统计服务器和逻辑服务器合作，负责玩家的登入及之后的消息中转&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;登入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个或多个在线统计服务器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果不存在玩家记录，根据策略（id 哈希，服务器压力等）选择一个逻辑服务器供玩家登录 [player: zzz, id: xxx, ref: yyy]；&lt;/li&gt;
&lt;li&gt;如果存在玩家记录，直接返回其所在逻辑服务器 [player: zzz, id: xxx, ref: yyy+1]（引用加1,防止逻辑服务器的错位删除）&lt;/li&gt;
&lt;li&gt;监控逻辑服务器的状态，逻辑服务器宕机后，标记其状态为宕机，避免玩家登入时再次接入已经宕机的逻辑服务器。&lt;/li&gt;
&lt;li&gt;做成无状态的服务，所有数据都存 Redis（这些数据都是在线玩家和所在逻辑服务器的映射，只需存在内存中），避免过多的逻辑，以及宕机后的自动恢复。 （服务与存储分开的关键是，数据能够原子的更新， Redis 的 &lt;a href=&quot;http://redis.io/commands/eval&quot;&gt;Lua Script&lt;/a&gt; 都可以做到这点。当然，也可以写一个定制的内存服务程序来解决这点。）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多个逻辑服务器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;玩家个体逻辑的大部分功能都由该服务器实现 （如果玩家逻辑功能比较复杂，可以用动态语言+虚拟机方式实现，这样当某个玩家或某个功能出现异常时，缩小影响范围）；&lt;/li&gt;
&lt;li&gt;在玩家登出后的有限时间内清空玩家数据，并向在线服务器（或 Redis）发送清空玩家对该服务器的引用[player: zzz, ref: yyy]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;client 在 gate 完成登录认证，由 gate 向在线统计服务器发送请求选择逻辑服务器 [id: xxx, ref: yyy] ， gate 向逻辑服务器发送玩家的登入请求 [player: zzz, ref: yyy] ，玩家进入游戏。&lt;/p&gt;</summary>
    
    
    
    
    <category term="game development" scheme="http://blog.kezhuw.name/tags/game-development/"/>
    
  </entry>
  
  <entry>
    <title>Lua coroutine 和 C# async</title>
    <link href="http://blog.kezhuw.name/2014/03/23/lua-coroutine-and-csharp-async/"/>
    <id>http://blog.kezhuw.name/2014/03/23/lua-coroutine-and-csharp-async/</id>
    <published>2014-03-23T14:45:44.000Z</published>
    <updated>2014-12-21T14:46:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lua-coroutine">Lua coroutine</h2><p>Lua coroutine 是<a href="http://en.wikipedia.org/wiki/Computer_multitasking#Cooperative_multitasking.2Ftime-sharing">协作式多任务</a>的一种实现。coroutine 经常被 C/C++ 这类没用原生轻量级多任务实现的宿主语言通过异步方式实现 Lua 层的同步调用。</p><p>这种同步调用的流程：</p><pre><code>val, err = synchronous_call_in_lua(...)    -- function call in lua coroutine    ==&gt; coroutine.yield        ==&gt; C/C++ 发起异步请求会话        ==| (time consumed)        ==| C/C++ 异步会话完成（消息/回调）    &lt;== coroutine.resumeval, err = ... -- &lt;== return from functiondo_someting(...)</code></pre><p>这个流程很像阻塞式的系统调用：</p><pre><code>n = read(fd, buf, len)        // system call in userland    ==&gt; syscallenter(...)     // in kernel mode        |=&gt; sys_read(...)     // in system call        |== kernel activity   // asynchronous wait if data is not available yet        |==    &lt;== syscallret(...)       // return from syscalln = ...                       // return from read in userland</code></pre><h2 id="C-async-await">C# async/await</h2><p>async/await 是 C# 5 引入的，用来简化异步编程的设施，其本质是由编译器实施的 <a href="http://en.wikipedia.org/wiki/Continuation-passing_style">CPS</a> 变换。</p><blockquote><p>C# 5.0 introduces the async and await keywords. These keywords let you write asynchronous code that has the same structure and simplicity as synchronous code, as well as eliminating the “plumbing” of asynchronous programming. The await keyword simplifies the attaching of continuations.</p></blockquote><p>即将如下代码：</p><pre><code>var result = await expression;statement(s);</code></pre><p>转换为：</p><pre><code>var awaiter = expression.GetAwaiter();awaiter.OnCompleted (() =&gt;&#123;    var result = awaiter.GetResult();    statement(s);&#125;);</code></pre><p>从上面的代码可以看出，这段代码是非阻塞的， <code>statement(s)</code> 是在 callback 中执行的。</p><h2 id="总结">总结</h2><p>Lua coroutine 和 C# async/await 都可以用来编写形如同步的代码。Lua coroutine 中的函数调用是同步阻塞的（从调用者角度），由 C/C++ 通过异步方式实现，其执行流程和一般的同步阻塞的系统调用类似。C# async/await 则是由编译器实施的 CPS 变换，是异步非阻塞的。</p><p>下面一段 C# 代码的流程，如果由 Lua 编写，输出顺序则相反。</p><pre><code>//Title of this code//Rextester.Program.Main is the entry point for your code. Don't change it.using System;using System.Threading;using System.Threading.Tasks;namespace Rextester &#123;    public class Program    &#123;        static readonly CountdownEvent _countdown = new CountdownEvent(1);        static int _value = 5;        public static void Main(string[] args)        &#123;            delay(10);            dump(&quot;return from delay()&quot;);            _value = 10;            _countdown.Wait();        &#125;        async static void delay(int msecs) &#123;            await Task.Delay(msecs);            dump(&quot;in delay():&quot;);            _countdown.Signal();        &#125;        static void dump(string prefix) &#123;            Console.WriteLine(&quot;&#123;0&#125;: value = &#123;1&#125;&quot;, prefix, _value);        &#125;    &#125;&#125;</code></pre><p>输出： return from delay(): value = 5 in delay():: value = 10</p><h2 id="阅读">阅读</h2><ul><li>C# 5.0 in a Nutshell</li><li><a href="http://www.zhihu.com/question/19732473/answer/20851256">怎样理解阻塞非阻塞与同步异步的区别</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Lua-coroutine&quot;&gt;Lua coroutine&lt;/h2&gt;
&lt;p&gt;Lua coroutine 是&lt;a href=&quot;http://en.wikipedia.org/wiki/Computer_multitasking#Cooperative_multitasking.2Ftime-sharing&quot;&gt;协作式多任务&lt;/a&gt;的一种实现。coroutine 经常被 C/C++ 这类没用原生轻量级多任务实现的宿主语言通过异步方式实现 Lua 层的同步调用。&lt;/p&gt;
&lt;p&gt;这种同步调用的流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;val, err = synchronous_call_in_lua(...)    -- function call in lua coroutine
    ==&amp;gt; coroutine.yield
        ==&amp;gt; C/C++ 发起异步请求会话
        ==| (time consumed)
        ==| C/C++ 异步会话完成（消息/回调）
    &amp;lt;== coroutine.resume
val, err = ... -- &amp;lt;== return from function
do_someting(...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个流程很像阻塞式的系统调用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n = read(fd, buf, len)        // system call in userland
    ==&amp;gt; syscallenter(...)     // in kernel mode
        |=&amp;gt; sys_read(...)     // in system call
        |== kernel activity   // asynchronous wait if data is not available yet
        |==
    &amp;lt;== syscallret(...)       // return from syscall
n = ...                       // return from read in userland
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;C-async-await&quot;&gt;C# async/await&lt;/h2&gt;
&lt;p&gt;async/await 是 C# 5 引入的，用来简化异步编程的设施，其本质是由编译器实施的 &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;CPS&lt;/a&gt; 变换。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C# 5.0 introduces the async and await keywords. These keywords let you write asynchronous code that has the same structure and simplicity as synchronous code, as well as eliminating the “plumbing” of asynchronous programming. The await keyword simplifies the attaching of continuations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即将如下代码：&lt;/p&gt;</summary>
    
    
    
    
    <category term="lua" scheme="http://blog.kezhuw.name/tags/lua/"/>
    
    <category term="coroutine" scheme="http://blog.kezhuw.name/tags/coroutine/"/>
    
    <category term="c#" scheme="http://blog.kezhuw.name/tags/csharp/"/>
    
  </entry>
  
  <entry>
    <title>两参数版本的 std::accumulate</title>
    <link href="http://blog.kezhuw.name/2013/12/14/two-arguments-version-accumulate/"/>
    <id>http://blog.kezhuw.name/2013/12/14/two-arguments-version-accumulate/</id>
    <published>2013-12-13T19:08:37.000Z</published>
    <updated>2014-12-21T14:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>C++11 的 auto 和 decltype 可以做 “返回值类型推断”。</p><p>我写了个两参数版本的 <a href="https://github.com/kezhuw/recipes/blob/master/cpp/accumulate.cpp">std::accumulate</a> 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> std &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIt&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">accumulate</span><span class="params">(InputIt begin, InputIt end)</span> -&gt; <span class="keyword">typename</span> std::remove_reference&lt;<span class="title">decltype</span><span class="params">(*begin)</span>&gt;::type </span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::remove_reference&lt;<span class="keyword">decltype</span>(*begin)&gt;::type ValueType;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">accumulate</span>(begin, end, <span class="built_in">ValueType</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配上点测试代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ValueType&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(std::vector&lt;ValueType&gt; <span class="type">const</span>&amp; v)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;=========================n&quot;</span>;</span><br><span class="line">    std::<span class="built_in">copy</span>(std::<span class="built_in">begin</span>(v), std::<span class="built_in">end</span>(v), std::<span class="built_in">ostream_iterator</span>&lt;ValueType&gt;(std::cout, <span class="string">&quot;, &quot;</span>));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> sum = std::<span class="built_in">accumulate</span>(std::<span class="built_in">begin</span>(v), std::<span class="built_in">end</span>(v));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; <span class="string">&quot;n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;=========================nn&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ValueType&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(std::initializer_list&lt;ValueType&gt;&amp;&amp; values)</span> </span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;ValueType&gt; <span class="title">v</span><span class="params">(std::forward&lt;std::initializer_list&lt;ValueType&gt;&gt;(values))</span></span>;</span><br><span class="line">    <span class="built_in">test</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>&lt;<span class="type">int</span>&gt;(std::vector&lt;<span class="type">int</span>&gt;&#123;&#125;);</span><br><span class="line">    <span class="built_in">test</span>&lt;<span class="type">int</span>&gt;(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br><span class="line">    <span class="built_in">test</span>&lt;<span class="type">int</span>&gt;(std::vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line">    <span class="built_in">test</span>&lt;<span class="type">double</span>&gt;(&#123;<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>&#125;);</span><br><span class="line">    <span class="built_in">test</span>&lt;std::string&gt;(&#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>&#125;);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;cpp : &quot;</span> &lt;&lt; __cplusplus &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EOF</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++11 的 auto 和 decltype 可以做 “返回值类型推断”。&lt;/p&gt;
&lt;p&gt;我写了个两参数版本的 &lt;a href=&quot;https://github.com/kezhuw/recipes/blob/master/cpp/accumulate.cpp&quot;&gt;std::accumulate&lt;/a&gt; 。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;numeric&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; std &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; InputIt&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accumulate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(InputIt begin, InputIt end)&lt;/span&gt; -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; std::remove_reference&amp;lt;&lt;span class=&quot;title&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*begin)&lt;/span&gt;&amp;gt;::type &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; std::remove_reference&amp;lt;&lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;(*begin)&amp;gt;::type ValueType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;accumulate&lt;/span&gt;(begin, end, &lt;span class=&quot;built_in&quot;&gt;ValueType&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配上点测试代码。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;initializer_list&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; ValueType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(std::vector&amp;lt;ValueType&amp;gt; &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt;&amp;amp; v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;=========================n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(std::&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;(v), std::&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;(v), std::&lt;span class=&quot;built_in&quot;&gt;ostream_iterator&lt;/span&gt;&amp;lt;ValueType&amp;gt;(std::cout, &lt;span class=&quot;string&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; sum = std::&lt;span class=&quot;built_in&quot;&gt;accumulate&lt;/span&gt;(std::&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;(v), std::&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;(v));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;sum = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;=========================nn&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; ValueType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(std::initializer_list&amp;lt;ValueType&amp;gt;&amp;amp;&amp;amp; values)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;std::vector&amp;lt;ValueType&amp;gt; &lt;span class=&quot;title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(std::forward&amp;lt;std::initializer_list&amp;lt;ValueType&amp;gt;&amp;gt;(values))&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;(std::vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;(&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;(std::vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;&amp;gt;(&amp;#123;&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.3&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&amp;lt;std::string&amp;gt;(&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;bb&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;cpp : &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; __cplusplus &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;EOF&lt;/p&gt;
</summary>
    
    
    
    
    <category term="c++" scheme="http://blog.kezhuw.name/tags/cplusplus/"/>
    
  </entry>
  
  <entry>
    <title>游戏掉落表设计</title>
    <link href="http://blog.kezhuw.name/2013/12/01/game-drop-item/"/>
    <id>http://blog.kezhuw.name/2013/12/01/game-drop-item/</id>
    <published>2013-12-01T04:18:31.000Z</published>
    <updated>2015-04-05T17:45:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>游戏中各种怪物都会有自己的掉落物品列表。</p><p>最原始的掉落列表设计可能就是，掉落金钱，掉落经验，掉落物品1（id + 数量），掉落物品2 …… 。我觉得这样的掉落表设计不够灵活，不能很好的对不同种类（分类？）的物品做不同的处理。</p><p>一种更好的掉落表可能是这样的：掉落分类1，掉落 id 1，掉落数量1，掉落分类2，掉落 id 2，掉落数量2，……</p><p>这样程序可以对不同的掉落分类进行不同的处理，并且 id 的含义可以局限于分类之下，例如：可以将“分类1”视为虚拟物品，“分类2”视为普通物品，“分类3”视为某种特殊物品，等等。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;游戏中各种怪物都会有自己的掉落物品列表。&lt;/p&gt;
&lt;p&gt;最原始的掉落列表设计可能就是，掉落金钱，掉落经验，掉落物品1（id + 数量），掉落物品2 …… 。我觉得这样的掉落表设计不够灵活，不能很好的对不同种类（分类？）的物品做不同的处理。&lt;/p&gt;
&lt;p&gt;一种更好的掉落表可能是这样的：掉落分类1，掉落 id 1，掉落数量1，掉落分类2，掉落 id 2，掉落数量2，……&lt;/p&gt;
&lt;p&gt;这样程序可以对不同的掉落分类进行不同的处理，并且 id 的含义可以局限于分类之下，例如：可以将“分类1”视为虚拟物品，“分类2”视为普通物品，“分类3”视为某种特殊物品，等等。&lt;/p&gt;
</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>地址常量表达式</title>
    <link href="http://blog.kezhuw.name/2013/07/15/address-const-expression/"/>
    <id>http://blog.kezhuw.name/2013/07/15/address-const-expression/</id>
    <published>2013-07-14T23:07:58.000Z</published>
    <updated>2014-12-21T12:45:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>C 语言中具有静态生存周期的变量的初始化器必须是常量表达式。当初始化器不是常量表达式时，gcc 和 clang 的报错信息不尽相同。</p><p>gcc 的报错信息是 <q>error: initializer element is not constant</q> clang 的报错信息是 <q>error: initializer element is not a compile-time constant</q></p><p>clang 用的是“编译时常量”(compile-time constant)，实际上 C99 标准里没有“编译时常量”这个概念，只有“常量表达式”。</p><blockquote><p>A constant expression can be evaluated during translation rather than runtime, and accordingly may be used in any place that a constant may be.</p></blockquote><p>C99 规定了初始化器中可用的常量表达式：</p><blockquote><p>More latitude is permitted for constant expressions in initializers. Such a constant expression shall be, or evaluate to, one of the following:</p><ul><li>— an arithmetic constant expression,</li><li>— a null pointer constant,</li><li>— an address constant, or</li><li>— an address constant for an object type plus or minus an integer constant expression.</li></ul><p>An address constant is a null pointer, a pointer to an lvalue designating an object of static storage duration, or a pointer to a function designator; it shall be created explicitly using the unary &amp; operator or an integer constant cast to pointer type, or implicitly by the use of an expression of array or function type. The array-subscript [] and member-access . and -&gt; operators, the address &amp; and indirection * unary operators, and pointer casts may be used in the creation of an address constant, but the value of an object shall not be accessed by use of these operators.</p></blockquote><p>也就是说，你可以在初始化器中使用变量、变量的成员和函数的地址，也可以在地址的基础上加上个偏移量。</p><p>“address constant” 不能算作 “compile-time constant”。 尽管编译器可能在生成 ELF 文件之时，就决定了变量的虚拟地址，但在作为共享库 (shared library) 被加载时或其他情况下，这些变量的虚拟地址最终还需要加载器 (loader) 的调整。对于这些变量地址的引用，需要加载器的重定位功能。</p><p>c99 标准对于 “address constant” 的运算只规定了可以加减整数常量表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">uintptr_t</span> addr = (<span class="type">uintptr_t</span>)<span class="built_in">malloc</span> + (<span class="type">uintptr_t</span>)<span class="built_in">free</span> + <span class="number">0x2345</span>;</span><br></pre></td></tr></table></figure><p>gcc/clang 都不支持上面这种用法。其实上面这种情况可以通过对 &amp;addr 这个位置进行累积的重定位做到 （Elf_Rel/Elf64_Rel 的 r_addend 存储在 &amp;addr 这个位置)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 64bit machine</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">uintptr_t</span> addr = (<span class="type">uint32_t</span>)<span class="built_in">malloc</span>;</span><br></pre></td></tr></table></figure><p>这种情况，gcc 给出的错误信息是 <q>error: initializer element is not computable at load time</q></p><p>右值（地址， 64 位）需要在重定位后强制转换为 32 位整数，再赋值给左值（ 64 位）。要支持这样情况的话，可能需要 ELF 的重定位信息支持。</p><p>编译器的版本： clang version 3.3 gcc version 4.8.1</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;C 语言中具有静态生存周期的变量的初始化器必须是常量表达式。当初始化器不是常量表达式时，gcc 和 clang 的报错信息不尽相同。&lt;/p&gt;
&lt;p&gt;gcc 的报错信息是 &lt;q&gt;error: initializer element is not constant&lt;/q&gt; clang 的报错信息是 &lt;q&gt;error: initializer element is not a compile-time constant&lt;/q&gt;&lt;/p&gt;
&lt;p&gt;clang 用的是“编译时常量”(compile-time constant)，实际上 C99 标准里没有“编译时常量”这个概念，只有“常量表达式”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A constant expression can be evaluated during translation rather than runtime, and accordingly may be used in any place that a constant may be.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;C99 规定了初始化器中可用的常量表达式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;More latitude is permitted for constant expressions in initializers. Such a constant expression shall be, or evaluate to, one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;— an arithmetic constant expression,&lt;/li&gt;
&lt;li&gt;— a null pointer constant,&lt;/li&gt;
&lt;li&gt;— an address constant, or&lt;/li&gt;
&lt;li&gt;— an address constant for an object type plus or minus an integer constant expression.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An address constant is a null pointer, a pointer to an lvalue designating an object of static storage duration, or a pointer to a function designator; it shall be created explicitly using the unary &amp;amp; operator or an integer constant cast to pointer type, or implicitly by the use of an expression of array or function type. The array-subscript [] and member-access . and -&amp;gt; operators, the address &amp;amp; and indirection * unary operators, and pointer casts may be used in the creation of an address constant, but the value of an object shall not be accessed by use of these operators.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，你可以在初始化器中使用变量、变量的成员和函数的地址，也可以在地址的基础上加上个偏移量。&lt;/p&gt;
&lt;p&gt;“address constant” 不能算作 “compile-time constant”。 尽管编译器可能在生成 ELF 文件之时，就决定了变量的虚拟地址，但在作为共享库 (shared library) 被加载时或其他情况下，这些变量的虚拟地址最终还需要加载器 (loader) 的调整。对于这些变量地址的引用，需要加载器的重定位功能。&lt;/p&gt;
&lt;p&gt;c99 标准对于 “address constant” 的运算只规定了可以加减整数常量表达式。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;uintptr_t&lt;/span&gt; addr = (&lt;span class=&quot;type&quot;&gt;uintptr_t&lt;/span&gt;)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt; + (&lt;span class=&quot;type&quot;&gt;uintptr_t&lt;/span&gt;)&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0x2345&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>C++ 经验谈</title>
    <link href="http://blog.kezhuw.name/2013/05/31/cpp-experience/"/>
    <id>http://blog.kezhuw.name/2013/05/31/cpp-experience/</id>
    <published>2013-05-30T18:34:02.000Z</published>
    <updated>2014-12-21T14:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习一门新的语言时，我觉得最重要的是学习该语言的惯例用法(idioms)，即其编程范式。</p><p>很遗憾的是 C++ 是一门日渐进化并且日趋复杂的语言，是一个具有多重编程范型的语言，被视为一个语言联邦<a href="http://blog.csdn.net/myan/article/details/1778843">1</a>。</p><p>即使这样，我认为在日常 C++ 编程时，也应该选择一个相对固定的编程模型，实验并改进之。</p><p>在用 C++ 编程时，应该尽量保持谦卑、进取与怀疑。</p><p>下面主要记录一下我写 C++ 的不长的时间里的一些经验。</p><h2 id="避免编译时依赖。">避免编译时依赖。</h2><p>C++ 没有现代的 package, import 机制，而是使用了继承自 C 的 <code>#include</code> 头文件包含机制。C++ 的复杂和 C 的编译模型导致了 C++ 项目冗长的编译时间。在其他语言中 import/require 可以解决的问题，在 C++ 中必须要程序员自己付出努力。[2]</p><p>隐式 (implicit) 的编译依赖不像头文件依赖会导致编译期的错误，却会在运行期招致不可预估的致命错误。比如，当你在编译单元 CompilationUnitA 中 <code>p = new(CompilationUnitB::ClassB)</code> 时，你已经埋下了一颗地雷。以后当你改变 CompilationUnitB::ClassB 的成员而导致其大小 (size) 变化时，你编译 CompilationUnitB ，链接 CompilationUnitA ，运行，然后不知何时那颗地雷就会炸掉。我觉得就 <code>new</code> 的编译期行为，C++ 能做的更好，也应该做的更好。好吧，永远不要跨编译单元调用 <code>new</code> 。</p><p>虚函数调用、跨编译单元的栈上变量/全局变量同样是隐式的编译依赖。</p><h2 id="跨编译单元（-so-dll-lib）时，区分接口与实现-同一编译单元内，不过度区分接口与实现。">跨编译单元（.so, .dll, .lib）时，区分接口与实现;同一编译单元内，不过度区分接口与实现。</h2><p>不同的编译单元应该不存在实现依赖，例如： UnitA::ClassA 不应该 依赖于 UnitB::ClassB 的内存大小。UnitA 的头文件 UnitA.h 主要的用途是暴露 (export) UnitA 的接口，如 UnitA::ClassA 中的接口函数。受限于 C++ 对接口与实现之间的支持，UnitA.h 头文件可能写有 UnitA::ClassA 基于当前实现的某些私有数据，但其他编译单元不应依赖之。</p><p>跨编译单元的接口不应该是虚函数</p><p>跨编译单元的类应该提供显示的创建函数，并尽可能返回引用类型 (std::shared_ptr, etc.)。</p><h2 id="以小的、具体的类代替模板（成员）变量（集合）。">以小的、具体的类代替模板（成员）变量（集合）。</h2><p>你自己写的类，你可以限制其暴露的接口数量，以及取更有意义的接口名称。比如： <code>std::vector&lt;uint64&gt; repo;</code> 可以改成 <code>class Repository repo;</code> 。这会多一点代码，但我乐于如此，特别当 <code>repo</code> 需要一些辅助信息时，更是如此，保持上级类的干净。</p><h2 id="多用库，善用-STL-和-boost-。">多用库，善用 STL 和 boost 。</h2><p>C++ 的基础库基本上都是模板库，需要根据适用场景进行再封装。</p><h2 id="拒绝复杂。">拒绝复杂。</h2><p>C++ 已经很复杂了，别把自己搞晕了。只要能避免 C++ 的很多坑，就已经很不错了。</p><p><a href="http://blog.csdn.net/myan/article/details/1778843">1</a> 《Effective C++ 中文版》 第三版 条款01：视 C++ 为一个语言联邦<br>[2] 《Effective C++ 中文版》 第三版 条款31：将文件间的编译依存关系降至最低</p><p>推荐阅读： 孟岩 <a href="http://blog.csdn.net/myan/article/details/1778843">用C设计，用C++编码</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习一门新的语言时，我觉得最重要的是学习该语言的惯例用法(idioms)，即其编程范式。&lt;/p&gt;
&lt;p&gt;很遗憾的是 C++ 是一门日渐进化并且日趋复杂的语言，是一个具有多重编程范型的语言，被视为一个语言联邦&lt;a href=&quot;http://blog.csdn.net/myan/article/details/1778843&quot;&gt;1&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;即使这样，我认为在日常 C++ 编程时，也应该选择一个相对固定的编程模型，实验并改进之。&lt;/p&gt;
&lt;p&gt;在用 C++ 编程时，应该尽量保持谦卑、进取与怀疑。&lt;/p&gt;
&lt;p&gt;下面主要记录一下我写 C++ 的不长的时间里的一些经验。&lt;/p&gt;
&lt;h2 id=&quot;避免编译时依赖。&quot;&gt;避免编译时依赖。&lt;/h2&gt;
&lt;p&gt;C++ 没有现代的 package, import 机制，而是使用了继承自 C 的 &lt;code&gt;#include&lt;/code&gt; 头文件包含机制。C++ 的复杂和 C 的编译模型导致了 C++ 项目冗长的编译时间。在其他语言中 import/require 可以解决的问题，在 C++ 中必须要程序员自己付出努力。[2]&lt;/p&gt;
&lt;p&gt;隐式 (implicit) 的编译依赖不像头文件依赖会导致编译期的错误，却会在运行期招致不可预估的致命错误。比如，当你在编译单元 CompilationUnitA 中 &lt;code&gt;p = new(CompilationUnitB::ClassB)&lt;/code&gt; 时，你已经埋下了一颗地雷。以后当你改变 CompilationUnitB::ClassB 的成员而导致其大小 (size) 变化时，你编译 CompilationUnitB ，链接 CompilationUnitA ，运行，然后不知何时那颗地雷就会炸掉。我觉得就 &lt;code&gt;new&lt;/code&gt; 的编译期行为，C++ 能做的更好，也应该做的更好。好吧，永远不要跨编译单元调用 &lt;code&gt;new&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;虚函数调用、跨编译单元的栈上变量/全局变量同样是隐式的编译依赖。&lt;/p&gt;
&lt;h2 id=&quot;跨编译单元（-so-dll-lib）时，区分接口与实现-同一编译单元内，不过度区分接口与实现。&quot;&gt;跨编译单元（.so, .dll, .lib）时，区分接口与实现;同一编译单元内，不过度区分接口与实现。&lt;/h2&gt;</summary>
    
    
    
    
    <category term="c++" scheme="http://blog.kezhuw.name/tags/cplusplus/"/>
    
  </entry>
  
  <entry>
    <title>C++ 接口与实现</title>
    <link href="http://blog.kezhuw.name/2013/03/23/cpp-interface-implementation/"/>
    <id>http://blog.kezhuw.name/2013/03/23/cpp-interface-implementation/</id>
    <published>2013-03-23T02:35:07.000Z</published>
    <updated>2014-12-21T14:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>封装是 C++ 面向对象三大特性之一。C++ 通过将数据和对数据操作的函数绑定在一个类里来表达封装。从字面意义和 C++ 的历史(C with class)来看，封装对于 C++ 来说是根本的。</p><p>《代码大全2》6.2节 中提到了一个良好的封装应该“避免把私有的实现细节放入类的接口中”，并介绍了 《Effective C++》 中提到的 pImpl 惯用技法。</p><p>在我看来 C++ 中类的实现方式明显无法很好的表达封装，只是粗暴的将函数及其操作的数据绑在一起，而忽视了可见性的控制。C++ 对运行时性能苛求可能是其罪魁祸首。</p><p>实际上我认为封装从根本上就是一个错误的观点，数据和对数据操作的函数从来就不是一个整体。</p><p>好吧，本文要说只是另一种定义 C++ 类的方式，类似 Objective-C 类的 interface/implementation 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo_interface.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/noncopyable.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> foo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Interface</span> : boost::noncopyable &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Bar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;foo_interface.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/shared_ptr.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> foo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> boost::shared_ptr&lt;Interface&gt; Reference;</span><br><span class="line"></span><br><span class="line"><span class="function">Reference <span class="title">New</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;foo.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> foo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">implementation</span> : <span class="keyword">public</span> Interface &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bar0</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">implementation</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> priv_data0;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Interface::Bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">BOOST_AUTO</span>(impl, <span class="built_in">static_cast</span>&lt;implementation&gt;(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">return</span> impl-&gt;<span class="built_in">Bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Reference <span class="title">New</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reference</span>(<span class="keyword">new</span> <span class="built_in">implementation</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>foo::Interface 中只包含 foo 对外提供的接口函数，没有数据成员。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;封装是 C++ 面向对象三大特性之一。C++ 通过将数据和对数据操作的函数绑定在一个类里来表达封装。从字面意义和 C++ 的历史(C with class)来看，封装对于 C++ 来说是根本的。&lt;/p&gt;
&lt;p&gt;《代码大全2》6.2节 中提到了一个良好的封装应该“避免把私有的实现细节放入类的接口中”，并介绍了 《Effective C++》 中提到的 pImpl 惯用技法。&lt;/p&gt;
&lt;p&gt;在我看来 C++ 中类的实现方式明显无法很好的表达封装，只是粗暴的将函数及其操作的数据绑在一起，而忽视了可见性的控制。C++ 对运行时性能苛求可能是其罪魁祸首。&lt;/p&gt;
&lt;p&gt;实际上我认为封装从根本上就是一个错误的观点，数据和对数据操作的函数从来就不是一个整体。&lt;/p&gt;
&lt;p&gt;好吧，本文要说只是另一种定义 C++ 类的方式，类似 Objective-C 类的 interface/implementation 。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// foo_interface.hpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;boost/noncopyable.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Interface&lt;/span&gt; : boost::noncopyable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// foo.hpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;foo_interface.hpp&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; boost::shared_ptr&amp;lt;Interface&amp;gt; Reference;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Reference &lt;span class=&quot;title&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// foo.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;foo.hpp&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;implementation&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Interface &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;bar0&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;implementation&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; priv_data0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar0&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Interface::Bar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOST_AUTO&lt;/span&gt;(impl, &lt;span class=&quot;built_in&quot;&gt;static_cast&lt;/span&gt;&amp;lt;implementation&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; impl-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;Bar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Reference &lt;span class=&quot;title&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Reference&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;implementation&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;foo::Interface 中只包含 foo 对外提供的接口函数，没有数据成员。&lt;/p&gt;
</summary>
    
    
    
    
    <category term="c++" scheme="http://blog.kezhuw.name/tags/cplusplus/"/>
    
  </entry>
  
  <entry>
    <title>zeromq atomic msg</title>
    <link href="http://blog.kezhuw.name/2012/04/10/zeromq-atomic-msg/"/>
    <id>http://blog.kezhuw.name/2012/04/10/zeromq-atomic-msg/</id>
    <published>2012-04-10T05:04:47.000Z</published>
    <updated>2014-12-21T12:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>先引用一下，0mq manual 的话：<br>0MQ ensures atomic delivery of messages; peers shall receive either all message parts of a message or none at all.</p><p>在 0mq 中最终数据的发送和接收是由 encoder_t 和 decoder_t 负责包装。他们都是由 io 线程调用，从应用发送 zmq_msg_t 的管道中取得数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">ypipe_t</span> &lt; <span class="type">zmq_msg_t</span>, message_pipe_granularity &gt; <span class="type">pipe_t</span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Lock-free queue implementation.</span></span><br><span class="line"><span class="comment">//  Only a single thread can read from the pipe at any specific moment.</span></span><br><span class="line"><span class="comment">//  Only a single thread can write to the pipe at any specific moment.</span></span><br><span class="line"><span class="comment">//  T is the type of the object in the queue.</span></span><br><span class="line"><span class="comment">//  N is granularity of the pipe, i.e. how many items are needed to</span></span><br><span class="line"><span class="comment">//  perform next memory allocation.</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Write an item to the pipe.  Don&#x27;t flush it yet. If incomplete is</span></span><br><span class="line"><span class="comment">//  set to true the item is assumed to be continued by items</span></span><br><span class="line"><span class="comment">//  subsequently written to the pipe. Incomplete items are never</span></span><br><span class="line"><span class="comment">//  flushed down the stream.</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span> <span class="params">(<span class="type">const</span> T &amp;value_, <span class="type">bool</span> incomplete_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//  Place the value to the queue, add new terminator element.</span></span><br><span class="line">    queue.<span class="built_in">back</span> () = value_;</span><br><span class="line">    queue.<span class="built_in">push</span> ();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Move the &quot;flush up to here&quot; poiter.</span></span><br><span class="line">    <span class="keyword">if</span> (!incomplete_)</span><br><span class="line">f = &amp;queue.<span class="built_in">back</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>write 函数的 incomplete_ 参数由外部的包装函数根据 ZMQ_SNDMORE 标志决定。只有当 multipart message 的最后一部分写入管道时，f 才会更新。当 encoder_t 读取 zmq_msg_t ，准备发送时，他不会读到一个未全部写完的 multipart message。decoder_t 从网络上接收数据后，在未读到最好一个部分时不会更新 f。</p><p>其实 ypipe_t 是个挺有意思的两端可以同时允许一个线程读、一个线程写的 lock-free 的数据结构实现。</p><p>没什么好写的啊，看代码就OVER了。凑数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先引用一下，0mq manual 的话：&lt;br&gt;
0MQ ensures atomic delivery of messages; peers shall receive either all message parts of a message or none at all.&lt;/p&gt;
&lt;p&gt;在 0mq 中最终数据的发送和接收是由 encoder_t 和 decoder_t 负责包装。他们都是由 io 线程调用，从应用发送 zmq_msg_t 的管道中取得数据。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ypipe_t&lt;/span&gt; &amp;lt; &lt;span class=&quot;type&quot;&gt;zmq_msg_t&lt;/span&gt;, message_pipe_granularity &amp;gt; &lt;span class=&quot;type&quot;&gt;pipe_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Lock-free queue implementation.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Only a single thread can read from the pipe at any specific moment.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Only a single thread can write to the pipe at any specific moment.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  T is the type of the object in the queue.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  N is granularity of the pipe, i.e. how many items are needed to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  perform next memory allocation.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Write an item to the pipe.  Don&amp;#x27;t flush it yet. If incomplete is&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  set to true the item is assumed to be continued by items&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  subsequently written to the pipe. Incomplete items are never&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  flushed down the stream.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; T &amp;amp;value_, &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; incomplete_)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Place the value to the queue, add new terminator element.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queue.&lt;span class=&quot;built_in&quot;&gt;back&lt;/span&gt; () = value_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queue.&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Move the &amp;quot;flush up to here&amp;quot; poiter.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!incomplete_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f = &amp;amp;queue.&lt;span class=&quot;built_in&quot;&gt;back&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;write 函数的 incomplete_ 参数由外部的包装函数根据 ZMQ_SNDMORE 标志决定。只有当 multipart message 的最后一部分写入管道时，f 才会更新。当 encoder_t 读取 zmq_msg_t ，准备发送时，他不会读到一个未全部写完的 multipart message。decoder_t 从网络上接收数据后，在未读到最好一个部分时不会更新 f。&lt;/p&gt;
&lt;p&gt;其实 ypipe_t 是个挺有意思的两端可以同时允许一个线程读、一个线程写的 lock-free 的数据结构实现。&lt;/p&gt;
&lt;p&gt;没什么好写的啊，看代码就OVER了。凑数。&lt;/p&gt;
</summary>
    
    
    
    
    <category term="zeromq" scheme="http://blog.kezhuw.name/tags/zeromq/"/>
    
  </entry>
  
  <entry>
    <title>zeromq nonblocking</title>
    <link href="http://blog.kezhuw.name/2012/04/01/zeromq-nonblocking/"/>
    <id>http://blog.kezhuw.name/2012/04/01/zeromq-nonblocking/</id>
    <published>2012-04-01T06:40:50.000Z</published>
    <updated>2014-12-21T12:41:56.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Virtual interface to be exposed by object that want to be notified</span></span><br><span class="line"><span class="comment">// about events on file descriptors.</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">i_poll_events</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">i_poll_events</span> () &#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Called by I/O thread when file descriptor is ready for reading.</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">in_event</span> <span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Called by I/O thread when file descriptor is ready for writing.</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">out_event</span> <span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Called when timer expires.</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">timer_event</span> <span class="params">(<span class="type">int</span> id_)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>0mq 中实现（或部分实现）了这些接口的类包括： io_thread_t, reaper_t, zmq_connect_t, zmq_listener_t, zmq_engine_t等。</p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Virtual interface to be exposed by object that want to be notified&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// about events on file descriptors.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;i_poll_events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;built_in&quot;&gt;i_poll_events&lt;/span&gt; () &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Called by I/O thread when file descriptor is ready for reading.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;in_event&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Called by I/O thread when file descriptor is ready for writing.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;out_event&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Called when timer expires.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timer_event&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; id_)&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;0mq 中实现（或部分实现）了这些接口的类包括： io_thread_t, reaper_t, zmq_connect_t, zmq_listener_t, zmq_engine_t等。&lt;/p&gt;
</summary>
    
    
    
    
    <category term="zeromq" scheme="http://blog.kezhuw.name/tags/zeromq/"/>
    
  </entry>
  
  <entry>
    <title>zeromq bind</title>
    <link href="http://blog.kezhuw.name/2012/03/09/zeromq-bind/"/>
    <id>http://blog.kezhuw.name/2012/03/09/zeromq-bind/</id>
    <published>2012-03-08T20:42:46.000Z</published>
    <updated>2014-12-21T12:41:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里只看tcp/ipc部分，下面代码摘自socket_base_t的bind函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (protocol == <span class="string">&quot;tcp&quot;</span> || protocol == <span class="string">&quot;ipc&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Choose I/O thread to run the listerner in.</span></span><br><span class="line">        <span class="type">io_thread_t</span> *io_thread = <span class="built_in">choose_io_thread</span> (options.affinity);</span><br><span class="line">        <span class="keyword">if</span> (!io_thread) &#123;</span><br><span class="line">            errno = EMTHREAD;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Create and run the listener.</span></span><br><span class="line">        <span class="type">zmq_listener_t</span> *listener = <span class="built_in">new</span> (std::nothrow) <span class="built_in">zmq_listener_t</span> (</span><br><span class="line">            io_thread, <span class="keyword">this</span>, options);</span><br><span class="line">        <span class="built_in">alloc_assert</span> (listener);</span><br><span class="line">        <span class="type">int</span> rc = listener-&gt;<span class="built_in">set_address</span> (protocol.<span class="built_in">c_str</span>(), address.<span class="built_in">c_str</span> ());</span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> listener;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">launch_child</span> (listener);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>bind创建一个zmq_listener_t挂到socket上去了。zmq_listener_t在其set_address函数中就开始监听tcp/ipc连接。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> zmq::<span class="type">zmq_listener_t</span>::<span class="built_in">set_address</span> (<span class="type">const</span> <span class="type">char</span> *protocol_, <span class="type">const</span> <span class="type">char</span> *addr_)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">return</span> tcp_listener.<span class="built_in">set_address</span> (protocol_, addr_, options.backlog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> zmq::<span class="type">tcp_listener_t</span>::<span class="built_in">set_address</span> (<span class="type">const</span> <span class="type">char</span> *protocol_, <span class="type">const</span> <span class="type">char</span> *addr_,</span><br><span class="line">    <span class="type">int</span> backlog_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span> (protocol_, <span class="string">&quot;tcp&quot;</span>) == <span class="number">0</span> ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Resolve the sockaddr to bind to.</span></span><br><span class="line">        <span class="type">int</span> rc = <span class="built_in">resolve_ip_interface</span> (&amp;addr, &amp;addr_len, addr_);</span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Create a listening socket.</span></span><br><span class="line">        s = <span class="built_in">open_socket</span> (addr.ss_family, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Allow reusing of the address.</span></span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        rc = <span class="built_in">setsockopt</span> (s, SOL_SOCKET, SO_REUSEADDR, &amp;flag, <span class="built_in">sizeof</span> (<span class="type">int</span>));</span><br><span class="line">        <span class="built_in">errno_assert</span> (rc == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Set the non-blocking flag.</span></span><br><span class="line">    flag = <span class="built_in">fcntl</span> (s, F_GETFL, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">-1</span>)</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">    rc = <span class="built_in">fcntl</span> (s, F_SETFL, flag | O_NONBLOCK);</span><br><span class="line">        <span class="built_in">errno_assert</span> (rc != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Bind the socket to the network interface and port.</span></span><br><span class="line">        rc = <span class="built_in">bind</span> (s, (<span class="keyword">struct</span> sockaddr*) &amp;addr, addr_len);</span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> err = errno;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">close</span> () != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            errno = err;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Listen for incomming connections.</span></span><br><span class="line">        rc = <span class="built_in">listen</span> (s, backlog_);</span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> err = errno;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">close</span> () != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            errno = err;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span> (protocol_, <span class="string">&quot;ipc&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Get rid of the file associated with the UNIX domain socket that</span></span><br><span class="line">        <span class="comment">//  may have been left behind by the previous run of the application.</span></span><br><span class="line">        ::<span class="built_in">unlink</span> (addr_);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Convert the address into sockaddr_un structure.</span></span><br><span class="line">        <span class="type">int</span> rc = <span class="built_in">resolve_local_path</span> (&amp;addr, &amp;addr_len, addr_);</span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Create a listening socket.</span></span><br><span class="line">        s = <span class="built_in">socket</span> (AF_UNIX, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Set the non-blocking flag.</span></span><br><span class="line">        <span class="type">int</span> flag = <span class="built_in">fcntl</span> (s, F_GETFL, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">-1</span>) </span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        rc = <span class="built_in">fcntl</span> (s, F_SETFL, flag | O_NONBLOCK);</span><br><span class="line">        <span class="built_in">errno_assert</span> (rc != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Bind the socket to the file path.</span></span><br><span class="line">        rc = <span class="built_in">bind</span> (s, (<span class="keyword">struct</span> sockaddr*) &amp;addr, addr_len);</span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> err = errno;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">close</span> () != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            errno = err;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        has_file = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Listen for incomming connections.</span></span><br><span class="line">        rc = <span class="built_in">listen</span> (s, backlog_);</span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> err = errno;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">close</span> () != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            errno = err;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        errno = EPROTONOSUPPORT;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set_address函数用一个非阻塞的 tcp/ipc socket 去监听 tcp/ipc 连接。下面是 zmq_listener_t 的process_plug函数，这个函数被 socket_base_t 的 bind 调用的 launch_child 触发，被 io_thread 调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">zmq_listener_t</span>::<span class="built_in">process_plug</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Start polling for incoming connections.</span></span><br><span class="line">    handle = <span class="built_in">add_fd</span> (tcp_listener.<span class="built_in">get_fd</span> ());</span><br><span class="line">    <span class="built_in">set_pollin</span> (handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zmq::<span class="type">fd_t</span> zmq::<span class="type">tcp_listener_t</span>::<span class="built_in">get_fd</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>process_plug将正在进行监听的 tcp/ipc socket　加入轮询。下面看 zmq_listener_t 的 in_event 函数，该函数在有新连接请求时被调用（负责监听的 socket 可读）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">zmq_listener_t</span>::<span class="built_in">in_event</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">fd_t</span> fd = tcp_listener.<span class="built_in">accept</span> ();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  If connection was reset by the peer in the meantime, just ignore it.</span></span><br><span class="line">    <span class="comment">//  <span class="doctag">TODO:</span> Handle specific errors like ENFILE/EMFILE etc.</span></span><br><span class="line">    <span class="keyword">if</span> (fd == retired_fd)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Choose I/O thread to run connecter in. Given that we are already</span></span><br><span class="line">    <span class="comment">//  running in an I/O thread, there must be at least one available.</span></span><br><span class="line">    <span class="type">io_thread_t</span> *io_thread = <span class="built_in">choose_io_thread</span> (options.affinity);</span><br><span class="line">    <span class="built_in">zmq_assert</span> (io_thread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Create and launch an init object. </span></span><br><span class="line">    <span class="type">zmq_init_t</span> *init = <span class="built_in">new</span> (std::nothrow) <span class="built_in">zmq_init_t</span> (io_thread, socket,</span><br><span class="line">        <span class="literal">NULL</span>, fd, options);</span><br><span class="line">    <span class="built_in">alloc_assert</span> (init);</span><br><span class="line">    <span class="built_in">launch_child</span> (init);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">zmq::<span class="type">fd_t</span> zmq::<span class="type">tcp_listener_t</span>::<span class="built_in">accept</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">zmq_assert</span> (s != retired_fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Accept one incoming connection.</span></span><br><span class="line">    <span class="type">fd_t</span> sock = ::<span class="built_in">accept</span> (s, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sock == <span class="number">-1</span> &amp;&amp; </span><br><span class="line">        (errno == EAGAIN || errno == EWOULDBLOCK || </span><br><span class="line">         errno == EINTR || errno == ECONNABORTED))</span><br><span class="line">        <span class="keyword">return</span> retired_fd;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">errno_assert</span> (sock != <span class="number">-1</span>); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set to non-blocking mode.</span></span><br><span class="line">    <span class="type">int</span> flags = <span class="built_in">fcntl</span> (s, F_GETFL, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (flags == <span class="number">-1</span>)</span><br><span class="line">        flags = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> rc = <span class="built_in">fcntl</span> (sock, F_SETFL, flags | O_NONBLOCK);</span><br><span class="line">    <span class="built_in">errno_assert</span> (rc != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr</span> *sa = (<span class="keyword">struct</span> sockaddr*) &amp;addr;</span><br><span class="line">    <span class="keyword">if</span> (AF_UNIX != sa-&gt;sa_family) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Disable Nagle&#x27;s algorithm.</span></span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        rc = <span class="built_in">setsockopt</span> (sock, IPPROTO_TCP, TCP_NODELAY, (<span class="type">char</span>*) &amp;flag,</span><br><span class="line">            <span class="built_in">sizeof</span> (<span class="type">int</span>));</span><br><span class="line">        <span class="built_in">errno_assert</span> (rc == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>zmq_listener_t 的 in_event 函数为每个新连接创建一个 zmq_init_t 进行 identity 交换。当连接双方交换完 identity 后，zmq_init_t 的　dispatch_engine 函数根据对方的 identity 创建相应的 session_t 类型（named_session_t 或 transient_session_t）。具体可见 zmq_init_t 的 dispatch_engine 函数。</p><p>tcp_listener_t 的 accept 函数在 io thread 判断 listening socket 可读时调用，但其依然对其返回值进行了判断，这是因为在 accept 之前，连接可能被客户 RST 。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里只看tcp/ipc部分，下面代码摘自socket_base_t的bind函数。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (protocol == &lt;span class=&quot;string&quot;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt; || protocol == &lt;span class=&quot;string&quot;&gt;&amp;quot;ipc&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Choose I/O thread to run the listerner in.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;io_thread_t&lt;/span&gt; *io_thread = &lt;span class=&quot;built_in&quot;&gt;choose_io_thread&lt;/span&gt; (options.affinity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!io_thread) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            errno = EMTHREAD;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Create and run the listener.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;zmq_listener_t&lt;/span&gt; *listener = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; (std::nothrow) &lt;span class=&quot;built_in&quot;&gt;zmq_listener_t&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            io_thread, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;alloc_assert&lt;/span&gt; (listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rc = listener-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;set_address&lt;/span&gt; (protocol.&lt;span class=&quot;built_in&quot;&gt;c_str&lt;/span&gt;(), address.&lt;span class=&quot;built_in&quot;&gt;c_str&lt;/span&gt; ());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; listener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;launch_child&lt;/span&gt; (listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;bind创建一个zmq_listener_t挂到socket上去了。zmq_listener_t在其set_address函数中就开始监听tcp/ipc连接。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;zmq_listener_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;set_address&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *protocol_, &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *addr_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tcp_listener.&lt;span class=&quot;built_in&quot;&gt;set_address&lt;/span&gt; (protocol_, addr_, options.backlog);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;tcp_listener_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;set_address&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *protocol_, &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *addr_,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; backlog_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt; (protocol_, &lt;span class=&quot;string&quot;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Resolve the sockaddr to bind to.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rc = &lt;span class=&quot;built_in&quot;&gt;resolve_ip_interface&lt;/span&gt; (&amp;amp;addr, &amp;amp;addr_len, addr_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Create a listening socket.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s = &lt;span class=&quot;built_in&quot;&gt;open_socket&lt;/span&gt; (addr.ss_family, SOCK_STREAM, IPPROTO_TCP);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Allow reusing of the address.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flag = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rc = &lt;span class=&quot;built_in&quot;&gt;setsockopt&lt;/span&gt; (s, SOL_SOCKET, SO_REUSEADDR, &amp;amp;flag, &lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;errno_assert&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Set the non-blocking flag.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	flag = &lt;span class=&quot;built_in&quot;&gt;fcntl&lt;/span&gt; (s, F_GETFL, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (flag == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            flag = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	rc = &lt;span class=&quot;built_in&quot;&gt;fcntl&lt;/span&gt; (s, F_SETFL, flag | O_NONBLOCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;errno_assert&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Bind the socket to the network interface and port.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rc = &lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt; (s, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr*) &amp;amp;addr, addr_len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; err = errno;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt; () != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            errno = err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Listen for incomming connections.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rc = &lt;span class=&quot;built_in&quot;&gt;listen&lt;/span&gt; (s, backlog_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; err = errno;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt; () != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            errno = err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt; (protocol_, &lt;span class=&quot;string&quot;&gt;&amp;quot;ipc&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Get rid of the file associated with the UNIX domain socket that&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  may have been left behind by the previous run of the application.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ::&lt;span class=&quot;built_in&quot;&gt;unlink&lt;/span&gt; (addr_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Convert the address into sockaddr_un structure.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rc = &lt;span class=&quot;built_in&quot;&gt;resolve_local_path&lt;/span&gt; (&amp;amp;addr, &amp;amp;addr_len, addr_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Create a listening socket.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s = &lt;span class=&quot;built_in&quot;&gt;socket&lt;/span&gt; (AF_UNIX, SOCK_STREAM, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Set the non-blocking flag.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flag = &lt;span class=&quot;built_in&quot;&gt;fcntl&lt;/span&gt; (s, F_GETFL, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (flag == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            flag = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rc = &lt;span class=&quot;built_in&quot;&gt;fcntl&lt;/span&gt; (s, F_SETFL, flag | O_NONBLOCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;errno_assert&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Bind the socket to the file path.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rc = &lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt; (s, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr*) &amp;amp;addr, addr_len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; err = errno;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt; () != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            errno = err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        has_file = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Listen for incomming connections.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rc = &lt;span class=&quot;built_in&quot;&gt;listen&lt;/span&gt; (s, backlog_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; err = errno;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt; () != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            errno = err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errno = EPROTONOSUPPORT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;set_address函数用一个非阻塞的 tcp/ipc socket 去监听 tcp/ipc 连接。下面是 zmq_listener_t 的process_plug函数，这个函数被 socket_base_t 的 bind 调用的 launch_child 触发，被 io_thread 调用。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;zmq_listener_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;process_plug&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Start polling for incoming connections.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handle = &lt;span class=&quot;built_in&quot;&gt;add_fd&lt;/span&gt; (tcp_listener.&lt;span class=&quot;built_in&quot;&gt;get_fd&lt;/span&gt; ());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;set_pollin&lt;/span&gt; (handle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zmq::&lt;span class=&quot;type&quot;&gt;fd_t&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;tcp_listener_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;get_fd&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;process_plug将正在进行监听的 tcp/ipc socket　加入轮询。下面看 zmq_listener_t 的 in_event 函数，该函数在有新连接请求时被调用（负责监听的 socket 可读）。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;zmq_listener_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;in_event&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;fd_t&lt;/span&gt; fd = tcp_listener.&lt;span class=&quot;built_in&quot;&gt;accept&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  If connection was reset by the peer in the meantime, just ignore it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; Handle specific errors like ENFILE/EMFILE etc.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fd == retired_fd)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Choose I/O thread to run connecter in. Given that we are already&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  running in an I/O thread, there must be at least one available.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;io_thread_t&lt;/span&gt; *io_thread = &lt;span class=&quot;built_in&quot;&gt;choose_io_thread&lt;/span&gt; (options.affinity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (io_thread);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Create and launch an init object. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;zmq_init_t&lt;/span&gt; *init = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; (std::nothrow) &lt;span class=&quot;built_in&quot;&gt;zmq_init_t&lt;/span&gt; (io_thread, socket,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, fd, options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;alloc_assert&lt;/span&gt; (init);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;launch_child&lt;/span&gt; (init);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="zeromq" scheme="http://blog.kezhuw.name/tags/zeromq/"/>
    
  </entry>
  
  <entry>
    <title>zeromq connect</title>
    <link href="http://blog.kezhuw.name/2012/03/07/zeromq-connect/"/>
    <id>http://blog.kezhuw.name/2012/03/07/zeromq-connect/</id>
    <published>2012-03-06T23:56:12.000Z</published>
    <updated>2014-12-21T12:41:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>zmq_connect直接调用socket_base_t的connect函数。这里暂且只看tcp和ipc部分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> zmq::<span class="type">socket_base_t</span>::<span class="built_in">connect</span> (<span class="type">const</span> <span class="type">char</span> *addr_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">unlikely</span> (ctx_terminated)) &#123;</span><br><span class="line">        errno = ETERM;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Parse addr_ string.</span></span><br><span class="line">    std::string protocol;</span><br><span class="line">    std::string address;</span><br><span class="line">    <span class="type">int</span> rc = <span class="built_in">parse_uri</span> (addr_, protocol, address);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// omit...</span></span><br><span class="line">    <span class="comment">//  Parsed address for validation</span></span><br><span class="line">    sockaddr_storage addr;</span><br><span class="line">    <span class="type">socklen_t</span> addr_len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (protocol == <span class="string">&quot;tcp&quot;</span>)</span><br><span class="line">        rc = <span class="built_in">resolve_ip_hostname</span> (&amp;addr, &amp;addr_len, address.<span class="built_in">c_str</span> ());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> (protocol == <span class="string">&quot;ipc&quot;</span>)</span><br><span class="line">        rc = <span class="built_in">resolve_local_path</span> (&amp;addr, &amp;addr_len, address.<span class="built_in">c_str</span> ());</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Choose the I/O thread to run the session in.</span></span><br><span class="line">    <span class="type">io_thread_t</span> *io_thread = <span class="built_in">choose_io_thread</span> (options.affinity);</span><br><span class="line">    <span class="keyword">if</span> (!io_thread) &#123;</span><br><span class="line">        errno = EMTHREAD;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Create session.</span></span><br><span class="line">    <span class="type">connect_session_t</span> *session = <span class="built_in">new</span> (std::nothrow) <span class="built_in">connect_session_t</span> (</span><br><span class="line">        io_thread, <span class="keyword">this</span>, options, protocol.<span class="built_in">c_str</span> (), address.<span class="built_in">c_str</span> ());</span><br><span class="line">    <span class="built_in">alloc_assert</span> (session);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  If &#x27;immediate connect&#x27; feature is required, we&#x27;ll create the pipes</span></span><br><span class="line">    <span class="comment">//  to the session straight away. Otherwise, they&#x27;ll be created by the</span></span><br><span class="line">    <span class="comment">//  session once the connection is established.</span></span><br><span class="line">    <span class="keyword">if</span> (options.immediate_connect) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">reader_t</span> *inpipe_reader = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">writer_t</span> *inpipe_writer = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">reader_t</span> *outpipe_reader = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">writer_t</span> *outpipe_writer = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Create inbound pipe, if required.</span></span><br><span class="line">        <span class="keyword">if</span> (options.requires_in)</span><br><span class="line">            <span class="built_in">create_pipe</span> (<span class="keyword">this</span>, session, options.hwm, options.swap,</span><br><span class="line">                &amp;inpipe_reader, &amp;inpipe_writer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Create outbound pipe, if required.</span></span><br><span class="line">        <span class="keyword">if</span> (options.requires_out)</span><br><span class="line">            <span class="built_in">create_pipe</span> (session, <span class="keyword">this</span>, options.hwm, options.swap,</span><br><span class="line">                &amp;outpipe_reader, &amp;outpipe_writer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Attach the pipes to the socket object.</span></span><br><span class="line">        <span class="built_in">attach_pipes</span> (inpipe_reader, outpipe_writer, <span class="built_in">blob_t</span> ());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Attach the pipes to the session object.</span></span><br><span class="line">        session-&gt;<span class="built_in">attach_pipes</span> (outpipe_reader, inpipe_writer, <span class="built_in">blob_t</span> ());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Activate the session. Make it a child of this socket.</span></span><br><span class="line">    <span class="built_in">launch_child</span> (session);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">own_t</span>::<span class="built_in">launch_child</span> (<span class="type">own_t</span> *object_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Specify the owner of the object.</span></span><br><span class="line">    object_-&gt;<span class="built_in">set_owner</span> (<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Plug the object into the I/O thread.</span></span><br><span class="line">    <span class="built_in">send_plug</span> (object_);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Take ownership of the object.</span></span><br><span class="line">    <span class="built_in">send_own</span> (<span class="keyword">this</span>, object_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0mq socket为每个connect创建一个connect_session_t，代表主动发起的连接。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">connect_session_t</span>::<span class="built_in">process_plug</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Start connection process immediately.</span></span><br><span class="line">    <span class="built_in">start_connecting</span> (<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> zmq::<span class="type">connect_session_t</span>::<span class="built_in">start_connecting</span> (<span class="type">bool</span> wait_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Choose I/O thread to run connecter in. Given that we are already</span></span><br><span class="line">    <span class="comment">//  running in an I/O thread, there must be at least one available.</span></span><br><span class="line">    <span class="type">io_thread_t</span> *io_thread = <span class="built_in">choose_io_thread</span> (options.affinity);</span><br><span class="line">    <span class="built_in">zmq_assert</span> (io_thread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Create the connecter object.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Both TCP and IPC transports are using the same infrastructure.</span></span><br><span class="line">    <span class="keyword">if</span> (protocol == <span class="string">&quot;tcp&quot;</span> || protocol == <span class="string">&quot;ipc&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">zmq_connecter_t</span> *connecter = <span class="built_in">new</span> (std::nothrow) <span class="built_in">zmq_connecter_t</span> (</span><br><span class="line">            io_thread, <span class="keyword">this</span>, options, protocol.<span class="built_in">c_str</span> (), address.<span class="built_in">c_str</span> (),</span><br><span class="line">            wait_);</span><br><span class="line">        <span class="built_in">alloc_assert</span> (connecter);</span><br><span class="line">        <span class="built_in">launch_child</span> (connecter);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">zmq_assert</span> (<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>zmq_connect_t负责发起连接以及连接失败后重连。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">zmq_connecter_t</span>::<span class="built_in">process_plug</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (wait)</span><br><span class="line">        <span class="built_in">add_reconnect_timer</span>();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">start_connecting</span> ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> zmq::<span class="type">zmq_connecter_t</span>::<span class="built_in">start_connecting</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Open the connecting socket.</span></span><br><span class="line">    <span class="type">int</span> rc = tcp_connecter.<span class="built_in">open</span> ();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Connect may succeed in synchronous manner.</span></span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">        handle = <span class="built_in">add_fd</span> (tcp_connecter.<span class="built_in">get_fd</span> ());</span><br><span class="line">        handle_valid = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">out_event</span> ();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Connection establishment may be dealyed. Poll for its completion.</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rc == <span class="number">-1</span> &amp;&amp; errno == EAGAIN) &#123;</span><br><span class="line">        handle = <span class="built_in">add_fd</span> (tcp_connecter.<span class="built_in">get_fd</span> ());</span><br><span class="line">        handle_valid = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">set_pollout</span> (handle);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Handle any other error condition by eventual reconnect.</span></span><br><span class="line">    wait = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">add_reconnect_timer</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于ipc或者本机tcp端口的连接可能立即成功，对于处于连接过程中的fd将其置入io_thread_t的线程中polling。如失败，则重连。下面是zmq_connect_t的out_event函数，该函数在连接成功时被调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">zmq_connecter_t</span>::<span class="built_in">out_event</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">fd_t</span> fd = tcp_connecter.<span class="built_in">connect</span> ();</span><br><span class="line">    <span class="built_in">rm_fd</span> (handle);</span><br><span class="line">    handle_valid = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Handle the error condition by attempt to reconnect.</span></span><br><span class="line">    <span class="keyword">if</span> (fd == retired_fd) &#123;</span><br><span class="line">        tcp_connecter.<span class="built_in">close</span> ();</span><br><span class="line">        wait = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">add_reconnect_timer</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Choose I/O thread to run connecter in. Given that we are already</span></span><br><span class="line">    <span class="comment">//  running in an I/O thread, there must be at least one available.</span></span><br><span class="line">    <span class="type">io_thread_t</span> *io_thread = <span class="built_in">choose_io_thread</span> (options.affinity);</span><br><span class="line">    <span class="built_in">zmq_assert</span> (io_thread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Create an init object. </span></span><br><span class="line">    <span class="type">zmq_init_t</span> *init = <span class="built_in">new</span> (std::nothrow) <span class="built_in">zmq_init_t</span> (io_thread, <span class="literal">NULL</span>,</span><br><span class="line">        session, fd, options);</span><br><span class="line">    <span class="built_in">alloc_assert</span> (init);</span><br><span class="line">    <span class="built_in">launch_sibling</span> (init);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Shut the connecter down.</span></span><br><span class="line">    <span class="built_in">terminate</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当连接建立起来之后，通过zmq_init_t进行最出的数据（identity）交换。zmq_init_t被直接挂接到了session_t(connect_session_t)上去了，而zmq_connecter_t被terminate()。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">zmq::<span class="type">zmq_init_t</span>::<span class="built_in">zmq_init_t</span> (<span class="type">io_thread_t</span> *io_thread_,</span><br><span class="line">      <span class="type">socket_base_t</span> *socket_, <span class="type">session_t</span> *session_, <span class="type">fd_t</span> fd_,</span><br><span class="line">      <span class="type">const</span> <span class="type">options_t</span> &amp;options_) :</span><br><span class="line">    <span class="built_in">own_t</span> (io_thread_, options_),</span><br><span class="line">    <span class="built_in">ephemeral_engine</span> (<span class="literal">NULL</span>),</span><br><span class="line">    <span class="built_in">sent</span> (<span class="literal">false</span>),</span><br><span class="line">    <span class="built_in">received</span> (<span class="literal">false</span>),</span><br><span class="line">    <span class="built_in">socket</span> (socket_),</span><br><span class="line">    <span class="built_in">session</span> (session_),</span><br><span class="line">    <span class="built_in">io_thread</span> (io_thread_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Create the engine object for this connection.</span></span><br><span class="line">    engine = <span class="built_in">new</span> (std::nothrow) <span class="built_in">zmq_engine_t</span> (fd_, options);</span><br><span class="line">    <span class="built_in">alloc_assert</span> (engine);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> zmq::<span class="type">zmq_init_t</span>::<span class="built_in">process_plug</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">zmq_assert</span> (engine);</span><br><span class="line">    engine-&gt;<span class="built_in">plug</span> (io_thread, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> zmq::<span class="type">zmq_engine_t</span>::<span class="built_in">plug</span> (<span class="type">io_thread_t</span> *io_thread_, i_inout *inout_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">zmq_assert</span> (!plugged);</span><br><span class="line">    plugged = <span class="literal">true</span>;</span><br><span class="line">    ephemeral_inout = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Connect to session/init object.</span></span><br><span class="line">    <span class="built_in">zmq_assert</span> (!inout);</span><br><span class="line">    <span class="built_in">zmq_assert</span> (inout_);</span><br><span class="line">    encoder.<span class="built_in">set_inout</span> (inout_);</span><br><span class="line">    decoder.<span class="built_in">set_inout</span> (inout_);</span><br><span class="line">    inout = inout_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Connect to I/O threads poller object.</span></span><br><span class="line">    <span class="type">io_object_t</span>::<span class="built_in">plug</span> (io_thread_);</span><br><span class="line">    handle = <span class="built_in">add_fd</span> (tcp_socket.<span class="built_in">get_fd</span> ());</span><br><span class="line">    <span class="built_in">set_pollin</span> (handle);</span><br><span class="line">    <span class="built_in">set_pollout</span> (handle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Flush all the data that may have been already received downstream.</span></span><br><span class="line">    <span class="built_in">in_event</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一次被polling的是真正的用于tcp/ipc数据传输的socket fd。zmq_engine_t的encoder和decoder的类型分别为encoder_t和decoder_t。encoder_t用于发送数据时负责从inout_（这里是zmq_init_t）取得（调用inout_的read函数）并打包数据。decoder_t用于接收数据时负责解包并将数据发送（调用inout_的write函数）到inout_。具体可看二者的实现及zmq_engine_t的in_event和out_event函数。下面时zmq_init_t的read、write函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> zmq::<span class="type">zmq_init_t</span>::<span class="built_in">read</span> (::<span class="type">zmq_msg_t</span> *msg_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  If the identity was already sent, do nothing.</span></span><br><span class="line">    <span class="keyword">if</span> (sent)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Send the identity.</span></span><br><span class="line">    <span class="type">int</span> rc = <span class="built_in">zmq_msg_init_size</span> (msg_, options.identity.<span class="built_in">size</span> ());</span><br><span class="line">    <span class="built_in">zmq_assert</span> (rc == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memcpy</span> (<span class="built_in">zmq_msg_data</span> (msg_), options.identity.<span class="built_in">c_str</span> (),</span><br><span class="line">        options.identity.<span class="built_in">size</span> ());</span><br><span class="line">    sent = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Try finalize initialization.</span></span><br><span class="line">    <span class="built_in">finalise_initialisation</span> ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> zmq::<span class="type">zmq_init_t</span>::<span class="built_in">write</span> (::<span class="type">zmq_msg_t</span> *msg_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  If identity was already received, we are not interested</span></span><br><span class="line">    <span class="comment">//  in subsequent messages.</span></span><br><span class="line">    <span class="keyword">if</span> (received)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Retreieve the remote identity. If it&#x27;s empty, generate a unique name.</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">zmq_msg_size</span> (msg_)) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> identity [<span class="type">uuid_t</span>::uuid_blob_len + <span class="number">1</span>];</span><br><span class="line">        identity [<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memcpy</span> (identity + <span class="number">1</span>, <span class="built_in">uuid_t</span> ().<span class="built_in">to_blob</span> (), <span class="type">uuid_t</span>::uuid_blob_len);</span><br><span class="line">        peer_identity.<span class="built_in">assign</span> (identity, <span class="type">uuid_t</span>::uuid_blob_len + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        peer_identity.<span class="built_in">assign</span> ((<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*) <span class="built_in">zmq_msg_data</span> (msg_),</span><br><span class="line">            <span class="built_in">zmq_msg_size</span> (msg_));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> rc = <span class="built_in">zmq_msg_close</span> (msg_);</span><br><span class="line">    <span class="built_in">zmq_assert</span> (rc == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    received = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Try finalize initialization.</span></span><br><span class="line">    <span class="built_in">finalise_initialisation</span> ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> zmq::<span class="type">zmq_init_t</span>::<span class="built_in">finalise_initialisation</span> ()</span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//  Unplug and prepare to dispatch engine.</span></span><br><span class="line">     <span class="keyword">if</span> (sent &amp;&amp; received) &#123;</span><br><span class="line">        ephemeral_engine = engine;</span><br><span class="line">        engine = <span class="literal">NULL</span>;</span><br><span class="line">        ephemeral_engine-&gt;<span class="built_in">unplug</span> ();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> zmq::<span class="type">zmq_init_t</span>::<span class="built_in">flush</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Check if there&#x27;s anything to flush.</span></span><br><span class="line">    <span class="keyword">if</span> (!received)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Initialization is done, dispatch engine.</span></span><br><span class="line">    <span class="keyword">if</span> (ephemeral_engine)</span><br><span class="line">        <span class="built_in">dispatch_engine</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出zmq_init_t的read只是将其identity发送出去，write只是接收连接另一方的identity。当连接的双方交换过identity之后，zmq_init_t不在发送或接收任何数据。zmq_init_t的flush函数被zmq_engine_t的in_event或out_event调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">zmq_init_t</span>::<span class="built_in">dispatch_engine</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (sent &amp;&amp; received) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Engine must be detached.</span></span><br><span class="line">        <span class="built_in">zmq_assert</span> (!engine);</span><br><span class="line">        <span class="built_in">zmq_assert</span> (ephemeral_engine);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  If we know what session we belong to, it&#x27;s easy, just send the</span></span><br><span class="line">        <span class="comment">//  engine to that session and destroy the init object. Note that we</span></span><br><span class="line">        <span class="comment">//  know about the session only if this object is owned by it. Thus,</span></span><br><span class="line">        <span class="comment">//  lifetime of this object in contained in the lifetime of the session</span></span><br><span class="line">        <span class="comment">//  so the pointer cannot become invalid without notice.</span></span><br><span class="line">        <span class="keyword">if</span> (session) &#123;</span><br><span class="line">            <span class="built_in">send_attach</span> (session, ephemeral_engine, peer_identity, <span class="literal">true</span>);</span><br><span class="line">            <span class="built_in">terminate</span> ();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  All the cases below are listener-based. Therefore we need the socket</span></span><br><span class="line">        <span class="comment">//  reference so that new sessions can bind to that socket.</span></span><br><span class="line">        <span class="built_in">zmq_assert</span> (socket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  We have no associated session. If the peer has no identity we&#x27;ll</span></span><br><span class="line">        <span class="comment">//  create a transient session for the connection. Note that</span></span><br><span class="line">        <span class="comment">//  seqnum is incremented to account for attach command before the</span></span><br><span class="line">        <span class="comment">//  session is launched. That way we are sure it won&#x27;t terminate before</span></span><br><span class="line">        <span class="comment">//  being attached.</span></span><br><span class="line">        <span class="keyword">if</span> (peer_identity [<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            session = <span class="built_in">new</span> (std::nothrow) <span class="built_in">transient_session_t</span> (io_thread,</span><br><span class="line">                socket, options);</span><br><span class="line">            <span class="built_in">alloc_assert</span> (session);</span><br><span class="line">            session-&gt;<span class="built_in">inc_seqnum</span> ();</span><br><span class="line">            <span class="built_in">launch_sibling</span> (session);</span><br><span class="line">            <span class="built_in">send_attach</span> (session, ephemeral_engine, peer_identity, <span class="literal">false</span>);</span><br><span class="line">            <span class="built_in">terminate</span> ();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  Try to find the session corresponding to the peer&#x27;s identity.</span></span><br><span class="line">        <span class="comment">//  If found, send the engine to that session and destroy this object.</span></span><br><span class="line">        <span class="comment">//  Note that session&#x27;s seqnum is incremented by find_session rather</span></span><br><span class="line">        <span class="comment">//  than by send_attach.</span></span><br><span class="line">        session = socket-&gt;<span class="built_in">find_session</span> (peer_identity);</span><br><span class="line">        <span class="keyword">if</span> (session) &#123;</span><br><span class="line">            <span class="built_in">send_attach</span> (session, ephemeral_engine, peer_identity, <span class="literal">false</span>);</span><br><span class="line">            <span class="built_in">terminate</span> ();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  There&#x27;s no such named session. We have to create one. Note that</span></span><br><span class="line">        <span class="comment">//  seqnum is incremented to account for attach command before the</span></span><br><span class="line">        <span class="comment">//  session is launched. That way we are sure it won&#x27;t terminate before</span></span><br><span class="line">        <span class="comment">//  being attached.</span></span><br><span class="line">        session = <span class="built_in">new</span> (std::nothrow) <span class="built_in">named_session_t</span> (io_thread, socket,</span><br><span class="line">            options, peer_identity);</span><br><span class="line">        <span class="built_in">alloc_assert</span> (session);</span><br><span class="line">        session-&gt;<span class="built_in">inc_seqnum</span> ();</span><br><span class="line">        <span class="built_in">launch_sibling</span> (session);</span><br><span class="line">        <span class="built_in">send_attach</span> (session, ephemeral_engine, peer_identity, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">terminate</span> ();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主动发起connect时，zmq_init_t是由zmq_connecter_t创建的，其session成员指向connect_session_t（继承自session_t）。当zmq_init_t的dispatch_engine被调用时，直接向connect_session_t发送attach zmq_engine_t的请求。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">session_t</span>::<span class="built_in">process_attach</span> (i_engine *engine_,</span><br><span class="line">    <span class="type">const</span> <span class="type">blob_t</span> &amp;peer_identity_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// omit ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Check whether the required pipes already exist. If not so, we&#x27;ll</span></span><br><span class="line">    <span class="comment">//  create them and bind them to the socket object.</span></span><br><span class="line">    <span class="keyword">if</span> (!pipes_attached) &#123;</span><br><span class="line">        <span class="built_in">zmq_assert</span> (!in_pipe &amp;&amp; !out_pipe);</span><br><span class="line">        pipes_attached = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">reader_t</span> *socket_reader = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">writer_t</span> *socket_writer = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Create the pipes, as required.</span></span><br><span class="line">        <span class="keyword">if</span> (options.requires_in) &#123;</span><br><span class="line">            <span class="built_in">create_pipe</span> (socket, <span class="keyword">this</span>, options.hwm, options.swap, &amp;socket_reader,</span><br><span class="line">                &amp;out_pipe);</span><br><span class="line">            out_pipe-&gt;<span class="built_in">set_event_sink</span> (<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.requires_out) &#123;</span><br><span class="line">            <span class="built_in">create_pipe</span> (<span class="keyword">this</span>, socket, options.hwm, options.swap, &amp;in_pipe,</span><br><span class="line">                &amp;socket_writer);</span><br><span class="line">            in_pipe-&gt;<span class="built_in">set_event_sink</span> (<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Bind the pipes to the socket object.</span></span><br><span class="line">        <span class="keyword">if</span> (socket_reader || socket_writer)</span><br><span class="line">            <span class="built_in">send_bind</span> (socket, socket_reader, socket_writer, peer_identity_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Plug in the engine.</span></span><br><span class="line">    engine = engine_;</span><br><span class="line">    engine-&gt;<span class="built_in">plug</span> (io_thread, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Trigger the notfication about the attachment.</span></span><br><span class="line">    <span class="built_in">attached</span> (peer_identity_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在if中执行的代码其实和socket_base_t::connect函数靠后的if中的代码作用相似。都是在0mq的socket和session_t之间建立传输zmq_msg_t的管道。这一次zmq_engine_t plug函数的inout_参数时session_t。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">zmq::create_pipe</span> <span class="params">(<span class="type">object_t</span> *reader_parent_, <span class="type">object_t</span> *writer_parent_,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint64_t</span> hwm_, <span class="type">int64_t</span> swap_size_, <span class="type">reader_t</span> **reader_, <span class="type">writer_t</span> **writer_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> lwm = (hwm_ &gt; max_wm_delta * <span class="number">2</span>) ?</span><br><span class="line">        hwm_ - max_wm_delta : (hwm_ + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Create all three objects pipe consists of: the pipe per se, reader and</span></span><br><span class="line">    <span class="comment">//  writer. The pipe will be handled by reader and writer, its never passed</span></span><br><span class="line">    <span class="comment">//  to the user. Reader and writer are returned to the user.</span></span><br><span class="line">    <span class="type">pipe_t</span> *pipe = <span class="built_in">new</span> (std::nothrow) <span class="built_in">pipe_t</span> ();</span><br><span class="line">    <span class="built_in">alloc_assert</span> (pipe);</span><br><span class="line">    *reader_ = <span class="built_in">new</span> (std::nothrow) <span class="built_in">reader_t</span> (reader_parent_, pipe, lwm);</span><br><span class="line">    <span class="built_in">alloc_assert</span> (*reader_);</span><br><span class="line">    *writer_ = <span class="built_in">new</span> (std::nothrow) <span class="built_in">writer_t</span> (writer_parent_, pipe, *reader_,</span><br><span class="line">        hwm_, swap_size_);</span><br><span class="line">    <span class="built_in">alloc_assert</span> (*writer_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当tcp/ipc的socket可读或可写时分别调用的是session_t的write和read函数，即从tcp/ipc读出数据，由decoder解包，由session_t写入传输zmq_msg_t的管道，再由0mq socket读给应用程序；应用程序写入zmq_msg_t，0mq socket将之写入传输管道，session_t从中读取zmq_msg_t，再由encoder_t打包发送到tcp/ipc。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;zmq_connect直接调用socket_base_t的connect函数。这里暂且只看tcp和ipc部分。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;socket_base_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;connect&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *addr_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;unlikely&lt;/span&gt; (ctx_terminated)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errno = ETERM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Parse addr_ string.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::string protocol;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::string address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rc = &lt;span class=&quot;built_in&quot;&gt;parse_uri&lt;/span&gt; (addr_, protocol, address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// omit...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Parsed address for validation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sockaddr_storage addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;socklen_t&lt;/span&gt; addr_len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (protocol == &lt;span class=&quot;string&quot;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rc = &lt;span class=&quot;built_in&quot;&gt;resolve_ip_hostname&lt;/span&gt; (&amp;amp;addr, &amp;amp;addr_len, address.&lt;span class=&quot;built_in&quot;&gt;c_str&lt;/span&gt; ());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (protocol == &lt;span class=&quot;string&quot;&gt;&amp;quot;ipc&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rc = &lt;span class=&quot;built_in&quot;&gt;resolve_local_path&lt;/span&gt; (&amp;amp;addr, &amp;amp;addr_len, address.&lt;span class=&quot;built_in&quot;&gt;c_str&lt;/span&gt; ());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Choose the I/O thread to run the session in.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;io_thread_t&lt;/span&gt; *io_thread = &lt;span class=&quot;built_in&quot;&gt;choose_io_thread&lt;/span&gt; (options.affinity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!io_thread) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errno = EMTHREAD;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Create session.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;connect_session_t&lt;/span&gt; *session = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; (std::nothrow) &lt;span class=&quot;built_in&quot;&gt;connect_session_t&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        io_thread, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, options, protocol.&lt;span class=&quot;built_in&quot;&gt;c_str&lt;/span&gt; (), address.&lt;span class=&quot;built_in&quot;&gt;c_str&lt;/span&gt; ());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;alloc_assert&lt;/span&gt; (session);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  If &amp;#x27;immediate connect&amp;#x27; feature is required, we&amp;#x27;ll create the pipes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  to the session straight away. Otherwise, they&amp;#x27;ll be created by the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  session once the connection is established.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (options.immediate_connect) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;reader_t&lt;/span&gt; *inpipe_reader = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;writer_t&lt;/span&gt; *inpipe_writer = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;reader_t&lt;/span&gt; *outpipe_reader = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;writer_t&lt;/span&gt; *outpipe_writer = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Create inbound pipe, if required.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (options.requires_in)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;create_pipe&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, session, options.hwm, options.swap,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;inpipe_reader, &amp;amp;inpipe_writer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Create outbound pipe, if required.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (options.requires_out)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;create_pipe&lt;/span&gt; (session, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, options.hwm, options.swap,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;outpipe_reader, &amp;amp;outpipe_writer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Attach the pipes to the socket object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;attach_pipes&lt;/span&gt; (inpipe_reader, outpipe_writer, &lt;span class=&quot;built_in&quot;&gt;blob_t&lt;/span&gt; ());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Attach the pipes to the session object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        session-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;attach_pipes&lt;/span&gt; (outpipe_reader, inpipe_writer, &lt;span class=&quot;built_in&quot;&gt;blob_t&lt;/span&gt; ());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Activate the session. Make it a child of this socket.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;launch_child&lt;/span&gt; (session);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;own_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;launch_child&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;own_t&lt;/span&gt; *object_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Specify the owner of the object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    object_-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;set_owner&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Plug the object into the I/O thread.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;send_plug&lt;/span&gt; (object_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Take ownership of the object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;send_own&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, object_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;0mq socket为每个connect创建一个connect_session_t，代表主动发起的连接。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;connect_session_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;process_plug&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Start connection process immediately.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;start_connecting&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;connect_session_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;start_connecting&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; wait_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Choose I/O thread to run connecter in. Given that we are already&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  running in an I/O thread, there must be at least one available.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;io_thread_t&lt;/span&gt; *io_thread = &lt;span class=&quot;built_in&quot;&gt;choose_io_thread&lt;/span&gt; (options.affinity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (io_thread);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Create the connecter object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Both TCP and IPC transports are using the same infrastructure.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (protocol == &lt;span class=&quot;string&quot;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt; || protocol == &lt;span class=&quot;string&quot;&gt;&amp;quot;ipc&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;zmq_connecter_t&lt;/span&gt; *connecter = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; (std::nothrow) &lt;span class=&quot;built_in&quot;&gt;zmq_connecter_t&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            io_thread, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, options, protocol.&lt;span class=&quot;built_in&quot;&gt;c_str&lt;/span&gt; (), address.&lt;span class=&quot;built_in&quot;&gt;c_str&lt;/span&gt; (),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            wait_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;alloc_assert&lt;/span&gt; (connecter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;launch_child&lt;/span&gt; (connecter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;zmq_connect_t负责发起连接以及连接失败后重连。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;zmq_connecter_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;process_plug&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (wait)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;add_reconnect_timer&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;start_connecting&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;zmq_connecter_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;start_connecting&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Open the connecting socket.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rc = tcp_connecter.&lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Connect may succeed in synchronous manner.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handle = &lt;span class=&quot;built_in&quot;&gt;add_fd&lt;/span&gt; (tcp_connecter.&lt;span class=&quot;built_in&quot;&gt;get_fd&lt;/span&gt; ());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handle_valid = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;out_event&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Connection establishment may be dealyed. Poll for its completion.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; errno == EAGAIN) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handle = &lt;span class=&quot;built_in&quot;&gt;add_fd&lt;/span&gt; (tcp_connecter.&lt;span class=&quot;built_in&quot;&gt;get_fd&lt;/span&gt; ());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handle_valid = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;set_pollout&lt;/span&gt; (handle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Handle any other error condition by eventual reconnect.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;add_reconnect_timer&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于ipc或者本机tcp端口的连接可能立即成功，对于处于连接过程中的fd将其置入io_thread_t的线程中polling。如失败，则重连。下面是zmq_connect_t的out_event函数，该函数在连接成功时被调用：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;zmq_connecter_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;out_event&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;fd_t&lt;/span&gt; fd = tcp_connecter.&lt;span class=&quot;built_in&quot;&gt;connect&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;rm_fd&lt;/span&gt; (handle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handle_valid = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Handle the error condition by attempt to reconnect.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fd == retired_fd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tcp_connecter.&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;add_reconnect_timer&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Choose I/O thread to run connecter in. Given that we are already&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  running in an I/O thread, there must be at least one available.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;io_thread_t&lt;/span&gt; *io_thread = &lt;span class=&quot;built_in&quot;&gt;choose_io_thread&lt;/span&gt; (options.affinity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (io_thread);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Create an init object. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;zmq_init_t&lt;/span&gt; *init = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; (std::nothrow) &lt;span class=&quot;built_in&quot;&gt;zmq_init_t&lt;/span&gt; (io_thread, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        session, fd, options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;alloc_assert&lt;/span&gt; (init);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;launch_sibling&lt;/span&gt; (init);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Shut the connecter down.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;terminate&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当连接建立起来之后，通过zmq_init_t进行最出的数据（identity）交换。zmq_init_t被直接挂接到了session_t(connect_session_t)上去了，而zmq_connecter_t被terminate()。&lt;/p&gt;</summary>
    
    
    
    
    <category term="zeromq" scheme="http://blog.kezhuw.name/tags/zeromq/"/>
    
  </entry>
  
  <entry>
    <title>zeromq mailbox</title>
    <link href="http://blog.kezhuw.name/2012/03/05/zeromq-mailbox/"/>
    <id>http://blog.kezhuw.name/2012/03/05/zeromq-mailbox/</id>
    <published>2012-03-04T21:12:25.000Z</published>
    <updated>2014-12-28T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>0mq中的reaper_t和io_thread_t的in_event函数大体相同，都是用来处理mailbox里的命令。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">io_thread_t</span>::<span class="built_in">in_event</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  <span class="doctag">TODO:</span> Do we want to limit number of commands I/O thread can</span></span><br><span class="line">    <span class="comment">//  process in a single go?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Get the next command. If there is none, exit.</span></span><br><span class="line">        <span class="type">command_t</span> cmd;</span><br><span class="line">        <span class="type">int</span> rc = mailbox.<span class="built_in">recv</span> (&amp;cmd, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span> &amp;&amp; errno == EINTR)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span> &amp;&amp; errno == EAGAIN)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">errno_assert</span> (rc == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Process the command.</span></span><br><span class="line">        cmd.destination-&gt;;<span class="built_in">process_command</span> (cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">ctx_t</span>::<span class="built_in">send_command</span> (<span class="type">uint32_t</span> tid_, <span class="type">const</span> <span class="type">command_t</span> &amp;command_)</span><br><span class="line">&#123;</span><br><span class="line">    slots [tid_]-&gt;<span class="built_in">send</span> (command_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从<a href="/2012/03/04/zeromq-context/">之前</a>可以看出： <ul></p><ul><li>当in_event函数相关联的fd可读时，in_event函数被调用；</li><li>reaper_t和io_thread_t的in_event的关联fd都是各自的mailbox成员get_fd函数的返回值。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zmq::<span class="type">fd_t</span> zmq::<span class="type">mailbox_t</span>::<span class="built_in">get_fd</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> signaler.<span class="built_in">get_fd</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zmq::<span class="type">fd_t</span> zmq::<span class="type">signaler_t</span>::<span class="built_in">get_fd</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">zmq::<span class="type">signaler_t</span>::<span class="built_in">signaler_t</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Create the socketpair for signaling.</span></span><br><span class="line">    <span class="type">int</span> rc = <span class="built_in">make_fdpair</span> (&amp;r, &amp;w);</span><br><span class="line">    <span class="built_in">errno_assert</span> (rc == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Set both fds to non-blocking mode.</span></span><br><span class="line">    <span class="type">int</span> flags = <span class="built_in">fcntl</span> (w, F_GETFL, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">errno_assert</span> (flags &gt;= <span class="number">0</span>);</span><br><span class="line">    rc = <span class="built_in">fcntl</span> (w, F_SETFL, flags | O_NONBLOCK);</span><br><span class="line">    <span class="built_in">errno_assert</span> (rc == <span class="number">0</span>);</span><br><span class="line">    flags = <span class="built_in">fcntl</span> (r, F_GETFL, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">errno_assert</span> (flags &gt;= <span class="number">0</span>);</span><br><span class="line">    rc = <span class="built_in">fcntl</span> (r, F_SETFL, flags | O_NONBLOCK);</span><br><span class="line">    <span class="built_in">errno_assert</span> (rc == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> zmq::<span class="type">signaler_t</span>::<span class="built_in">make_fdpair</span> (<span class="type">fd_t</span> *r_, <span class="type">fd_t</span> *w_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sv [<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> rc = <span class="built_in">socketpair</span> (AF_UNIX, SOCK_STREAM, <span class="number">0</span>, sv);</span><br><span class="line">    <span class="built_in">errno_assert</span> (rc == <span class="number">0</span>);</span><br><span class="line">    *w_ = sv [<span class="number">0</span>];</span><br><span class="line">    *r_ = sv [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mailbox_t的get_fd函数返回的是其signaler成员所创建的管道的读端。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zmq::<span class="type">mailbox_t</span>::<span class="built_in">mailbox_t</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Get the pipe into passive state. That way, if the users starts by</span></span><br><span class="line">    <span class="comment">//  polling on the associated file descriptor it will get woken up when</span></span><br><span class="line">    <span class="comment">//  new command is posted.</span></span><br><span class="line">    <span class="type">bool</span> ok = cpipe.<span class="built_in">read</span> (<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">zmq_assert</span> (!ok);</span><br><span class="line">    active = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">mailbox_t</span>::<span class="built_in">send</span> (<span class="type">const</span> <span class="type">command_t</span> &amp;cmd_)</span><br><span class="line">&#123;</span><br><span class="line">    sync.<span class="built_in">lock</span> ();</span><br><span class="line">    cpipe.<span class="built_in">write</span> (cmd_, <span class="literal">false</span>);</span><br><span class="line">    <span class="type">bool</span> ok = cpipe.<span class="built_in">flush</span> ();</span><br><span class="line">    sync.<span class="built_in">unlock</span> ();</span><br><span class="line">    <span class="keyword">if</span> (!ok)</span><br><span class="line">        signaler.<span class="built_in">send</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">signaler_t</span>::<span class="built_in">send</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> dummy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">ssize_t</span> nbytes = ::<span class="built_in">send</span> (w, &amp;dummy, <span class="built_in">sizeof</span> (dummy), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">unlikely</span> (nbytes == <span class="number">-1</span> &amp;&amp; errno == EINTR))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">zmq_assert</span> (nbytes == <span class="built_in">sizeof</span> (dummy));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当用户第一次调用mailbox_t的send函数时，会调用其signaler成员的send函数，这使得signaler创建的管道的读端变为可读。其关联对象的in_event函数得到调用。reaper_t和io_thread_t的in_event函数循环调用各自mailbox的recv函数取得command。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> zmq::<span class="type">mailbox_t</span>::<span class="built_in">recv</span> (<span class="type">command_t</span> *cmd_, <span class="type">int</span> timeout_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Try to get the command straight away.</span></span><br><span class="line">    <span class="keyword">if</span> (active) &#123;</span><br><span class="line">        <span class="type">bool</span> ok = cpipe.<span class="built_in">read</span> (cmd_);</span><br><span class="line">        <span class="keyword">if</span> (ok)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  If there are no more commands available, switch into passive state.</span></span><br><span class="line">        active = <span class="literal">false</span>;</span><br><span class="line">        signaler.<span class="built_in">recv</span> ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Wait for signal from the command sender.</span></span><br><span class="line">    <span class="type">int</span> rc = signaler.<span class="built_in">wait</span> (timeout_);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span> &amp;&amp; (errno == EAGAIN || errno == EINTR))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  We&#x27;ve got the signal. Now we can switch into active state.</span></span><br><span class="line">    active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Get a command.</span></span><br><span class="line">    <span class="built_in">errno_assert</span> (rc == <span class="number">0</span>);</span><br><span class="line">    <span class="type">bool</span> ok = cpipe.<span class="built_in">read</span> (cmd_);</span><br><span class="line">    <span class="built_in">zmq_assert</span> (ok);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> zmq::<span class="type">signaler_t</span>::<span class="built_in">wait</span> (<span class="type">int</span> timeout_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">pollfd</span> pfd;</span><br><span class="line">    pfd.fd = r;</span><br><span class="line">    pfd.events = POLLIN;</span><br><span class="line">    <span class="type">int</span> rc = <span class="built_in">poll</span> (&amp;pfd, <span class="number">1</span>, timeout_);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">unlikely</span> (rc &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="built_in">zmq_assert</span> (errno == EINTR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">unlikely</span> (rc == <span class="number">0</span>)) &#123;</span><br><span class="line">        errno = EAGAIN;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">zmq_assert</span> (rc == <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">zmq_assert</span> (pfd.revents &amp; POLLIN);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当command被取完时，调用singlar.recv将之前由mailbox_t::send触发的singlar.send发送的内容清空；并将errno设为EAGAIN。in_event函数终止。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;0mq中的reaper_t和io_thread_t的in_event函数大体相同，都是用来处理mailbox里的命令。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;io_thread_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;in_event&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; Do we want to limit number of commands I/O thread can&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  process in a single go?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Get the next command. If there is none, exit.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;command_t&lt;/span&gt; cmd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rc = mailbox.&lt;span class=&quot;built_in&quot;&gt;recv&lt;/span&gt; (&amp;amp;cmd, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; errno == EINTR)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; errno == EAGAIN)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;errno_assert&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  Process the command.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cmd.destination-&amp;gt;;&lt;span class=&quot;built_in&quot;&gt;process_command&lt;/span&gt; (cmd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;ctx_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;send_command&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;uint32_t&lt;/span&gt; tid_, &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;command_t&lt;/span&gt; &amp;amp;command_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    slots [tid_]-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;send&lt;/span&gt; (command_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从&lt;a href=&quot;/2012/03/04/zeromq-context/&quot;&gt;之前&lt;/a&gt;可以看出： &lt;/p&gt;&lt;ul&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当in_event函数相关联的fd可读时，in_event函数被调用；&lt;/li&gt;
&lt;li&gt;reaper_t和io_thread_t的in_event的关联fd都是各自的mailbox成员get_fd函数的返回值。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zmq::&lt;span class=&quot;type&quot;&gt;fd_t&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;mailbox_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;get_fd&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; signaler.&lt;span class=&quot;built_in&quot;&gt;get_fd&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zmq::&lt;span class=&quot;type&quot;&gt;fd_t&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;signaler_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;get_fd&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zmq::&lt;span class=&quot;type&quot;&gt;signaler_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;signaler_t&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Create the socketpair for signaling.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rc = &lt;span class=&quot;built_in&quot;&gt;make_fdpair&lt;/span&gt; (&amp;amp;r, &amp;amp;w);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;errno_assert&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Set both fds to non-blocking mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flags = &lt;span class=&quot;built_in&quot;&gt;fcntl&lt;/span&gt; (w, F_GETFL, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;errno_assert&lt;/span&gt; (flags &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rc = &lt;span class=&quot;built_in&quot;&gt;fcntl&lt;/span&gt; (w, F_SETFL, flags | O_NONBLOCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;errno_assert&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    flags = &lt;span class=&quot;built_in&quot;&gt;fcntl&lt;/span&gt; (r, F_GETFL, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;errno_assert&lt;/span&gt; (flags &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rc = &lt;span class=&quot;built_in&quot;&gt;fcntl&lt;/span&gt; (r, F_SETFL, flags | O_NONBLOCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;errno_assert&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;signaler_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;make_fdpair&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;fd_t&lt;/span&gt; *r_, &lt;span class=&quot;type&quot;&gt;fd_t&lt;/span&gt; *w_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sv [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rc = &lt;span class=&quot;built_in&quot;&gt;socketpair&lt;/span&gt; (AF_UNIX, SOCK_STREAM, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, sv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;errno_assert&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *w_ = sv [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *r_ = sv [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;mailbox_t的get_fd函数返回的是其signaler成员所创建的管道的读端。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zmq::&lt;span class=&quot;type&quot;&gt;mailbox_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;mailbox_t&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Get the pipe into passive state. That way, if the users starts by&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  polling on the associated file descriptor it will get woken up when&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  new command is posted.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; ok = cpipe.&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (!ok);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    active = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;mailbox_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;send&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;command_t&lt;/span&gt; &amp;amp;cmd_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sync.&lt;span class=&quot;built_in&quot;&gt;lock&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cpipe.&lt;span class=&quot;built_in&quot;&gt;write&lt;/span&gt; (cmd_, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; ok = cpipe.&lt;span class=&quot;built_in&quot;&gt;flush&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sync.&lt;span class=&quot;built_in&quot;&gt;unlock&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!ok)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signaler.&lt;span class=&quot;built_in&quot;&gt;send&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;signaler_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;send&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; dummy = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; nbytes = ::&lt;span class=&quot;built_in&quot;&gt;send&lt;/span&gt; (w, &amp;amp;dummy, &lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt; (dummy), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;unlikely&lt;/span&gt; (nbytes == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; errno == EINTR))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (nbytes == &lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt; (dummy));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当用户第一次调用mailbox_t的send函数时，会调用其signaler成员的send函数，这使得signaler创建的管道的读端变为可读。其关联对象的in_event函数得到调用。reaper_t和io_thread_t的in_event函数循环调用各自mailbox的recv函数取得command。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;mailbox_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;recv&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;command_t&lt;/span&gt; *cmd_, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; timeout_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Try to get the command straight away.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (active) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; ok = cpipe.&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; (cmd_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ok)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  If there are no more commands available, switch into passive state.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        active = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signaler.&lt;span class=&quot;built_in&quot;&gt;recv&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Wait for signal from the command sender.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rc = signaler.&lt;span class=&quot;built_in&quot;&gt;wait&lt;/span&gt; (timeout_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rc != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; (errno == EAGAIN || errno == EINTR))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  We&amp;#x27;ve got the signal. Now we can switch into active state.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    active = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//  Get a command.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;errno_assert&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; ok = cpipe.&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; (cmd_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (ok);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; zmq::&lt;span class=&quot;type&quot;&gt;signaler_t&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;wait&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; timeout_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;pollfd&lt;/span&gt; pfd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pfd.fd = r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pfd.events = POLLIN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rc = &lt;span class=&quot;built_in&quot;&gt;poll&lt;/span&gt; (&amp;amp;pfd, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, timeout_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;unlikely&lt;/span&gt; (rc &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (errno == EINTR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;unlikely&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errno = EAGAIN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (pfd.revents &amp;amp; POLLIN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当command被取完时，调用singlar.recv将之前由mailbox_t::send触发的singlar.send发送的内容清空；并将errno设为EAGAIN。in_event函数终止。&lt;/p&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="zeromq" scheme="http://blog.kezhuw.name/tags/zeromq/"/>
    
  </entry>
  
  <entry>
    <title>zeromq context</title>
    <link href="http://blog.kezhuw.name/2012/03/04/zeromq-context/"/>
    <id>http://blog.kezhuw.name/2012/03/04/zeromq-context/</id>
    <published>2012-03-04T08:58:41.000Z</published>
    <updated>2014-12-21T12:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>A 0MQ context is thread safe and may be shared among as many application threads as necessary, without any additional locking required on the part of the caller.</p></blockquote><p>在C++中ctx_t这个类型代表context。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">zmq_init</span> <span class="params">(<span class="type">int</span> io_threads_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// Create 0MQ context.</span></span><br><span class="line">zmq::<span class="type">ctx_t</span> *ctx = <span class="built_in">new</span> (std::nothrow) zmq::<span class="built_in">ctx_t</span> ((<span class="type">uint32_t</span>) io_threads_);</span><br><span class="line"><span class="built_in">alloc_assert</span> (ctx);</span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span>*) ctx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The io_threads argument specifies the size of the 0MQ thread pool to handle I/O operations. If your application is using only the inproc transport for messaging you may set this to zero, otherwise set it to at least one.</p></blockquote><p>下面来看ctx_t的构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Initialise the array of mailboxes. Additional three slots are for</span></span><br><span class="line"><span class="comment">//  internal log socket and the zmq_term thread the reaper thread.</span></span><br><span class="line">slot_count = max_sockets + io_threads_ + <span class="number">3</span>;</span><br><span class="line">slots = (<span class="type">mailbox_t</span>**) <span class="built_in">malloc</span> (<span class="built_in">sizeof</span> (<span class="type">mailbox_t</span>*) * slot_count);</span><br><span class="line"><span class="built_in">alloc_assert</span> (slots);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Initialise the infrastructure for zmq_term thread.</span></span><br><span class="line">slots [term_tid] = &amp;term_mailbox;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Create the reaper thread.</span></span><br><span class="line">reaper = <span class="built_in">new</span> (std::nothrow) <span class="built_in">reaper_t</span> (<span class="keyword">this</span>, reaper_tid);</span><br><span class="line"><span class="built_in">alloc_assert</span> (reaper);</span><br><span class="line">slots [reaper_tid] = reaper-&amp;gt;<span class="built_in">get_mailbox</span> ();</span><br><span class="line">reaper-&amp;gt;<span class="built_in">start</span> ();</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Create the logging infrastructure.</span></span><br><span class="line">log_socket = <span class="built_in">create_socket</span> (ZMQ_PUB);</span><br><span class="line"><span class="built_in">zmq_assert</span> (log_socket);</span><br><span class="line">rc = log_socket-&amp;gt;<span class="built_in">bind</span> (<span class="string">&quot;sys://log&quot;</span>);</span><br><span class="line"><span class="built_in">zmq_assert</span> (rc == <span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Create I/O thread objects and launch them.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">2</span>; i != io_threads_ + <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="type">io_thread_t</span> *io_thread = <span class="built_in">new</span> (std::nothrow) <span class="built_in">io_thread_t</span> (<span class="keyword">this</span>, i);</span><br><span class="line">    <span class="built_in">alloc_assert</span> (io_thread);</span><br><span class="line">    io_threads.<span class="built_in">push_back</span> (io_thread);</span><br><span class="line">    slots [i] = io_thread-&amp;gt;<span class="built_in">get_mailbox</span> ();</span><br><span class="line">    io_thread-&amp;gt;<span class="built_in">start</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  In the unused part of the slot array, create a list of empty slots.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int32_t</span> i = (<span class="type">int32_t</span>) slot_count - <span class="number">1</span>;</span><br><span class="line">      i &gt;= (<span class="type">int32_t</span>) io_threads_ + <span class="number">2</span>; i--) &#123;</span><br><span class="line">    empty_slots.<span class="built_in">push_back</span> (i);</span><br><span class="line">    slots [i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是ctx_t构造函数函数体的全部。</p><p>接下来看reaper_t这个类型，reaper_t用来销毁0mq的socket的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">reaper_t</span>::<span class="built_in">process_reap</span> (<span class="type">socket_base_t</span> *socket_)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Add the socket to the poller.</span></span><br><span class="line">    socket_-&gt;<span class="built_in">start_reaping</span> (poller);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Start termination of associated I/O object hierarchy.</span></span><br><span class="line">    socket_-&gt;<span class="built_in">terminate</span> ();</span><br><span class="line">    socket_-&gt;<span class="built_in">check_destroy</span> ();</span><br><span class="line"></span><br><span class="line">    ++sockets;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是reaper_t的构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">zmq::<span class="type">reaper_t</span>::<span class="built_in">reaper_t</span> (<span class="keyword">class</span> <span class="type">ctx_t</span> *ctx_, <span class="type">uint32_t</span> tid_) :</span><br><span class="line">    <span class="built_in">object_t</span> (ctx_, tid_),</span><br><span class="line">    <span class="built_in">sockets</span> (<span class="number">0</span>),</span><br><span class="line">    <span class="built_in">terminating</span> (<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    poller = <span class="built_in">new</span> (std::nothrow) <span class="type">poller_t</span>;</span><br><span class="line">    <span class="built_in">alloc_assert</span> (poller);</span><br><span class="line"></span><br><span class="line">    mailbox_handle = poller-&gt;<span class="built_in">add_fd</span> (mailbox.<span class="built_in">get_fd</span> (), <span class="keyword">this</span>);</span><br><span class="line">    poller-&gt;<span class="built_in">set_pollin</span> (mailbox_handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中poller_t这个类型在FreeBSD上定义为kqueue_t，基于kqueue/kevent做polling。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">kqueue_t</span> <span class="type">poller_t</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zmq::<span class="type">kqueue_t</span>::<span class="built_in">kqueue_t</span> () :</span><br><span class="line">    <span class="built_in">stopping</span> (<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Create event queue</span></span><br><span class="line">    kqueue_fd = <span class="built_in">kqueue</span> ();</span><br><span class="line">    <span class="built_in">errno_assert</span> (kqueue_fd != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ctx_t的构造函数调用了reaper_t的start函数，而该函数有调用了kqueue_t的start函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">reaper_t</span>::<span class="built_in">start</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Start the thread.</span></span><br><span class="line">    poller-&gt;<span class="built_in">start</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">kqueue_t</span>::<span class="built_in">start</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    worker.<span class="built_in">start</span> (worker_routine, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kqueue_t的worker成员的类型是thread_t，其start函数创建了一个新的线程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">thread_t</span>::<span class="built_in">start</span> (thread_fn *tfn_, <span class="type">void</span> *arg_)</span><br><span class="line">&#123;</span><br><span class="line">    tfn = tfn_;</span><br><span class="line">    arg =arg_;</span><br><span class="line">    <span class="type">int</span> rc = <span class="built_in">pthread_create</span> (&amp;descriptor, <span class="literal">NULL</span>, thread_routine, <span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">posix_assert</span> (rc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *<span class="title">thread_routine</span> <span class="params">(<span class="type">void</span> *arg_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    zmq::<span class="type">thread_t</span> *self = (zmq::<span class="type">thread_t</span>*) arg_;</span><br><span class="line">    self-&gt;<span class="built_in">tfn</span> (self-&gt;arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回过头来在看kqueue_t的worker_routine函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">kqueue_t</span>::<span class="built_in">worker_routine</span> (<span class="type">void</span> *arg_)</span><br><span class="line">&#123;</span><br><span class="line">    ((<span class="type">kqueue_t</span>*) arg_)-&gt;<span class="built_in">loop</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是在一个新的线程里面调用kqueue_t的loop函数。0mq的做法将之与具体平台的线程接口隔离开了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">kqueue_t</span>::<span class="built_in">loop</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (!stopping) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Execute any due timers.</span></span><br><span class="line">        <span class="type">int</span> timeout = (<span class="type">int</span>) <span class="built_in">execute_timers</span> ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Wait for events.</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">kevent</span> ev_buf [max_io_events];</span><br><span class="line">        timespec ts = &#123;timeout / <span class="number">1000</span>, (timeout % <span class="number">1000</span>) * <span class="number">1000000</span>&#125;;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">kevent</span> (kqueue_fd, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;ev_buf [<span class="number">0</span>], max_io_events,</span><br><span class="line">            timeout ? &amp;ts: <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span> &amp;&amp; errno == EINTR)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">errno_assert</span> (n != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="type">poll_entry_t</span> *pe = (<span class="type">poll_entry_t</span>*) ev_buf [i].udata;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pe-&gt;fd == retired_fd)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (ev_buf [i].flags &amp; EV_EOF)</span><br><span class="line">                pe-&gt;reactor-&gt;<span class="built_in">in_event</span> ();</span><br><span class="line">            <span class="keyword">if</span> (pe-&gt;fd == retired_fd)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (ev_buf [i].filter == EVFILT_WRITE)</span><br><span class="line">                pe-&gt;reactor-&gt;<span class="built_in">out_event</span> ();</span><br><span class="line">            <span class="keyword">if</span> (pe-&gt;fd == retired_fd)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (ev_buf [i].filter == EVFILT_READ)</span><br><span class="line">                pe-&gt;reactor-&gt;<span class="built_in">in_event</span> ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Destroy retired event sources.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">retired_t</span>::iterator it = retired.<span class="built_in">begin</span> (); it != retired.<span class="built_in">end</span> ();</span><br><span class="line">              ++it)</span><br><span class="line">            <span class="keyword">delete</span> *it;</span><br><span class="line">        retired.<span class="built_in">clear</span> ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kqueue_t的loop函数主要执行timer相关函数、polling fds并调用相关接口和清理资源。</p><p>ctx_t构造函数创建的io_thread_t与reaper_t类似</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zmq::<span class="type">io_thread_t</span>::<span class="built_in">io_thread_t</span> (<span class="type">ctx_t</span> *ctx_, <span class="type">uint32_t</span> tid_) :</span><br><span class="line">    <span class="built_in">object_t</span> (ctx_, tid_)</span><br><span class="line">&#123;</span><br><span class="line">    poller = <span class="built_in">new</span> (std::nothrow) <span class="type">poller_t</span>;</span><br><span class="line">    <span class="built_in">alloc_assert</span> (poller);</span><br><span class="line"></span><br><span class="line">    mailbox_handle = poller-&gt;<span class="built_in">add_fd</span> (mailbox.<span class="built_in">get_fd</span> (), <span class="keyword">this</span>);</span><br><span class="line">    poller-&gt;<span class="built_in">set_pollin</span> (mailbox_handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">io_thread_t</span>::<span class="built_in">start</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  Start the underlying I/O thread.</span></span><br><span class="line">    poller-&gt;<span class="built_in">start</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在来看io_thread_t的in_event函数，reaper_t的in_event函数和io_thread_t的一样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> zmq::<span class="type">io_thread_t</span>::<span class="built_in">in_event</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  <span class="doctag">TODO:</span> Do we want to limit number of commands I/O thread can</span></span><br><span class="line">    <span class="comment">//  process in a single go?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Get the next command. If there is none, exit.</span></span><br><span class="line">        <span class="type">command_t</span> cmd;</span><br><span class="line">        <span class="type">int</span> rc = mailbox.<span class="built_in">recv</span> (&amp;cmd, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span> &amp;&amp; errno == EINTR)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span> &amp;&amp; errno == EAGAIN)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">errno_assert</span> (rc == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Process the command.</span></span><br><span class="line">        cmd.destination-&gt;<span class="built_in">process_command</span> (cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;A 0MQ context is thread safe and may be shared among as many application threads as necessary, without any additional locking required on the part of the caller.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在C++中ctx_t这个类型代表context。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;zmq_init&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; io_threads_)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Create 0MQ context.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	zmq::&lt;span class=&quot;type&quot;&gt;ctx_t&lt;/span&gt; *ctx = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; (std::nothrow) zmq::&lt;span class=&quot;built_in&quot;&gt;ctx_t&lt;/span&gt; ((&lt;span class=&quot;type&quot;&gt;uint32_t&lt;/span&gt;) io_threads_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;alloc_assert&lt;/span&gt; (ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;*) ctx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;The io_threads argument specifies the size of the 0MQ thread pool to handle I/O operations. If your application is using only the inproc transport for messaging you may set this to zero, otherwise set it to at least one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面来看ctx_t的构造函数：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Initialise the array of mailboxes. Additional three slots are for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  internal log socket and the zmq_term thread the reaper thread.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slot_count = max_sockets + io_threads_ + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slots = (&lt;span class=&quot;type&quot;&gt;mailbox_t&lt;/span&gt;**) &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;mailbox_t&lt;/span&gt;*) * slot_count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;alloc_assert&lt;/span&gt; (slots);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Initialise the infrastructure for zmq_term thread.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slots [term_tid] = &amp;amp;term_mailbox;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Create the reaper thread.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reaper = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; (std::nothrow) &lt;span class=&quot;built_in&quot;&gt;reaper_t&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, reaper_tid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;alloc_assert&lt;/span&gt; (reaper);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slots [reaper_tid] = reaper-&amp;amp;gt;&lt;span class=&quot;built_in&quot;&gt;get_mailbox&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reaper-&amp;amp;gt;&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Create the logging infrastructure.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log_socket = &lt;span class=&quot;built_in&quot;&gt;create_socket&lt;/span&gt; (ZMQ_PUB);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (log_socket);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rc = log_socket-&amp;amp;gt;&lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&amp;quot;sys://log&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;zmq_assert&lt;/span&gt; (rc == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Create I/O thread objects and launch them.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;uint32_t&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i != io_threads_ + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;io_thread_t&lt;/span&gt; *io_thread = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; (std::nothrow) &lt;span class=&quot;built_in&quot;&gt;io_thread_t&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;alloc_assert&lt;/span&gt; (io_thread);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    io_threads.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt; (io_thread);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    slots [i] = io_thread-&amp;amp;gt;&lt;span class=&quot;built_in&quot;&gt;get_mailbox&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    io_thread-&amp;amp;gt;&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt; ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  In the unused part of the slot array, create a list of empty slots.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int32_t&lt;/span&gt; i = (&lt;span class=&quot;type&quot;&gt;int32_t&lt;/span&gt;) slot_count - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      i &amp;gt;= (&lt;span class=&quot;type&quot;&gt;int32_t&lt;/span&gt;) io_threads_ + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    empty_slots.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt; (i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    slots [i] = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上就是ctx_t构造函数函数体的全部。&lt;/p&gt;</summary>
    
    
    
    
    <category term="zeromq" scheme="http://blog.kezhuw.name/tags/zeromq/"/>
    
  </entry>
  
</feed>
